// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ct.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zsearch {
class CTServerStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CTServerStatus> {
} _CTServerStatus_default_instance_;
class CTStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CTStatus> {
} _CTStatus_default_instance_;
class SCTDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SCT> {
} _SCT_default_instance_;

namespace protobuf_ct_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTServerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTServerStatus, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTServerStatus, ct_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTServerStatus, pull_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTServerStatus, push_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTServerStatus, push_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTServerStatus, sct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTServerStatus, push_error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, censys_dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, censys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, google_aviator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, google_pilot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, google_rocketeer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, google_submariner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, google_testtube_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, google_icarus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, google_skydiver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, google_daedalus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, google_argon_2017_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, google_argon_2018_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, google_argon_2019_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, google_argon_2020_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, google_argon_2021_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, cloudflare_nimbus_2017_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, cloudflare_nimbus_2018_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, cloudflare_nimbus_2019_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, cloudflare_nimbus_2020_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, cloudflare_nimbus_2021_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, digicert_ct1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, digicert_ct2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, izenpe_com_ct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, izenpe_eus_ct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, symantec_ws_ct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, symantec_ws_vega_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, symantec_ws_sirius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, symantec_ws_deneb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, comodo_dodo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, comodo_mammoth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, comodo_sabre_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, wosign_ctlog_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, wosign_ct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, wotrus_ctlog_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, wotrus_ctlog3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, gdca_ct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, gdca_ctlog_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, gdca_log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, gdca_log2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, venafi_api_ctlog_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, venafi_api_ctlog_gen2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, nordu_ct_plausible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, cnnic_ctserver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, startssl_ct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, certly_log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, sheca_ct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, letsencrypt_ct_clicky_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, behind_the_sofa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTStatus, certificatetransparency_cn_ct_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCT, sha256fp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCT, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCT, status_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(CTServerStatus)},
  { 11, -1, sizeof(CTStatus)},
  { 64, -1, sizeof(SCT)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CTServerStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CTStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SCT_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ct.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _CTServerStatus_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CTStatus_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SCT_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CTServerStatus_default_instance_.DefaultConstruct();
  _CTStatus_default_instance_.DefaultConstruct();
  _SCT_default_instance_.DefaultConstruct();
  _CTStatus_default_instance_.get_mutable()->censys_dev_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->censys_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->google_aviator_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->google_pilot_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->google_rocketeer_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->google_submariner_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->google_testtube_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->google_icarus_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->google_skydiver_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->google_daedalus_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->google_argon_2017_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->google_argon_2018_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->google_argon_2019_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->google_argon_2020_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->google_argon_2021_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->cloudflare_nimbus_2017_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->cloudflare_nimbus_2018_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->cloudflare_nimbus_2019_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->cloudflare_nimbus_2020_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->cloudflare_nimbus_2021_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->digicert_ct1_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->digicert_ct2_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->izenpe_com_ct_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->izenpe_eus_ct_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->symantec_ws_ct_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->symantec_ws_vega_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->symantec_ws_sirius_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->symantec_ws_deneb_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->comodo_dodo_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->comodo_mammoth_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->comodo_sabre_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->wosign_ctlog_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->wosign_ct_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->wotrus_ctlog_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->wotrus_ctlog3_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->gdca_ct_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->gdca_ctlog_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->gdca_log_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->gdca_log2_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->venafi_api_ctlog_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->venafi_api_ctlog_gen2_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->nordu_ct_plausible_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->cnnic_ctserver_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->startssl_ct_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->certly_log_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->sheca_ct_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->letsencrypt_ct_clicky_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->behind_the_sofa_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _CTStatus_default_instance_.get_mutable()->certificatetransparency_cn_ct_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _SCT_default_instance_.get_mutable()->status_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\010ct.proto\022\007zsearch\"\262\001\n\016CTServerStatus\022\r"
      "\n\005index\030\001 \001(\003\022\024\n\014ct_timestamp\030\002 \001(\003\022\026\n\016p"
      "ull_timestamp\030\003 \001(\003\022\026\n\016push_timestamp\030\004 "
      "\001(\003\022*\n\013push_status\030\005 \001(\0162\025.zsearch.CTPus"
      "hStatus\022\013\n\003sct\030\006 \001(\014\022\022\n\npush_error\030\007 \001(\t"
      "\"\220\023\n\010CTStatus\022+\n\ncensys_dev\030\001 \001(\0132\027.zsea"
      "rch.CTServerStatus\022\'\n\006censys\030\002 \001(\0132\027.zse"
      "arch.CTServerStatus\022/\n\016google_aviator\030\n "
      "\001(\0132\027.zsearch.CTServerStatus\022-\n\014google_p"
      "ilot\030\013 \001(\0132\027.zsearch.CTServerStatus\0221\n\020g"
      "oogle_rocketeer\030\014 \001(\0132\027.zsearch.CTServer"
      "Status\0222\n\021google_submariner\030\r \001(\0132\027.zsea"
      "rch.CTServerStatus\0220\n\017google_testtube\030\016 "
      "\001(\0132\027.zsearch.CTServerStatus\022.\n\rgoogle_i"
      "carus\030\017 \001(\0132\027.zsearch.CTServerStatus\0220\n\017"
      "google_skydiver\030\020 \001(\0132\027.zsearch.CTServer"
      "Status\0220\n\017google_daedalus\030\021 \001(\0132\027.zsearc"
      "h.CTServerStatus\0222\n\021google_argon_2017\0302 "
      "\001(\0132\027.zsearch.CTServerStatus\0222\n\021google_a"
      "rgon_2018\0303 \001(\0132\027.zsearch.CTServerStatus"
      "\0222\n\021google_argon_2019\0304 \001(\0132\027.zsearch.CT"
      "ServerStatus\0222\n\021google_argon_2020\0305 \001(\0132"
      "\027.zsearch.CTServerStatus\0222\n\021google_argon"
      "_2021\0306 \001(\0132\027.zsearch.CTServerStatus\0227\n\026"
      "cloudflare_nimbus_2017\030< \001(\0132\027.zsearch.C"
      "TServerStatus\0227\n\026cloudflare_nimbus_2018\030"
      "= \001(\0132\027.zsearch.CTServerStatus\0227\n\026cloudf"
      "lare_nimbus_2019\030> \001(\0132\027.zsearch.CTServe"
      "rStatus\0227\n\026cloudflare_nimbus_2020\030\? \001(\0132"
      "\027.zsearch.CTServerStatus\0227\n\026cloudflare_n"
      "imbus_2021\030@ \001(\0132\027.zsearch.CTServerStatu"
      "s\022-\n\014digicert_ct1\030\024 \001(\0132\027.zsearch.CTServ"
      "erStatus\022-\n\014digicert_ct2\030( \001(\0132\027.zsearch"
      ".CTServerStatus\022.\n\rizenpe_com_ct\030\025 \001(\0132\027"
      ".zsearch.CTServerStatus\022.\n\rizenpe_eus_ct"
      "\030\026 \001(\0132\027.zsearch.CTServerStatus\022/\n\016syman"
      "tec_ws_ct\030\027 \001(\0132\027.zsearch.CTServerStatus"
      "\0221\n\020symantec_ws_vega\030\030 \001(\0132\027.zsearch.CTS"
      "erverStatus\0223\n\022symantec_ws_sirius\030% \001(\0132"
      "\027.zsearch.CTServerStatus\0222\n\021symantec_ws_"
      "deneb\030  \001(\0132\027.zsearch.CTServerStatus\022,\n\013"
      "comodo_dodo\030\" \001(\0132\027.zsearch.CTServerStat"
      "us\022/\n\016comodo_mammoth\030# \001(\0132\027.zsearch.CTS"
      "erverStatus\022-\n\014comodo_sabre\030) \001(\0132\027.zsea"
      "rch.CTServerStatus\022-\n\014wosign_ctlog\030\031 \001(\013"
      "2\027.zsearch.CTServerStatus\022*\n\twosign_ct\030\032"
      " \001(\0132\027.zsearch.CTServerStatus\022-\n\014wotrus_"
      "ctlog\030/ \001(\0132\027.zsearch.CTServerStatus\022.\n\r"
      "wotrus_ctlog3\0300 \001(\0132\027.zsearch.CTServerSt"
      "atus\022(\n\007gdca_ct\030\034 \001(\0132\027.zsearch.CTServer"
      "Status\022+\n\ngdca_ctlog\030$ \001(\0132\027.zsearch.CTS"
      "erverStatus\022)\n\010gdca_log\030- \001(\0132\027.zsearch."
      "CTServerStatus\022*\n\tgdca_log2\030. \001(\0132\027.zsea"
      "rch.CTServerStatus\0221\n\020venafi_api_ctlog\030\037"
      " \001(\0132\027.zsearch.CTServerStatus\0226\n\025venafi_"
      "api_ctlog_gen2\030\' \001(\0132\027.zsearch.CTServerS"
      "tatus\0223\n\022nordu_ct_plausible\030! \001(\0132\027.zsea"
      "rch.CTServerStatus\022/\n\016cnnic_ctserver\030\033 \001"
      "(\0132\027.zsearch.CTServerStatus\022,\n\013startssl_"
      "ct\030\035 \001(\0132\027.zsearch.CTServerStatus\022+\n\ncer"
      "tly_log\030\036 \001(\0132\027.zsearch.CTServerStatus\022)"
      "\n\010sheca_ct\030* \001(\0132\027.zsearch.CTServerStatu"
      "s\0226\n\025letsencrypt_ct_clicky\030+ \001(\0132\027.zsear"
      "ch.CTServerStatus\0220\n\017behind_the_sofa\030, \001"
      "(\0132\027.zsearch.CTServerStatus\022>\n\035certifica"
      "tetransparency_cn_ct\030& \001(\0132\027.zsearch.CTS"
      "erverStatus\"c\n\003SCT\022\020\n\010sha256fp\030\001 \001(\014\022!\n\006"
      "server\030\002 \001(\0162\021.zsearch.CTServer\022\'\n\006statu"
      "s\030\003 \001(\0132\027.zsearch.CTServerStatus*\353\001\n\014CTP"
      "ushStatus\022\033\n\027CT_PUSH_STATUS_RESERVED\020\000\022\032"
      "\n\026CT_PUSH_STATUS_UNKNOWN\020\001\022\032\n\026CT_PUSH_ST"
      "ATUS_SUCCESS\020\002\022 \n\034CT_PUSH_STATUS_UNKNOWN"
      "_ERROR\020\003\022\037\n\033CT_PUSH_STATUS_INVALID_ROOT\020"
      "\004\022!\n\035CT_PUSH_STATUS_ALREADY_EXISTS\020\005\022 \n\034"
      "CT_PUSH_STATUS_WILL_NOT_PUSH\020\006*\230\014\n\010CTSer"
      "ver\022\026\n\022CT_SERVER_RESERVED\020\000\022 \n\034CT_SERVER"
      "_CENSYS_DEVELOPMENT\020\001\022\037\n\033CT_SERVER_CENSY"
      "S_PRODUCTION\020\002\022\034\n\030CT_SERVER_GOOGLE_AVIAT"
      "OR\020\n\022\032\n\026CT_SERVER_GOOGLE_PILOT\020\013\022\036\n\032CT_S"
      "ERVER_GOOGLE_ROCKETEER\020\014\022\037\n\033CT_SERVER_GO"
      "OGLE_SUBMARINER\020\r\022\035\n\031CT_SERVER_GOOGLE_TE"
      "STTUBE\020\016\022\033\n\027CT_SERVER_GOOGLE_ICARUS\020\017\022\035\n"
      "\031CT_SERVER_GOOGLE_SKYDIVER\020\020\022\035\n\031CT_SERVE"
      "R_GOOGLE_DAEDALUS\020\021\022\037\n\033CT_SERVER_GOOGLE_"
      "ARGON_2017\0202\022\037\n\033CT_SERVER_GOOGLE_ARGON_2"
      "018\0203\022\037\n\033CT_SERVER_GOOGLE_ARGON_2019\0204\022\037"
      "\n\033CT_SERVER_GOOGLE_ARGON_2020\0205\022\037\n\033CT_SE"
      "RVER_GOOGLE_ARGON_2021\0206\022$\n CT_SERVER_CL"
      "OUDFLARE_NIMBUS_2017\020<\022$\n CT_SERVER_CLOU"
      "DFLARE_NIMBUS_2018\020=\022$\n CT_SERVER_CLOUDF"
      "LARE_NIMBUS_2019\020>\022$\n CT_SERVER_CLOUDFLA"
      "RE_NIMBUS_2020\020\?\022$\n CT_SERVER_CLOUDFLARE"
      "_NIMBUS_2021\020@\022\032\n\026CT_SERVER_DIGICERT_CT1"
      "\020\024\022\032\n\026CT_SERVER_DIGICERT_CT2\020(\022\033\n\027CT_SER"
      "VER_IZENPE_COM_CT\020\025\022\033\n\027CT_SERVER_IZENPE_"
      "EUS_CT\020\026\022\034\n\030CT_SERVER_SYMANTEC_WS_CT\020\027\022\036"
      "\n\032CT_SERVER_SYMANTEC_WS_VEGA\020\030\022 \n\034CT_SER"
      "VER_SYMANTEC_WS_SIRIUS\020%\022\037\n\033CT_SERVER_SY"
      "MANTEC_WS_DENEB\020 \022\031\n\025CT_SERVER_COMODO_DO"
      "DO\020#\022\034\n\030CT_SERVER_COMODO_MAMMOTH\020$\022\032\n\026CT"
      "_SERVER_COMODO_SABRE\020)\022\032\n\026CT_SERVER_WOSI"
      "GN_CTLOG\020\031\022\027\n\023CT_SERVER_WOSIGN_CT\020\032\022\032\n\026C"
      "T_SERVER_WOTRUS_CTLOG\020/\022\033\n\027CT_SERVER_WOT"
      "RUS_CTLOG3\0200\022\031\n\025CT_SERVER_STARTSSL_CT\020\035\022"
      "\025\n\021CT_SERVER_GDCA_CT\020\034\022\030\n\024CT_SERVER_GDCA"
      "_CTLOG\020\"\022\026\n\022CT_SERVER_GDCA_LOG\020-\022\027\n\023CT_S"
      "ERVER_GDCA_LOG2\020.\022\036\n\032CT_SERVER_VENAFI_AP"
      "I_CTLOG\020\037\022#\n\037CT_SERVER_VENAFI_API_CTLOG_"
      "GEN2\020\'\022 \n\034CT_SERVER_NORDU_CT_PLAUSIBLE\020!"
      "\022#\n\037CT_SERVER_LETSENCRYPT_CT_CLICKY\020+\022\030\n"
      "\024CT_SERVER_CERTLY_LOG\020\036\022\034\n\030CT_SERVER_CNN"
      "IC_CTSERVER\020\033\022+\n\'CT_SERVER_CERTIFICATETR"
      "ANSPARENCY_CN_CT\020&\022\026\n\022CT_SERVER_SHECA_CT"
      "\020*\022\035\n\031CT_SERVER_BEHIND_THE_SOFA\020,b\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4561);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ct.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_ct_2eproto

const ::google::protobuf::EnumDescriptor* CTPushStatus_descriptor() {
  protobuf_ct_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ct_2eproto::file_level_enum_descriptors[0];
}
bool CTPushStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CTServer_descriptor() {
  protobuf_ct_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ct_2eproto::file_level_enum_descriptors[1];
}
bool CTServer_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTServerStatus::kIndexFieldNumber;
const int CTServerStatus::kCtTimestampFieldNumber;
const int CTServerStatus::kPullTimestampFieldNumber;
const int CTServerStatus::kPushTimestampFieldNumber;
const int CTServerStatus::kPushStatusFieldNumber;
const int CTServerStatus::kSctFieldNumber;
const int CTServerStatus::kPushErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTServerStatus::CTServerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.CTServerStatus)
}
CTServerStatus::CTServerStatus(const CTServerStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sct_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sct().size() > 0) {
    sct_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sct_);
  }
  push_error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.push_error().size() > 0) {
    push_error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.push_error_);
  }
  ::memcpy(&index_, &from.index_,
    reinterpret_cast<char*>(&push_status_) -
    reinterpret_cast<char*>(&index_) + sizeof(push_status_));
  // @@protoc_insertion_point(copy_constructor:zsearch.CTServerStatus)
}

void CTServerStatus::SharedCtor() {
  sct_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  push_error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, reinterpret_cast<char*>(&push_status_) -
    reinterpret_cast<char*>(&index_) + sizeof(push_status_));
  _cached_size_ = 0;
}

CTServerStatus::~CTServerStatus() {
  // @@protoc_insertion_point(destructor:zsearch.CTServerStatus)
  SharedDtor();
}

void CTServerStatus::SharedDtor() {
  sct_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  push_error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTServerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTServerStatus::descriptor() {
  protobuf_ct_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ct_2eproto::file_level_metadata[0].descriptor;
}

const CTServerStatus& CTServerStatus::default_instance() {
  protobuf_ct_2eproto::InitDefaults();
  return *internal_default_instance();
}

CTServerStatus* CTServerStatus::New(::google::protobuf::Arena* arena) const {
  CTServerStatus* n = new CTServerStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTServerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.CTServerStatus)
  sct_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  push_error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, reinterpret_cast<char*>(&push_status_) -
    reinterpret_cast<char*>(&index_) + sizeof(push_status_));
}

bool CTServerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.CTServerStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 index = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ct_timestamp = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ct_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 pull_timestamp = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pull_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 push_timestamp = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &push_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTPushStatus push_status = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_push_status(static_cast< ::zsearch::CTPushStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sct = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string push_error = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_push_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->push_error().data(), this->push_error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.CTServerStatus.push_error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.CTServerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.CTServerStatus)
  return false;
#undef DO_
}

void CTServerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.CTServerStatus)
  // int64 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->index(), output);
  }

  // int64 ct_timestamp = 2;
  if (this->ct_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ct_timestamp(), output);
  }

  // int64 pull_timestamp = 3;
  if (this->pull_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->pull_timestamp(), output);
  }

  // int64 push_timestamp = 4;
  if (this->push_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->push_timestamp(), output);
  }

  // .zsearch.CTPushStatus push_status = 5;
  if (this->push_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->push_status(), output);
  }

  // bytes sct = 6;
  if (this->sct().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->sct(), output);
  }

  // string push_error = 7;
  if (this->push_error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->push_error().data(), this->push_error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.CTServerStatus.push_error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->push_error(), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.CTServerStatus)
}

::google::protobuf::uint8* CTServerStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.CTServerStatus)
  // int64 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->index(), target);
  }

  // int64 ct_timestamp = 2;
  if (this->ct_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ct_timestamp(), target);
  }

  // int64 pull_timestamp = 3;
  if (this->pull_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->pull_timestamp(), target);
  }

  // int64 push_timestamp = 4;
  if (this->push_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->push_timestamp(), target);
  }

  // .zsearch.CTPushStatus push_status = 5;
  if (this->push_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->push_status(), target);
  }

  // bytes sct = 6;
  if (this->sct().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->sct(), target);
  }

  // string push_error = 7;
  if (this->push_error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->push_error().data(), this->push_error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.CTServerStatus.push_error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->push_error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.CTServerStatus)
  return target;
}

size_t CTServerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.CTServerStatus)
  size_t total_size = 0;

  // bytes sct = 6;
  if (this->sct().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sct());
  }

  // string push_error = 7;
  if (this->push_error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->push_error());
  }

  // int64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  // int64 ct_timestamp = 2;
  if (this->ct_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ct_timestamp());
  }

  // int64 pull_timestamp = 3;
  if (this->pull_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pull_timestamp());
  }

  // int64 push_timestamp = 4;
  if (this->push_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->push_timestamp());
  }

  // .zsearch.CTPushStatus push_status = 5;
  if (this->push_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTServerStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.CTServerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CTServerStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTServerStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.CTServerStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.CTServerStatus)
    MergeFrom(*source);
  }
}

void CTServerStatus::MergeFrom(const CTServerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.CTServerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.sct().size() > 0) {

    sct_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sct_);
  }
  if (from.push_error().size() > 0) {

    push_error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.push_error_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.ct_timestamp() != 0) {
    set_ct_timestamp(from.ct_timestamp());
  }
  if (from.pull_timestamp() != 0) {
    set_pull_timestamp(from.pull_timestamp());
  }
  if (from.push_timestamp() != 0) {
    set_push_timestamp(from.push_timestamp());
  }
  if (from.push_status() != 0) {
    set_push_status(from.push_status());
  }
}

void CTServerStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.CTServerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTServerStatus::CopyFrom(const CTServerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.CTServerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTServerStatus::IsInitialized() const {
  return true;
}

void CTServerStatus::Swap(CTServerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTServerStatus::InternalSwap(CTServerStatus* other) {
  sct_.Swap(&other->sct_);
  push_error_.Swap(&other->push_error_);
  std::swap(index_, other->index_);
  std::swap(ct_timestamp_, other->ct_timestamp_);
  std::swap(pull_timestamp_, other->pull_timestamp_);
  std::swap(push_timestamp_, other->push_timestamp_);
  std::swap(push_status_, other->push_status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTServerStatus::GetMetadata() const {
  protobuf_ct_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ct_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CTServerStatus

// int64 index = 1;
void CTServerStatus::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CTServerStatus::index() const {
  // @@protoc_insertion_point(field_get:zsearch.CTServerStatus.index)
  return index_;
}
void CTServerStatus::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:zsearch.CTServerStatus.index)
}

// int64 ct_timestamp = 2;
void CTServerStatus::clear_ct_timestamp() {
  ct_timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CTServerStatus::ct_timestamp() const {
  // @@protoc_insertion_point(field_get:zsearch.CTServerStatus.ct_timestamp)
  return ct_timestamp_;
}
void CTServerStatus::set_ct_timestamp(::google::protobuf::int64 value) {
  
  ct_timestamp_ = value;
  // @@protoc_insertion_point(field_set:zsearch.CTServerStatus.ct_timestamp)
}

// int64 pull_timestamp = 3;
void CTServerStatus::clear_pull_timestamp() {
  pull_timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CTServerStatus::pull_timestamp() const {
  // @@protoc_insertion_point(field_get:zsearch.CTServerStatus.pull_timestamp)
  return pull_timestamp_;
}
void CTServerStatus::set_pull_timestamp(::google::protobuf::int64 value) {
  
  pull_timestamp_ = value;
  // @@protoc_insertion_point(field_set:zsearch.CTServerStatus.pull_timestamp)
}

// int64 push_timestamp = 4;
void CTServerStatus::clear_push_timestamp() {
  push_timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CTServerStatus::push_timestamp() const {
  // @@protoc_insertion_point(field_get:zsearch.CTServerStatus.push_timestamp)
  return push_timestamp_;
}
void CTServerStatus::set_push_timestamp(::google::protobuf::int64 value) {
  
  push_timestamp_ = value;
  // @@protoc_insertion_point(field_set:zsearch.CTServerStatus.push_timestamp)
}

// .zsearch.CTPushStatus push_status = 5;
void CTServerStatus::clear_push_status() {
  push_status_ = 0;
}
::zsearch::CTPushStatus CTServerStatus::push_status() const {
  // @@protoc_insertion_point(field_get:zsearch.CTServerStatus.push_status)
  return static_cast< ::zsearch::CTPushStatus >(push_status_);
}
void CTServerStatus::set_push_status(::zsearch::CTPushStatus value) {
  
  push_status_ = value;
  // @@protoc_insertion_point(field_set:zsearch.CTServerStatus.push_status)
}

// bytes sct = 6;
void CTServerStatus::clear_sct() {
  sct_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CTServerStatus::sct() const {
  // @@protoc_insertion_point(field_get:zsearch.CTServerStatus.sct)
  return sct_.GetNoArena();
}
void CTServerStatus::set_sct(const ::std::string& value) {
  
  sct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.CTServerStatus.sct)
}
#if LANG_CXX11
void CTServerStatus::set_sct(::std::string&& value) {
  
  sct_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.CTServerStatus.sct)
}
#endif
void CTServerStatus::set_sct(const char* value) {
  
  sct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.CTServerStatus.sct)
}
void CTServerStatus::set_sct(const void* value, size_t size) {
  
  sct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.CTServerStatus.sct)
}
::std::string* CTServerStatus::mutable_sct() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.CTServerStatus.sct)
  return sct_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTServerStatus::release_sct() {
  // @@protoc_insertion_point(field_release:zsearch.CTServerStatus.sct)
  
  return sct_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTServerStatus::set_allocated_sct(::std::string* sct) {
  if (sct != NULL) {
    
  } else {
    
  }
  sct_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sct);
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTServerStatus.sct)
}

// string push_error = 7;
void CTServerStatus::clear_push_error() {
  push_error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CTServerStatus::push_error() const {
  // @@protoc_insertion_point(field_get:zsearch.CTServerStatus.push_error)
  return push_error_.GetNoArena();
}
void CTServerStatus::set_push_error(const ::std::string& value) {
  
  push_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.CTServerStatus.push_error)
}
#if LANG_CXX11
void CTServerStatus::set_push_error(::std::string&& value) {
  
  push_error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.CTServerStatus.push_error)
}
#endif
void CTServerStatus::set_push_error(const char* value) {
  
  push_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.CTServerStatus.push_error)
}
void CTServerStatus::set_push_error(const char* value, size_t size) {
  
  push_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.CTServerStatus.push_error)
}
::std::string* CTServerStatus::mutable_push_error() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.CTServerStatus.push_error)
  return push_error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTServerStatus::release_push_error() {
  // @@protoc_insertion_point(field_release:zsearch.CTServerStatus.push_error)
  
  return push_error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTServerStatus::set_allocated_push_error(::std::string* push_error) {
  if (push_error != NULL) {
    
  } else {
    
  }
  push_error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), push_error);
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTServerStatus.push_error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTStatus::kCensysDevFieldNumber;
const int CTStatus::kCensysFieldNumber;
const int CTStatus::kGoogleAviatorFieldNumber;
const int CTStatus::kGooglePilotFieldNumber;
const int CTStatus::kGoogleRocketeerFieldNumber;
const int CTStatus::kGoogleSubmarinerFieldNumber;
const int CTStatus::kGoogleTesttubeFieldNumber;
const int CTStatus::kGoogleIcarusFieldNumber;
const int CTStatus::kGoogleSkydiverFieldNumber;
const int CTStatus::kGoogleDaedalusFieldNumber;
const int CTStatus::kGoogleArgon2017FieldNumber;
const int CTStatus::kGoogleArgon2018FieldNumber;
const int CTStatus::kGoogleArgon2019FieldNumber;
const int CTStatus::kGoogleArgon2020FieldNumber;
const int CTStatus::kGoogleArgon2021FieldNumber;
const int CTStatus::kCloudflareNimbus2017FieldNumber;
const int CTStatus::kCloudflareNimbus2018FieldNumber;
const int CTStatus::kCloudflareNimbus2019FieldNumber;
const int CTStatus::kCloudflareNimbus2020FieldNumber;
const int CTStatus::kCloudflareNimbus2021FieldNumber;
const int CTStatus::kDigicertCt1FieldNumber;
const int CTStatus::kDigicertCt2FieldNumber;
const int CTStatus::kIzenpeComCtFieldNumber;
const int CTStatus::kIzenpeEusCtFieldNumber;
const int CTStatus::kSymantecWsCtFieldNumber;
const int CTStatus::kSymantecWsVegaFieldNumber;
const int CTStatus::kSymantecWsSiriusFieldNumber;
const int CTStatus::kSymantecWsDenebFieldNumber;
const int CTStatus::kComodoDodoFieldNumber;
const int CTStatus::kComodoMammothFieldNumber;
const int CTStatus::kComodoSabreFieldNumber;
const int CTStatus::kWosignCtlogFieldNumber;
const int CTStatus::kWosignCtFieldNumber;
const int CTStatus::kWotrusCtlogFieldNumber;
const int CTStatus::kWotrusCtlog3FieldNumber;
const int CTStatus::kGdcaCtFieldNumber;
const int CTStatus::kGdcaCtlogFieldNumber;
const int CTStatus::kGdcaLogFieldNumber;
const int CTStatus::kGdcaLog2FieldNumber;
const int CTStatus::kVenafiApiCtlogFieldNumber;
const int CTStatus::kVenafiApiCtlogGen2FieldNumber;
const int CTStatus::kNorduCtPlausibleFieldNumber;
const int CTStatus::kCnnicCtserverFieldNumber;
const int CTStatus::kStartsslCtFieldNumber;
const int CTStatus::kCertlyLogFieldNumber;
const int CTStatus::kShecaCtFieldNumber;
const int CTStatus::kLetsencryptCtClickyFieldNumber;
const int CTStatus::kBehindTheSofaFieldNumber;
const int CTStatus::kCertificatetransparencyCnCtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTStatus::CTStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.CTStatus)
}
CTStatus::CTStatus(const CTStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_censys_dev()) {
    censys_dev_ = new ::zsearch::CTServerStatus(*from.censys_dev_);
  } else {
    censys_dev_ = NULL;
  }
  if (from.has_censys()) {
    censys_ = new ::zsearch::CTServerStatus(*from.censys_);
  } else {
    censys_ = NULL;
  }
  if (from.has_google_aviator()) {
    google_aviator_ = new ::zsearch::CTServerStatus(*from.google_aviator_);
  } else {
    google_aviator_ = NULL;
  }
  if (from.has_google_pilot()) {
    google_pilot_ = new ::zsearch::CTServerStatus(*from.google_pilot_);
  } else {
    google_pilot_ = NULL;
  }
  if (from.has_google_rocketeer()) {
    google_rocketeer_ = new ::zsearch::CTServerStatus(*from.google_rocketeer_);
  } else {
    google_rocketeer_ = NULL;
  }
  if (from.has_google_submariner()) {
    google_submariner_ = new ::zsearch::CTServerStatus(*from.google_submariner_);
  } else {
    google_submariner_ = NULL;
  }
  if (from.has_google_testtube()) {
    google_testtube_ = new ::zsearch::CTServerStatus(*from.google_testtube_);
  } else {
    google_testtube_ = NULL;
  }
  if (from.has_google_icarus()) {
    google_icarus_ = new ::zsearch::CTServerStatus(*from.google_icarus_);
  } else {
    google_icarus_ = NULL;
  }
  if (from.has_google_skydiver()) {
    google_skydiver_ = new ::zsearch::CTServerStatus(*from.google_skydiver_);
  } else {
    google_skydiver_ = NULL;
  }
  if (from.has_google_daedalus()) {
    google_daedalus_ = new ::zsearch::CTServerStatus(*from.google_daedalus_);
  } else {
    google_daedalus_ = NULL;
  }
  if (from.has_google_argon_2017()) {
    google_argon_2017_ = new ::zsearch::CTServerStatus(*from.google_argon_2017_);
  } else {
    google_argon_2017_ = NULL;
  }
  if (from.has_google_argon_2018()) {
    google_argon_2018_ = new ::zsearch::CTServerStatus(*from.google_argon_2018_);
  } else {
    google_argon_2018_ = NULL;
  }
  if (from.has_google_argon_2019()) {
    google_argon_2019_ = new ::zsearch::CTServerStatus(*from.google_argon_2019_);
  } else {
    google_argon_2019_ = NULL;
  }
  if (from.has_google_argon_2020()) {
    google_argon_2020_ = new ::zsearch::CTServerStatus(*from.google_argon_2020_);
  } else {
    google_argon_2020_ = NULL;
  }
  if (from.has_google_argon_2021()) {
    google_argon_2021_ = new ::zsearch::CTServerStatus(*from.google_argon_2021_);
  } else {
    google_argon_2021_ = NULL;
  }
  if (from.has_cloudflare_nimbus_2017()) {
    cloudflare_nimbus_2017_ = new ::zsearch::CTServerStatus(*from.cloudflare_nimbus_2017_);
  } else {
    cloudflare_nimbus_2017_ = NULL;
  }
  if (from.has_cloudflare_nimbus_2018()) {
    cloudflare_nimbus_2018_ = new ::zsearch::CTServerStatus(*from.cloudflare_nimbus_2018_);
  } else {
    cloudflare_nimbus_2018_ = NULL;
  }
  if (from.has_cloudflare_nimbus_2019()) {
    cloudflare_nimbus_2019_ = new ::zsearch::CTServerStatus(*from.cloudflare_nimbus_2019_);
  } else {
    cloudflare_nimbus_2019_ = NULL;
  }
  if (from.has_cloudflare_nimbus_2020()) {
    cloudflare_nimbus_2020_ = new ::zsearch::CTServerStatus(*from.cloudflare_nimbus_2020_);
  } else {
    cloudflare_nimbus_2020_ = NULL;
  }
  if (from.has_cloudflare_nimbus_2021()) {
    cloudflare_nimbus_2021_ = new ::zsearch::CTServerStatus(*from.cloudflare_nimbus_2021_);
  } else {
    cloudflare_nimbus_2021_ = NULL;
  }
  if (from.has_digicert_ct1()) {
    digicert_ct1_ = new ::zsearch::CTServerStatus(*from.digicert_ct1_);
  } else {
    digicert_ct1_ = NULL;
  }
  if (from.has_digicert_ct2()) {
    digicert_ct2_ = new ::zsearch::CTServerStatus(*from.digicert_ct2_);
  } else {
    digicert_ct2_ = NULL;
  }
  if (from.has_izenpe_com_ct()) {
    izenpe_com_ct_ = new ::zsearch::CTServerStatus(*from.izenpe_com_ct_);
  } else {
    izenpe_com_ct_ = NULL;
  }
  if (from.has_izenpe_eus_ct()) {
    izenpe_eus_ct_ = new ::zsearch::CTServerStatus(*from.izenpe_eus_ct_);
  } else {
    izenpe_eus_ct_ = NULL;
  }
  if (from.has_symantec_ws_ct()) {
    symantec_ws_ct_ = new ::zsearch::CTServerStatus(*from.symantec_ws_ct_);
  } else {
    symantec_ws_ct_ = NULL;
  }
  if (from.has_symantec_ws_vega()) {
    symantec_ws_vega_ = new ::zsearch::CTServerStatus(*from.symantec_ws_vega_);
  } else {
    symantec_ws_vega_ = NULL;
  }
  if (from.has_symantec_ws_sirius()) {
    symantec_ws_sirius_ = new ::zsearch::CTServerStatus(*from.symantec_ws_sirius_);
  } else {
    symantec_ws_sirius_ = NULL;
  }
  if (from.has_symantec_ws_deneb()) {
    symantec_ws_deneb_ = new ::zsearch::CTServerStatus(*from.symantec_ws_deneb_);
  } else {
    symantec_ws_deneb_ = NULL;
  }
  if (from.has_comodo_dodo()) {
    comodo_dodo_ = new ::zsearch::CTServerStatus(*from.comodo_dodo_);
  } else {
    comodo_dodo_ = NULL;
  }
  if (from.has_comodo_mammoth()) {
    comodo_mammoth_ = new ::zsearch::CTServerStatus(*from.comodo_mammoth_);
  } else {
    comodo_mammoth_ = NULL;
  }
  if (from.has_comodo_sabre()) {
    comodo_sabre_ = new ::zsearch::CTServerStatus(*from.comodo_sabre_);
  } else {
    comodo_sabre_ = NULL;
  }
  if (from.has_wosign_ctlog()) {
    wosign_ctlog_ = new ::zsearch::CTServerStatus(*from.wosign_ctlog_);
  } else {
    wosign_ctlog_ = NULL;
  }
  if (from.has_wosign_ct()) {
    wosign_ct_ = new ::zsearch::CTServerStatus(*from.wosign_ct_);
  } else {
    wosign_ct_ = NULL;
  }
  if (from.has_wotrus_ctlog()) {
    wotrus_ctlog_ = new ::zsearch::CTServerStatus(*from.wotrus_ctlog_);
  } else {
    wotrus_ctlog_ = NULL;
  }
  if (from.has_wotrus_ctlog3()) {
    wotrus_ctlog3_ = new ::zsearch::CTServerStatus(*from.wotrus_ctlog3_);
  } else {
    wotrus_ctlog3_ = NULL;
  }
  if (from.has_gdca_ct()) {
    gdca_ct_ = new ::zsearch::CTServerStatus(*from.gdca_ct_);
  } else {
    gdca_ct_ = NULL;
  }
  if (from.has_gdca_ctlog()) {
    gdca_ctlog_ = new ::zsearch::CTServerStatus(*from.gdca_ctlog_);
  } else {
    gdca_ctlog_ = NULL;
  }
  if (from.has_gdca_log()) {
    gdca_log_ = new ::zsearch::CTServerStatus(*from.gdca_log_);
  } else {
    gdca_log_ = NULL;
  }
  if (from.has_gdca_log2()) {
    gdca_log2_ = new ::zsearch::CTServerStatus(*from.gdca_log2_);
  } else {
    gdca_log2_ = NULL;
  }
  if (from.has_venafi_api_ctlog()) {
    venafi_api_ctlog_ = new ::zsearch::CTServerStatus(*from.venafi_api_ctlog_);
  } else {
    venafi_api_ctlog_ = NULL;
  }
  if (from.has_venafi_api_ctlog_gen2()) {
    venafi_api_ctlog_gen2_ = new ::zsearch::CTServerStatus(*from.venafi_api_ctlog_gen2_);
  } else {
    venafi_api_ctlog_gen2_ = NULL;
  }
  if (from.has_nordu_ct_plausible()) {
    nordu_ct_plausible_ = new ::zsearch::CTServerStatus(*from.nordu_ct_plausible_);
  } else {
    nordu_ct_plausible_ = NULL;
  }
  if (from.has_cnnic_ctserver()) {
    cnnic_ctserver_ = new ::zsearch::CTServerStatus(*from.cnnic_ctserver_);
  } else {
    cnnic_ctserver_ = NULL;
  }
  if (from.has_startssl_ct()) {
    startssl_ct_ = new ::zsearch::CTServerStatus(*from.startssl_ct_);
  } else {
    startssl_ct_ = NULL;
  }
  if (from.has_certly_log()) {
    certly_log_ = new ::zsearch::CTServerStatus(*from.certly_log_);
  } else {
    certly_log_ = NULL;
  }
  if (from.has_sheca_ct()) {
    sheca_ct_ = new ::zsearch::CTServerStatus(*from.sheca_ct_);
  } else {
    sheca_ct_ = NULL;
  }
  if (from.has_letsencrypt_ct_clicky()) {
    letsencrypt_ct_clicky_ = new ::zsearch::CTServerStatus(*from.letsencrypt_ct_clicky_);
  } else {
    letsencrypt_ct_clicky_ = NULL;
  }
  if (from.has_behind_the_sofa()) {
    behind_the_sofa_ = new ::zsearch::CTServerStatus(*from.behind_the_sofa_);
  } else {
    behind_the_sofa_ = NULL;
  }
  if (from.has_certificatetransparency_cn_ct()) {
    certificatetransparency_cn_ct_ = new ::zsearch::CTServerStatus(*from.certificatetransparency_cn_ct_);
  } else {
    certificatetransparency_cn_ct_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:zsearch.CTStatus)
}

void CTStatus::SharedCtor() {
  ::memset(&censys_dev_, 0, reinterpret_cast<char*>(&certificatetransparency_cn_ct_) -
    reinterpret_cast<char*>(&censys_dev_) + sizeof(certificatetransparency_cn_ct_));
  _cached_size_ = 0;
}

CTStatus::~CTStatus() {
  // @@protoc_insertion_point(destructor:zsearch.CTStatus)
  SharedDtor();
}

void CTStatus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete censys_dev_;
  }
  if (this != internal_default_instance()) {
    delete censys_;
  }
  if (this != internal_default_instance()) {
    delete google_aviator_;
  }
  if (this != internal_default_instance()) {
    delete google_pilot_;
  }
  if (this != internal_default_instance()) {
    delete google_rocketeer_;
  }
  if (this != internal_default_instance()) {
    delete google_submariner_;
  }
  if (this != internal_default_instance()) {
    delete google_testtube_;
  }
  if (this != internal_default_instance()) {
    delete google_icarus_;
  }
  if (this != internal_default_instance()) {
    delete google_skydiver_;
  }
  if (this != internal_default_instance()) {
    delete google_daedalus_;
  }
  if (this != internal_default_instance()) {
    delete google_argon_2017_;
  }
  if (this != internal_default_instance()) {
    delete google_argon_2018_;
  }
  if (this != internal_default_instance()) {
    delete google_argon_2019_;
  }
  if (this != internal_default_instance()) {
    delete google_argon_2020_;
  }
  if (this != internal_default_instance()) {
    delete google_argon_2021_;
  }
  if (this != internal_default_instance()) {
    delete cloudflare_nimbus_2017_;
  }
  if (this != internal_default_instance()) {
    delete cloudflare_nimbus_2018_;
  }
  if (this != internal_default_instance()) {
    delete cloudflare_nimbus_2019_;
  }
  if (this != internal_default_instance()) {
    delete cloudflare_nimbus_2020_;
  }
  if (this != internal_default_instance()) {
    delete cloudflare_nimbus_2021_;
  }
  if (this != internal_default_instance()) {
    delete digicert_ct1_;
  }
  if (this != internal_default_instance()) {
    delete digicert_ct2_;
  }
  if (this != internal_default_instance()) {
    delete izenpe_com_ct_;
  }
  if (this != internal_default_instance()) {
    delete izenpe_eus_ct_;
  }
  if (this != internal_default_instance()) {
    delete symantec_ws_ct_;
  }
  if (this != internal_default_instance()) {
    delete symantec_ws_vega_;
  }
  if (this != internal_default_instance()) {
    delete symantec_ws_sirius_;
  }
  if (this != internal_default_instance()) {
    delete symantec_ws_deneb_;
  }
  if (this != internal_default_instance()) {
    delete comodo_dodo_;
  }
  if (this != internal_default_instance()) {
    delete comodo_mammoth_;
  }
  if (this != internal_default_instance()) {
    delete comodo_sabre_;
  }
  if (this != internal_default_instance()) {
    delete wosign_ctlog_;
  }
  if (this != internal_default_instance()) {
    delete wosign_ct_;
  }
  if (this != internal_default_instance()) {
    delete wotrus_ctlog_;
  }
  if (this != internal_default_instance()) {
    delete wotrus_ctlog3_;
  }
  if (this != internal_default_instance()) {
    delete gdca_ct_;
  }
  if (this != internal_default_instance()) {
    delete gdca_ctlog_;
  }
  if (this != internal_default_instance()) {
    delete gdca_log_;
  }
  if (this != internal_default_instance()) {
    delete gdca_log2_;
  }
  if (this != internal_default_instance()) {
    delete venafi_api_ctlog_;
  }
  if (this != internal_default_instance()) {
    delete venafi_api_ctlog_gen2_;
  }
  if (this != internal_default_instance()) {
    delete nordu_ct_plausible_;
  }
  if (this != internal_default_instance()) {
    delete cnnic_ctserver_;
  }
  if (this != internal_default_instance()) {
    delete startssl_ct_;
  }
  if (this != internal_default_instance()) {
    delete certly_log_;
  }
  if (this != internal_default_instance()) {
    delete sheca_ct_;
  }
  if (this != internal_default_instance()) {
    delete letsencrypt_ct_clicky_;
  }
  if (this != internal_default_instance()) {
    delete behind_the_sofa_;
  }
  if (this != internal_default_instance()) {
    delete certificatetransparency_cn_ct_;
  }
}

void CTStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTStatus::descriptor() {
  protobuf_ct_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ct_2eproto::file_level_metadata[1].descriptor;
}

const CTStatus& CTStatus::default_instance() {
  protobuf_ct_2eproto::InitDefaults();
  return *internal_default_instance();
}

CTStatus* CTStatus::New(::google::protobuf::Arena* arena) const {
  CTStatus* n = new CTStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.CTStatus)
  if (GetArenaNoVirtual() == NULL && censys_dev_ != NULL) {
    delete censys_dev_;
  }
  censys_dev_ = NULL;
  if (GetArenaNoVirtual() == NULL && censys_ != NULL) {
    delete censys_;
  }
  censys_ = NULL;
  if (GetArenaNoVirtual() == NULL && google_aviator_ != NULL) {
    delete google_aviator_;
  }
  google_aviator_ = NULL;
  if (GetArenaNoVirtual() == NULL && google_pilot_ != NULL) {
    delete google_pilot_;
  }
  google_pilot_ = NULL;
  if (GetArenaNoVirtual() == NULL && google_rocketeer_ != NULL) {
    delete google_rocketeer_;
  }
  google_rocketeer_ = NULL;
  if (GetArenaNoVirtual() == NULL && google_submariner_ != NULL) {
    delete google_submariner_;
  }
  google_submariner_ = NULL;
  if (GetArenaNoVirtual() == NULL && google_testtube_ != NULL) {
    delete google_testtube_;
  }
  google_testtube_ = NULL;
  if (GetArenaNoVirtual() == NULL && google_icarus_ != NULL) {
    delete google_icarus_;
  }
  google_icarus_ = NULL;
  if (GetArenaNoVirtual() == NULL && google_skydiver_ != NULL) {
    delete google_skydiver_;
  }
  google_skydiver_ = NULL;
  if (GetArenaNoVirtual() == NULL && google_daedalus_ != NULL) {
    delete google_daedalus_;
  }
  google_daedalus_ = NULL;
  if (GetArenaNoVirtual() == NULL && google_argon_2017_ != NULL) {
    delete google_argon_2017_;
  }
  google_argon_2017_ = NULL;
  if (GetArenaNoVirtual() == NULL && google_argon_2018_ != NULL) {
    delete google_argon_2018_;
  }
  google_argon_2018_ = NULL;
  if (GetArenaNoVirtual() == NULL && google_argon_2019_ != NULL) {
    delete google_argon_2019_;
  }
  google_argon_2019_ = NULL;
  if (GetArenaNoVirtual() == NULL && google_argon_2020_ != NULL) {
    delete google_argon_2020_;
  }
  google_argon_2020_ = NULL;
  if (GetArenaNoVirtual() == NULL && google_argon_2021_ != NULL) {
    delete google_argon_2021_;
  }
  google_argon_2021_ = NULL;
  if (GetArenaNoVirtual() == NULL && cloudflare_nimbus_2017_ != NULL) {
    delete cloudflare_nimbus_2017_;
  }
  cloudflare_nimbus_2017_ = NULL;
  if (GetArenaNoVirtual() == NULL && cloudflare_nimbus_2018_ != NULL) {
    delete cloudflare_nimbus_2018_;
  }
  cloudflare_nimbus_2018_ = NULL;
  if (GetArenaNoVirtual() == NULL && cloudflare_nimbus_2019_ != NULL) {
    delete cloudflare_nimbus_2019_;
  }
  cloudflare_nimbus_2019_ = NULL;
  if (GetArenaNoVirtual() == NULL && cloudflare_nimbus_2020_ != NULL) {
    delete cloudflare_nimbus_2020_;
  }
  cloudflare_nimbus_2020_ = NULL;
  if (GetArenaNoVirtual() == NULL && cloudflare_nimbus_2021_ != NULL) {
    delete cloudflare_nimbus_2021_;
  }
  cloudflare_nimbus_2021_ = NULL;
  if (GetArenaNoVirtual() == NULL && digicert_ct1_ != NULL) {
    delete digicert_ct1_;
  }
  digicert_ct1_ = NULL;
  if (GetArenaNoVirtual() == NULL && digicert_ct2_ != NULL) {
    delete digicert_ct2_;
  }
  digicert_ct2_ = NULL;
  if (GetArenaNoVirtual() == NULL && izenpe_com_ct_ != NULL) {
    delete izenpe_com_ct_;
  }
  izenpe_com_ct_ = NULL;
  if (GetArenaNoVirtual() == NULL && izenpe_eus_ct_ != NULL) {
    delete izenpe_eus_ct_;
  }
  izenpe_eus_ct_ = NULL;
  if (GetArenaNoVirtual() == NULL && symantec_ws_ct_ != NULL) {
    delete symantec_ws_ct_;
  }
  symantec_ws_ct_ = NULL;
  if (GetArenaNoVirtual() == NULL && symantec_ws_vega_ != NULL) {
    delete symantec_ws_vega_;
  }
  symantec_ws_vega_ = NULL;
  if (GetArenaNoVirtual() == NULL && symantec_ws_sirius_ != NULL) {
    delete symantec_ws_sirius_;
  }
  symantec_ws_sirius_ = NULL;
  if (GetArenaNoVirtual() == NULL && symantec_ws_deneb_ != NULL) {
    delete symantec_ws_deneb_;
  }
  symantec_ws_deneb_ = NULL;
  if (GetArenaNoVirtual() == NULL && comodo_dodo_ != NULL) {
    delete comodo_dodo_;
  }
  comodo_dodo_ = NULL;
  if (GetArenaNoVirtual() == NULL && comodo_mammoth_ != NULL) {
    delete comodo_mammoth_;
  }
  comodo_mammoth_ = NULL;
  if (GetArenaNoVirtual() == NULL && comodo_sabre_ != NULL) {
    delete comodo_sabre_;
  }
  comodo_sabre_ = NULL;
  if (GetArenaNoVirtual() == NULL && wosign_ctlog_ != NULL) {
    delete wosign_ctlog_;
  }
  wosign_ctlog_ = NULL;
  if (GetArenaNoVirtual() == NULL && wosign_ct_ != NULL) {
    delete wosign_ct_;
  }
  wosign_ct_ = NULL;
  if (GetArenaNoVirtual() == NULL && wotrus_ctlog_ != NULL) {
    delete wotrus_ctlog_;
  }
  wotrus_ctlog_ = NULL;
  if (GetArenaNoVirtual() == NULL && wotrus_ctlog3_ != NULL) {
    delete wotrus_ctlog3_;
  }
  wotrus_ctlog3_ = NULL;
  if (GetArenaNoVirtual() == NULL && gdca_ct_ != NULL) {
    delete gdca_ct_;
  }
  gdca_ct_ = NULL;
  if (GetArenaNoVirtual() == NULL && gdca_ctlog_ != NULL) {
    delete gdca_ctlog_;
  }
  gdca_ctlog_ = NULL;
  if (GetArenaNoVirtual() == NULL && gdca_log_ != NULL) {
    delete gdca_log_;
  }
  gdca_log_ = NULL;
  if (GetArenaNoVirtual() == NULL && gdca_log2_ != NULL) {
    delete gdca_log2_;
  }
  gdca_log2_ = NULL;
  if (GetArenaNoVirtual() == NULL && venafi_api_ctlog_ != NULL) {
    delete venafi_api_ctlog_;
  }
  venafi_api_ctlog_ = NULL;
  if (GetArenaNoVirtual() == NULL && venafi_api_ctlog_gen2_ != NULL) {
    delete venafi_api_ctlog_gen2_;
  }
  venafi_api_ctlog_gen2_ = NULL;
  if (GetArenaNoVirtual() == NULL && nordu_ct_plausible_ != NULL) {
    delete nordu_ct_plausible_;
  }
  nordu_ct_plausible_ = NULL;
  if (GetArenaNoVirtual() == NULL && cnnic_ctserver_ != NULL) {
    delete cnnic_ctserver_;
  }
  cnnic_ctserver_ = NULL;
  if (GetArenaNoVirtual() == NULL && startssl_ct_ != NULL) {
    delete startssl_ct_;
  }
  startssl_ct_ = NULL;
  if (GetArenaNoVirtual() == NULL && certly_log_ != NULL) {
    delete certly_log_;
  }
  certly_log_ = NULL;
  if (GetArenaNoVirtual() == NULL && sheca_ct_ != NULL) {
    delete sheca_ct_;
  }
  sheca_ct_ = NULL;
  if (GetArenaNoVirtual() == NULL && letsencrypt_ct_clicky_ != NULL) {
    delete letsencrypt_ct_clicky_;
  }
  letsencrypt_ct_clicky_ = NULL;
  if (GetArenaNoVirtual() == NULL && behind_the_sofa_ != NULL) {
    delete behind_the_sofa_;
  }
  behind_the_sofa_ = NULL;
  if (GetArenaNoVirtual() == NULL && certificatetransparency_cn_ct_ != NULL) {
    delete certificatetransparency_cn_ct_;
  }
  certificatetransparency_cn_ct_ = NULL;
}

bool CTStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.CTStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .zsearch.CTServerStatus censys_dev = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_censys_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus censys = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_censys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus google_aviator = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_google_aviator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus google_pilot = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_google_pilot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus google_rocketeer = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_google_rocketeer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus google_submariner = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_google_submariner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus google_testtube = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_google_testtube()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus google_icarus = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_google_icarus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus google_skydiver = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_google_skydiver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus google_daedalus = 17;
      case 17: {
        if (tag == 138u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_google_daedalus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus digicert_ct1 = 20;
      case 20: {
        if (tag == 162u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_digicert_ct1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus izenpe_com_ct = 21;
      case 21: {
        if (tag == 170u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_izenpe_com_ct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus izenpe_eus_ct = 22;
      case 22: {
        if (tag == 178u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_izenpe_eus_ct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus symantec_ws_ct = 23;
      case 23: {
        if (tag == 186u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symantec_ws_ct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus symantec_ws_vega = 24;
      case 24: {
        if (tag == 194u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symantec_ws_vega()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus wosign_ctlog = 25;
      case 25: {
        if (tag == 202u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wosign_ctlog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus wosign_ct = 26;
      case 26: {
        if (tag == 210u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wosign_ct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus cnnic_ctserver = 27;
      case 27: {
        if (tag == 218u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cnnic_ctserver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus gdca_ct = 28;
      case 28: {
        if (tag == 226u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gdca_ct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus startssl_ct = 29;
      case 29: {
        if (tag == 234u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startssl_ct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus certly_log = 30;
      case 30: {
        if (tag == 242u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_certly_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus venafi_api_ctlog = 31;
      case 31: {
        if (tag == 250u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_venafi_api_ctlog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus symantec_ws_deneb = 32;
      case 32: {
        if (tag == 258u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symantec_ws_deneb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus nordu_ct_plausible = 33;
      case 33: {
        if (tag == 266u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nordu_ct_plausible()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus comodo_dodo = 34;
      case 34: {
        if (tag == 274u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comodo_dodo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus comodo_mammoth = 35;
      case 35: {
        if (tag == 282u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comodo_mammoth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus gdca_ctlog = 36;
      case 36: {
        if (tag == 290u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gdca_ctlog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus symantec_ws_sirius = 37;
      case 37: {
        if (tag == 298u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symantec_ws_sirius()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus certificatetransparency_cn_ct = 38;
      case 38: {
        if (tag == 306u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_certificatetransparency_cn_ct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus venafi_api_ctlog_gen2 = 39;
      case 39: {
        if (tag == 314u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_venafi_api_ctlog_gen2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus digicert_ct2 = 40;
      case 40: {
        if (tag == 322u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_digicert_ct2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus comodo_sabre = 41;
      case 41: {
        if (tag == 330u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comodo_sabre()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus sheca_ct = 42;
      case 42: {
        if (tag == 338u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sheca_ct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus letsencrypt_ct_clicky = 43;
      case 43: {
        if (tag == 346u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_letsencrypt_ct_clicky()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus behind_the_sofa = 44;
      case 44: {
        if (tag == 354u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_behind_the_sofa()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus gdca_log = 45;
      case 45: {
        if (tag == 362u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gdca_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus gdca_log2 = 46;
      case 46: {
        if (tag == 370u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gdca_log2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus wotrus_ctlog = 47;
      case 47: {
        if (tag == 378u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wotrus_ctlog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus wotrus_ctlog3 = 48;
      case 48: {
        if (tag == 386u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wotrus_ctlog3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus google_argon_2017 = 50;
      case 50: {
        if (tag == 402u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_google_argon_2017()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus google_argon_2018 = 51;
      case 51: {
        if (tag == 410u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_google_argon_2018()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus google_argon_2019 = 52;
      case 52: {
        if (tag == 418u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_google_argon_2019()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus google_argon_2020 = 53;
      case 53: {
        if (tag == 426u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_google_argon_2020()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus google_argon_2021 = 54;
      case 54: {
        if (tag == 434u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_google_argon_2021()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus cloudflare_nimbus_2017 = 60;
      case 60: {
        if (tag == 482u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cloudflare_nimbus_2017()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus cloudflare_nimbus_2018 = 61;
      case 61: {
        if (tag == 490u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cloudflare_nimbus_2018()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus cloudflare_nimbus_2019 = 62;
      case 62: {
        if (tag == 498u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cloudflare_nimbus_2019()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus cloudflare_nimbus_2020 = 63;
      case 63: {
        if (tag == 506u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cloudflare_nimbus_2020()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus cloudflare_nimbus_2021 = 64;
      case 64: {
        if (tag == 514u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cloudflare_nimbus_2021()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.CTStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.CTStatus)
  return false;
#undef DO_
}

void CTStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.CTStatus)
  // .zsearch.CTServerStatus censys_dev = 1;
  if (this->has_censys_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->censys_dev_, output);
  }

  // .zsearch.CTServerStatus censys = 2;
  if (this->has_censys()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->censys_, output);
  }

  // .zsearch.CTServerStatus google_aviator = 10;
  if (this->has_google_aviator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->google_aviator_, output);
  }

  // .zsearch.CTServerStatus google_pilot = 11;
  if (this->has_google_pilot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->google_pilot_, output);
  }

  // .zsearch.CTServerStatus google_rocketeer = 12;
  if (this->has_google_rocketeer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->google_rocketeer_, output);
  }

  // .zsearch.CTServerStatus google_submariner = 13;
  if (this->has_google_submariner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->google_submariner_, output);
  }

  // .zsearch.CTServerStatus google_testtube = 14;
  if (this->has_google_testtube()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->google_testtube_, output);
  }

  // .zsearch.CTServerStatus google_icarus = 15;
  if (this->has_google_icarus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->google_icarus_, output);
  }

  // .zsearch.CTServerStatus google_skydiver = 16;
  if (this->has_google_skydiver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->google_skydiver_, output);
  }

  // .zsearch.CTServerStatus google_daedalus = 17;
  if (this->has_google_daedalus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->google_daedalus_, output);
  }

  // .zsearch.CTServerStatus digicert_ct1 = 20;
  if (this->has_digicert_ct1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->digicert_ct1_, output);
  }

  // .zsearch.CTServerStatus izenpe_com_ct = 21;
  if (this->has_izenpe_com_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->izenpe_com_ct_, output);
  }

  // .zsearch.CTServerStatus izenpe_eus_ct = 22;
  if (this->has_izenpe_eus_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->izenpe_eus_ct_, output);
  }

  // .zsearch.CTServerStatus symantec_ws_ct = 23;
  if (this->has_symantec_ws_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->symantec_ws_ct_, output);
  }

  // .zsearch.CTServerStatus symantec_ws_vega = 24;
  if (this->has_symantec_ws_vega()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->symantec_ws_vega_, output);
  }

  // .zsearch.CTServerStatus wosign_ctlog = 25;
  if (this->has_wosign_ctlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->wosign_ctlog_, output);
  }

  // .zsearch.CTServerStatus wosign_ct = 26;
  if (this->has_wosign_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->wosign_ct_, output);
  }

  // .zsearch.CTServerStatus cnnic_ctserver = 27;
  if (this->has_cnnic_ctserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->cnnic_ctserver_, output);
  }

  // .zsearch.CTServerStatus gdca_ct = 28;
  if (this->has_gdca_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->gdca_ct_, output);
  }

  // .zsearch.CTServerStatus startssl_ct = 29;
  if (this->has_startssl_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->startssl_ct_, output);
  }

  // .zsearch.CTServerStatus certly_log = 30;
  if (this->has_certly_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->certly_log_, output);
  }

  // .zsearch.CTServerStatus venafi_api_ctlog = 31;
  if (this->has_venafi_api_ctlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->venafi_api_ctlog_, output);
  }

  // .zsearch.CTServerStatus symantec_ws_deneb = 32;
  if (this->has_symantec_ws_deneb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *this->symantec_ws_deneb_, output);
  }

  // .zsearch.CTServerStatus nordu_ct_plausible = 33;
  if (this->has_nordu_ct_plausible()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, *this->nordu_ct_plausible_, output);
  }

  // .zsearch.CTServerStatus comodo_dodo = 34;
  if (this->has_comodo_dodo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->comodo_dodo_, output);
  }

  // .zsearch.CTServerStatus comodo_mammoth = 35;
  if (this->has_comodo_mammoth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *this->comodo_mammoth_, output);
  }

  // .zsearch.CTServerStatus gdca_ctlog = 36;
  if (this->has_gdca_ctlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, *this->gdca_ctlog_, output);
  }

  // .zsearch.CTServerStatus symantec_ws_sirius = 37;
  if (this->has_symantec_ws_sirius()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->symantec_ws_sirius_, output);
  }

  // .zsearch.CTServerStatus certificatetransparency_cn_ct = 38;
  if (this->has_certificatetransparency_cn_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, *this->certificatetransparency_cn_ct_, output);
  }

  // .zsearch.CTServerStatus venafi_api_ctlog_gen2 = 39;
  if (this->has_venafi_api_ctlog_gen2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, *this->venafi_api_ctlog_gen2_, output);
  }

  // .zsearch.CTServerStatus digicert_ct2 = 40;
  if (this->has_digicert_ct2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *this->digicert_ct2_, output);
  }

  // .zsearch.CTServerStatus comodo_sabre = 41;
  if (this->has_comodo_sabre()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, *this->comodo_sabre_, output);
  }

  // .zsearch.CTServerStatus sheca_ct = 42;
  if (this->has_sheca_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *this->sheca_ct_, output);
  }

  // .zsearch.CTServerStatus letsencrypt_ct_clicky = 43;
  if (this->has_letsencrypt_ct_clicky()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, *this->letsencrypt_ct_clicky_, output);
  }

  // .zsearch.CTServerStatus behind_the_sofa = 44;
  if (this->has_behind_the_sofa()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, *this->behind_the_sofa_, output);
  }

  // .zsearch.CTServerStatus gdca_log = 45;
  if (this->has_gdca_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, *this->gdca_log_, output);
  }

  // .zsearch.CTServerStatus gdca_log2 = 46;
  if (this->has_gdca_log2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, *this->gdca_log2_, output);
  }

  // .zsearch.CTServerStatus wotrus_ctlog = 47;
  if (this->has_wotrus_ctlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, *this->wotrus_ctlog_, output);
  }

  // .zsearch.CTServerStatus wotrus_ctlog3 = 48;
  if (this->has_wotrus_ctlog3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, *this->wotrus_ctlog3_, output);
  }

  // .zsearch.CTServerStatus google_argon_2017 = 50;
  if (this->has_google_argon_2017()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->google_argon_2017_, output);
  }

  // .zsearch.CTServerStatus google_argon_2018 = 51;
  if (this->has_google_argon_2018()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, *this->google_argon_2018_, output);
  }

  // .zsearch.CTServerStatus google_argon_2019 = 52;
  if (this->has_google_argon_2019()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, *this->google_argon_2019_, output);
  }

  // .zsearch.CTServerStatus google_argon_2020 = 53;
  if (this->has_google_argon_2020()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, *this->google_argon_2020_, output);
  }

  // .zsearch.CTServerStatus google_argon_2021 = 54;
  if (this->has_google_argon_2021()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, *this->google_argon_2021_, output);
  }

  // .zsearch.CTServerStatus cloudflare_nimbus_2017 = 60;
  if (this->has_cloudflare_nimbus_2017()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, *this->cloudflare_nimbus_2017_, output);
  }

  // .zsearch.CTServerStatus cloudflare_nimbus_2018 = 61;
  if (this->has_cloudflare_nimbus_2018()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, *this->cloudflare_nimbus_2018_, output);
  }

  // .zsearch.CTServerStatus cloudflare_nimbus_2019 = 62;
  if (this->has_cloudflare_nimbus_2019()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, *this->cloudflare_nimbus_2019_, output);
  }

  // .zsearch.CTServerStatus cloudflare_nimbus_2020 = 63;
  if (this->has_cloudflare_nimbus_2020()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, *this->cloudflare_nimbus_2020_, output);
  }

  // .zsearch.CTServerStatus cloudflare_nimbus_2021 = 64;
  if (this->has_cloudflare_nimbus_2021()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, *this->cloudflare_nimbus_2021_, output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.CTStatus)
}

::google::protobuf::uint8* CTStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.CTStatus)
  // .zsearch.CTServerStatus censys_dev = 1;
  if (this->has_censys_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->censys_dev_, false, target);
  }

  // .zsearch.CTServerStatus censys = 2;
  if (this->has_censys()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->censys_, false, target);
  }

  // .zsearch.CTServerStatus google_aviator = 10;
  if (this->has_google_aviator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->google_aviator_, false, target);
  }

  // .zsearch.CTServerStatus google_pilot = 11;
  if (this->has_google_pilot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->google_pilot_, false, target);
  }

  // .zsearch.CTServerStatus google_rocketeer = 12;
  if (this->has_google_rocketeer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->google_rocketeer_, false, target);
  }

  // .zsearch.CTServerStatus google_submariner = 13;
  if (this->has_google_submariner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->google_submariner_, false, target);
  }

  // .zsearch.CTServerStatus google_testtube = 14;
  if (this->has_google_testtube()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->google_testtube_, false, target);
  }

  // .zsearch.CTServerStatus google_icarus = 15;
  if (this->has_google_icarus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->google_icarus_, false, target);
  }

  // .zsearch.CTServerStatus google_skydiver = 16;
  if (this->has_google_skydiver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->google_skydiver_, false, target);
  }

  // .zsearch.CTServerStatus google_daedalus = 17;
  if (this->has_google_daedalus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->google_daedalus_, false, target);
  }

  // .zsearch.CTServerStatus digicert_ct1 = 20;
  if (this->has_digicert_ct1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->digicert_ct1_, false, target);
  }

  // .zsearch.CTServerStatus izenpe_com_ct = 21;
  if (this->has_izenpe_com_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->izenpe_com_ct_, false, target);
  }

  // .zsearch.CTServerStatus izenpe_eus_ct = 22;
  if (this->has_izenpe_eus_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->izenpe_eus_ct_, false, target);
  }

  // .zsearch.CTServerStatus symantec_ws_ct = 23;
  if (this->has_symantec_ws_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->symantec_ws_ct_, false, target);
  }

  // .zsearch.CTServerStatus symantec_ws_vega = 24;
  if (this->has_symantec_ws_vega()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->symantec_ws_vega_, false, target);
  }

  // .zsearch.CTServerStatus wosign_ctlog = 25;
  if (this->has_wosign_ctlog()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->wosign_ctlog_, false, target);
  }

  // .zsearch.CTServerStatus wosign_ct = 26;
  if (this->has_wosign_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->wosign_ct_, false, target);
  }

  // .zsearch.CTServerStatus cnnic_ctserver = 27;
  if (this->has_cnnic_ctserver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->cnnic_ctserver_, false, target);
  }

  // .zsearch.CTServerStatus gdca_ct = 28;
  if (this->has_gdca_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *this->gdca_ct_, false, target);
  }

  // .zsearch.CTServerStatus startssl_ct = 29;
  if (this->has_startssl_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->startssl_ct_, false, target);
  }

  // .zsearch.CTServerStatus certly_log = 30;
  if (this->has_certly_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->certly_log_, false, target);
  }

  // .zsearch.CTServerStatus venafi_api_ctlog = 31;
  if (this->has_venafi_api_ctlog()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->venafi_api_ctlog_, false, target);
  }

  // .zsearch.CTServerStatus symantec_ws_deneb = 32;
  if (this->has_symantec_ws_deneb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, *this->symantec_ws_deneb_, false, target);
  }

  // .zsearch.CTServerStatus nordu_ct_plausible = 33;
  if (this->has_nordu_ct_plausible()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, *this->nordu_ct_plausible_, false, target);
  }

  // .zsearch.CTServerStatus comodo_dodo = 34;
  if (this->has_comodo_dodo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        34, *this->comodo_dodo_, false, target);
  }

  // .zsearch.CTServerStatus comodo_mammoth = 35;
  if (this->has_comodo_mammoth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        35, *this->comodo_mammoth_, false, target);
  }

  // .zsearch.CTServerStatus gdca_ctlog = 36;
  if (this->has_gdca_ctlog()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        36, *this->gdca_ctlog_, false, target);
  }

  // .zsearch.CTServerStatus symantec_ws_sirius = 37;
  if (this->has_symantec_ws_sirius()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *this->symantec_ws_sirius_, false, target);
  }

  // .zsearch.CTServerStatus certificatetransparency_cn_ct = 38;
  if (this->has_certificatetransparency_cn_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        38, *this->certificatetransparency_cn_ct_, false, target);
  }

  // .zsearch.CTServerStatus venafi_api_ctlog_gen2 = 39;
  if (this->has_venafi_api_ctlog_gen2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        39, *this->venafi_api_ctlog_gen2_, false, target);
  }

  // .zsearch.CTServerStatus digicert_ct2 = 40;
  if (this->has_digicert_ct2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        40, *this->digicert_ct2_, false, target);
  }

  // .zsearch.CTServerStatus comodo_sabre = 41;
  if (this->has_comodo_sabre()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        41, *this->comodo_sabre_, false, target);
  }

  // .zsearch.CTServerStatus sheca_ct = 42;
  if (this->has_sheca_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, *this->sheca_ct_, false, target);
  }

  // .zsearch.CTServerStatus letsencrypt_ct_clicky = 43;
  if (this->has_letsencrypt_ct_clicky()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        43, *this->letsencrypt_ct_clicky_, false, target);
  }

  // .zsearch.CTServerStatus behind_the_sofa = 44;
  if (this->has_behind_the_sofa()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        44, *this->behind_the_sofa_, false, target);
  }

  // .zsearch.CTServerStatus gdca_log = 45;
  if (this->has_gdca_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        45, *this->gdca_log_, false, target);
  }

  // .zsearch.CTServerStatus gdca_log2 = 46;
  if (this->has_gdca_log2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        46, *this->gdca_log2_, false, target);
  }

  // .zsearch.CTServerStatus wotrus_ctlog = 47;
  if (this->has_wotrus_ctlog()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        47, *this->wotrus_ctlog_, false, target);
  }

  // .zsearch.CTServerStatus wotrus_ctlog3 = 48;
  if (this->has_wotrus_ctlog3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        48, *this->wotrus_ctlog3_, false, target);
  }

  // .zsearch.CTServerStatus google_argon_2017 = 50;
  if (this->has_google_argon_2017()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *this->google_argon_2017_, false, target);
  }

  // .zsearch.CTServerStatus google_argon_2018 = 51;
  if (this->has_google_argon_2018()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        51, *this->google_argon_2018_, false, target);
  }

  // .zsearch.CTServerStatus google_argon_2019 = 52;
  if (this->has_google_argon_2019()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        52, *this->google_argon_2019_, false, target);
  }

  // .zsearch.CTServerStatus google_argon_2020 = 53;
  if (this->has_google_argon_2020()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        53, *this->google_argon_2020_, false, target);
  }

  // .zsearch.CTServerStatus google_argon_2021 = 54;
  if (this->has_google_argon_2021()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        54, *this->google_argon_2021_, false, target);
  }

  // .zsearch.CTServerStatus cloudflare_nimbus_2017 = 60;
  if (this->has_cloudflare_nimbus_2017()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        60, *this->cloudflare_nimbus_2017_, false, target);
  }

  // .zsearch.CTServerStatus cloudflare_nimbus_2018 = 61;
  if (this->has_cloudflare_nimbus_2018()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        61, *this->cloudflare_nimbus_2018_, false, target);
  }

  // .zsearch.CTServerStatus cloudflare_nimbus_2019 = 62;
  if (this->has_cloudflare_nimbus_2019()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        62, *this->cloudflare_nimbus_2019_, false, target);
  }

  // .zsearch.CTServerStatus cloudflare_nimbus_2020 = 63;
  if (this->has_cloudflare_nimbus_2020()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        63, *this->cloudflare_nimbus_2020_, false, target);
  }

  // .zsearch.CTServerStatus cloudflare_nimbus_2021 = 64;
  if (this->has_cloudflare_nimbus_2021()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        64, *this->cloudflare_nimbus_2021_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.CTStatus)
  return target;
}

size_t CTStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.CTStatus)
  size_t total_size = 0;

  // .zsearch.CTServerStatus censys_dev = 1;
  if (this->has_censys_dev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->censys_dev_);
  }

  // .zsearch.CTServerStatus censys = 2;
  if (this->has_censys()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->censys_);
  }

  // .zsearch.CTServerStatus google_aviator = 10;
  if (this->has_google_aviator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->google_aviator_);
  }

  // .zsearch.CTServerStatus google_pilot = 11;
  if (this->has_google_pilot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->google_pilot_);
  }

  // .zsearch.CTServerStatus google_rocketeer = 12;
  if (this->has_google_rocketeer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->google_rocketeer_);
  }

  // .zsearch.CTServerStatus google_submariner = 13;
  if (this->has_google_submariner()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->google_submariner_);
  }

  // .zsearch.CTServerStatus google_testtube = 14;
  if (this->has_google_testtube()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->google_testtube_);
  }

  // .zsearch.CTServerStatus google_icarus = 15;
  if (this->has_google_icarus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->google_icarus_);
  }

  // .zsearch.CTServerStatus google_skydiver = 16;
  if (this->has_google_skydiver()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->google_skydiver_);
  }

  // .zsearch.CTServerStatus google_daedalus = 17;
  if (this->has_google_daedalus()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->google_daedalus_);
  }

  // .zsearch.CTServerStatus google_argon_2017 = 50;
  if (this->has_google_argon_2017()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->google_argon_2017_);
  }

  // .zsearch.CTServerStatus google_argon_2018 = 51;
  if (this->has_google_argon_2018()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->google_argon_2018_);
  }

  // .zsearch.CTServerStatus google_argon_2019 = 52;
  if (this->has_google_argon_2019()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->google_argon_2019_);
  }

  // .zsearch.CTServerStatus google_argon_2020 = 53;
  if (this->has_google_argon_2020()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->google_argon_2020_);
  }

  // .zsearch.CTServerStatus google_argon_2021 = 54;
  if (this->has_google_argon_2021()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->google_argon_2021_);
  }

  // .zsearch.CTServerStatus cloudflare_nimbus_2017 = 60;
  if (this->has_cloudflare_nimbus_2017()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cloudflare_nimbus_2017_);
  }

  // .zsearch.CTServerStatus cloudflare_nimbus_2018 = 61;
  if (this->has_cloudflare_nimbus_2018()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cloudflare_nimbus_2018_);
  }

  // .zsearch.CTServerStatus cloudflare_nimbus_2019 = 62;
  if (this->has_cloudflare_nimbus_2019()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cloudflare_nimbus_2019_);
  }

  // .zsearch.CTServerStatus cloudflare_nimbus_2020 = 63;
  if (this->has_cloudflare_nimbus_2020()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cloudflare_nimbus_2020_);
  }

  // .zsearch.CTServerStatus cloudflare_nimbus_2021 = 64;
  if (this->has_cloudflare_nimbus_2021()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cloudflare_nimbus_2021_);
  }

  // .zsearch.CTServerStatus digicert_ct1 = 20;
  if (this->has_digicert_ct1()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->digicert_ct1_);
  }

  // .zsearch.CTServerStatus digicert_ct2 = 40;
  if (this->has_digicert_ct2()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->digicert_ct2_);
  }

  // .zsearch.CTServerStatus izenpe_com_ct = 21;
  if (this->has_izenpe_com_ct()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->izenpe_com_ct_);
  }

  // .zsearch.CTServerStatus izenpe_eus_ct = 22;
  if (this->has_izenpe_eus_ct()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->izenpe_eus_ct_);
  }

  // .zsearch.CTServerStatus symantec_ws_ct = 23;
  if (this->has_symantec_ws_ct()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->symantec_ws_ct_);
  }

  // .zsearch.CTServerStatus symantec_ws_vega = 24;
  if (this->has_symantec_ws_vega()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->symantec_ws_vega_);
  }

  // .zsearch.CTServerStatus symantec_ws_sirius = 37;
  if (this->has_symantec_ws_sirius()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->symantec_ws_sirius_);
  }

  // .zsearch.CTServerStatus symantec_ws_deneb = 32;
  if (this->has_symantec_ws_deneb()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->symantec_ws_deneb_);
  }

  // .zsearch.CTServerStatus comodo_dodo = 34;
  if (this->has_comodo_dodo()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->comodo_dodo_);
  }

  // .zsearch.CTServerStatus comodo_mammoth = 35;
  if (this->has_comodo_mammoth()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->comodo_mammoth_);
  }

  // .zsearch.CTServerStatus comodo_sabre = 41;
  if (this->has_comodo_sabre()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->comodo_sabre_);
  }

  // .zsearch.CTServerStatus wosign_ctlog = 25;
  if (this->has_wosign_ctlog()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wosign_ctlog_);
  }

  // .zsearch.CTServerStatus wosign_ct = 26;
  if (this->has_wosign_ct()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wosign_ct_);
  }

  // .zsearch.CTServerStatus wotrus_ctlog = 47;
  if (this->has_wotrus_ctlog()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wotrus_ctlog_);
  }

  // .zsearch.CTServerStatus wotrus_ctlog3 = 48;
  if (this->has_wotrus_ctlog3()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wotrus_ctlog3_);
  }

  // .zsearch.CTServerStatus gdca_ct = 28;
  if (this->has_gdca_ct()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gdca_ct_);
  }

  // .zsearch.CTServerStatus gdca_ctlog = 36;
  if (this->has_gdca_ctlog()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gdca_ctlog_);
  }

  // .zsearch.CTServerStatus gdca_log = 45;
  if (this->has_gdca_log()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gdca_log_);
  }

  // .zsearch.CTServerStatus gdca_log2 = 46;
  if (this->has_gdca_log2()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gdca_log2_);
  }

  // .zsearch.CTServerStatus venafi_api_ctlog = 31;
  if (this->has_venafi_api_ctlog()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->venafi_api_ctlog_);
  }

  // .zsearch.CTServerStatus venafi_api_ctlog_gen2 = 39;
  if (this->has_venafi_api_ctlog_gen2()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->venafi_api_ctlog_gen2_);
  }

  // .zsearch.CTServerStatus nordu_ct_plausible = 33;
  if (this->has_nordu_ct_plausible()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nordu_ct_plausible_);
  }

  // .zsearch.CTServerStatus cnnic_ctserver = 27;
  if (this->has_cnnic_ctserver()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cnnic_ctserver_);
  }

  // .zsearch.CTServerStatus startssl_ct = 29;
  if (this->has_startssl_ct()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->startssl_ct_);
  }

  // .zsearch.CTServerStatus certly_log = 30;
  if (this->has_certly_log()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->certly_log_);
  }

  // .zsearch.CTServerStatus sheca_ct = 42;
  if (this->has_sheca_ct()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sheca_ct_);
  }

  // .zsearch.CTServerStatus letsencrypt_ct_clicky = 43;
  if (this->has_letsencrypt_ct_clicky()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->letsencrypt_ct_clicky_);
  }

  // .zsearch.CTServerStatus behind_the_sofa = 44;
  if (this->has_behind_the_sofa()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->behind_the_sofa_);
  }

  // .zsearch.CTServerStatus certificatetransparency_cn_ct = 38;
  if (this->has_certificatetransparency_cn_ct()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->certificatetransparency_cn_ct_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.CTStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CTStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.CTStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.CTStatus)
    MergeFrom(*source);
  }
}

void CTStatus::MergeFrom(const CTStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.CTStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_censys_dev()) {
    mutable_censys_dev()->::zsearch::CTServerStatus::MergeFrom(from.censys_dev());
  }
  if (from.has_censys()) {
    mutable_censys()->::zsearch::CTServerStatus::MergeFrom(from.censys());
  }
  if (from.has_google_aviator()) {
    mutable_google_aviator()->::zsearch::CTServerStatus::MergeFrom(from.google_aviator());
  }
  if (from.has_google_pilot()) {
    mutable_google_pilot()->::zsearch::CTServerStatus::MergeFrom(from.google_pilot());
  }
  if (from.has_google_rocketeer()) {
    mutable_google_rocketeer()->::zsearch::CTServerStatus::MergeFrom(from.google_rocketeer());
  }
  if (from.has_google_submariner()) {
    mutable_google_submariner()->::zsearch::CTServerStatus::MergeFrom(from.google_submariner());
  }
  if (from.has_google_testtube()) {
    mutable_google_testtube()->::zsearch::CTServerStatus::MergeFrom(from.google_testtube());
  }
  if (from.has_google_icarus()) {
    mutable_google_icarus()->::zsearch::CTServerStatus::MergeFrom(from.google_icarus());
  }
  if (from.has_google_skydiver()) {
    mutable_google_skydiver()->::zsearch::CTServerStatus::MergeFrom(from.google_skydiver());
  }
  if (from.has_google_daedalus()) {
    mutable_google_daedalus()->::zsearch::CTServerStatus::MergeFrom(from.google_daedalus());
  }
  if (from.has_google_argon_2017()) {
    mutable_google_argon_2017()->::zsearch::CTServerStatus::MergeFrom(from.google_argon_2017());
  }
  if (from.has_google_argon_2018()) {
    mutable_google_argon_2018()->::zsearch::CTServerStatus::MergeFrom(from.google_argon_2018());
  }
  if (from.has_google_argon_2019()) {
    mutable_google_argon_2019()->::zsearch::CTServerStatus::MergeFrom(from.google_argon_2019());
  }
  if (from.has_google_argon_2020()) {
    mutable_google_argon_2020()->::zsearch::CTServerStatus::MergeFrom(from.google_argon_2020());
  }
  if (from.has_google_argon_2021()) {
    mutable_google_argon_2021()->::zsearch::CTServerStatus::MergeFrom(from.google_argon_2021());
  }
  if (from.has_cloudflare_nimbus_2017()) {
    mutable_cloudflare_nimbus_2017()->::zsearch::CTServerStatus::MergeFrom(from.cloudflare_nimbus_2017());
  }
  if (from.has_cloudflare_nimbus_2018()) {
    mutable_cloudflare_nimbus_2018()->::zsearch::CTServerStatus::MergeFrom(from.cloudflare_nimbus_2018());
  }
  if (from.has_cloudflare_nimbus_2019()) {
    mutable_cloudflare_nimbus_2019()->::zsearch::CTServerStatus::MergeFrom(from.cloudflare_nimbus_2019());
  }
  if (from.has_cloudflare_nimbus_2020()) {
    mutable_cloudflare_nimbus_2020()->::zsearch::CTServerStatus::MergeFrom(from.cloudflare_nimbus_2020());
  }
  if (from.has_cloudflare_nimbus_2021()) {
    mutable_cloudflare_nimbus_2021()->::zsearch::CTServerStatus::MergeFrom(from.cloudflare_nimbus_2021());
  }
  if (from.has_digicert_ct1()) {
    mutable_digicert_ct1()->::zsearch::CTServerStatus::MergeFrom(from.digicert_ct1());
  }
  if (from.has_digicert_ct2()) {
    mutable_digicert_ct2()->::zsearch::CTServerStatus::MergeFrom(from.digicert_ct2());
  }
  if (from.has_izenpe_com_ct()) {
    mutable_izenpe_com_ct()->::zsearch::CTServerStatus::MergeFrom(from.izenpe_com_ct());
  }
  if (from.has_izenpe_eus_ct()) {
    mutable_izenpe_eus_ct()->::zsearch::CTServerStatus::MergeFrom(from.izenpe_eus_ct());
  }
  if (from.has_symantec_ws_ct()) {
    mutable_symantec_ws_ct()->::zsearch::CTServerStatus::MergeFrom(from.symantec_ws_ct());
  }
  if (from.has_symantec_ws_vega()) {
    mutable_symantec_ws_vega()->::zsearch::CTServerStatus::MergeFrom(from.symantec_ws_vega());
  }
  if (from.has_symantec_ws_sirius()) {
    mutable_symantec_ws_sirius()->::zsearch::CTServerStatus::MergeFrom(from.symantec_ws_sirius());
  }
  if (from.has_symantec_ws_deneb()) {
    mutable_symantec_ws_deneb()->::zsearch::CTServerStatus::MergeFrom(from.symantec_ws_deneb());
  }
  if (from.has_comodo_dodo()) {
    mutable_comodo_dodo()->::zsearch::CTServerStatus::MergeFrom(from.comodo_dodo());
  }
  if (from.has_comodo_mammoth()) {
    mutable_comodo_mammoth()->::zsearch::CTServerStatus::MergeFrom(from.comodo_mammoth());
  }
  if (from.has_comodo_sabre()) {
    mutable_comodo_sabre()->::zsearch::CTServerStatus::MergeFrom(from.comodo_sabre());
  }
  if (from.has_wosign_ctlog()) {
    mutable_wosign_ctlog()->::zsearch::CTServerStatus::MergeFrom(from.wosign_ctlog());
  }
  if (from.has_wosign_ct()) {
    mutable_wosign_ct()->::zsearch::CTServerStatus::MergeFrom(from.wosign_ct());
  }
  if (from.has_wotrus_ctlog()) {
    mutable_wotrus_ctlog()->::zsearch::CTServerStatus::MergeFrom(from.wotrus_ctlog());
  }
  if (from.has_wotrus_ctlog3()) {
    mutable_wotrus_ctlog3()->::zsearch::CTServerStatus::MergeFrom(from.wotrus_ctlog3());
  }
  if (from.has_gdca_ct()) {
    mutable_gdca_ct()->::zsearch::CTServerStatus::MergeFrom(from.gdca_ct());
  }
  if (from.has_gdca_ctlog()) {
    mutable_gdca_ctlog()->::zsearch::CTServerStatus::MergeFrom(from.gdca_ctlog());
  }
  if (from.has_gdca_log()) {
    mutable_gdca_log()->::zsearch::CTServerStatus::MergeFrom(from.gdca_log());
  }
  if (from.has_gdca_log2()) {
    mutable_gdca_log2()->::zsearch::CTServerStatus::MergeFrom(from.gdca_log2());
  }
  if (from.has_venafi_api_ctlog()) {
    mutable_venafi_api_ctlog()->::zsearch::CTServerStatus::MergeFrom(from.venafi_api_ctlog());
  }
  if (from.has_venafi_api_ctlog_gen2()) {
    mutable_venafi_api_ctlog_gen2()->::zsearch::CTServerStatus::MergeFrom(from.venafi_api_ctlog_gen2());
  }
  if (from.has_nordu_ct_plausible()) {
    mutable_nordu_ct_plausible()->::zsearch::CTServerStatus::MergeFrom(from.nordu_ct_plausible());
  }
  if (from.has_cnnic_ctserver()) {
    mutable_cnnic_ctserver()->::zsearch::CTServerStatus::MergeFrom(from.cnnic_ctserver());
  }
  if (from.has_startssl_ct()) {
    mutable_startssl_ct()->::zsearch::CTServerStatus::MergeFrom(from.startssl_ct());
  }
  if (from.has_certly_log()) {
    mutable_certly_log()->::zsearch::CTServerStatus::MergeFrom(from.certly_log());
  }
  if (from.has_sheca_ct()) {
    mutable_sheca_ct()->::zsearch::CTServerStatus::MergeFrom(from.sheca_ct());
  }
  if (from.has_letsencrypt_ct_clicky()) {
    mutable_letsencrypt_ct_clicky()->::zsearch::CTServerStatus::MergeFrom(from.letsencrypt_ct_clicky());
  }
  if (from.has_behind_the_sofa()) {
    mutable_behind_the_sofa()->::zsearch::CTServerStatus::MergeFrom(from.behind_the_sofa());
  }
  if (from.has_certificatetransparency_cn_ct()) {
    mutable_certificatetransparency_cn_ct()->::zsearch::CTServerStatus::MergeFrom(from.certificatetransparency_cn_ct());
  }
}

void CTStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.CTStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTStatus::CopyFrom(const CTStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.CTStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTStatus::IsInitialized() const {
  return true;
}

void CTStatus::Swap(CTStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTStatus::InternalSwap(CTStatus* other) {
  std::swap(censys_dev_, other->censys_dev_);
  std::swap(censys_, other->censys_);
  std::swap(google_aviator_, other->google_aviator_);
  std::swap(google_pilot_, other->google_pilot_);
  std::swap(google_rocketeer_, other->google_rocketeer_);
  std::swap(google_submariner_, other->google_submariner_);
  std::swap(google_testtube_, other->google_testtube_);
  std::swap(google_icarus_, other->google_icarus_);
  std::swap(google_skydiver_, other->google_skydiver_);
  std::swap(google_daedalus_, other->google_daedalus_);
  std::swap(google_argon_2017_, other->google_argon_2017_);
  std::swap(google_argon_2018_, other->google_argon_2018_);
  std::swap(google_argon_2019_, other->google_argon_2019_);
  std::swap(google_argon_2020_, other->google_argon_2020_);
  std::swap(google_argon_2021_, other->google_argon_2021_);
  std::swap(cloudflare_nimbus_2017_, other->cloudflare_nimbus_2017_);
  std::swap(cloudflare_nimbus_2018_, other->cloudflare_nimbus_2018_);
  std::swap(cloudflare_nimbus_2019_, other->cloudflare_nimbus_2019_);
  std::swap(cloudflare_nimbus_2020_, other->cloudflare_nimbus_2020_);
  std::swap(cloudflare_nimbus_2021_, other->cloudflare_nimbus_2021_);
  std::swap(digicert_ct1_, other->digicert_ct1_);
  std::swap(digicert_ct2_, other->digicert_ct2_);
  std::swap(izenpe_com_ct_, other->izenpe_com_ct_);
  std::swap(izenpe_eus_ct_, other->izenpe_eus_ct_);
  std::swap(symantec_ws_ct_, other->symantec_ws_ct_);
  std::swap(symantec_ws_vega_, other->symantec_ws_vega_);
  std::swap(symantec_ws_sirius_, other->symantec_ws_sirius_);
  std::swap(symantec_ws_deneb_, other->symantec_ws_deneb_);
  std::swap(comodo_dodo_, other->comodo_dodo_);
  std::swap(comodo_mammoth_, other->comodo_mammoth_);
  std::swap(comodo_sabre_, other->comodo_sabre_);
  std::swap(wosign_ctlog_, other->wosign_ctlog_);
  std::swap(wosign_ct_, other->wosign_ct_);
  std::swap(wotrus_ctlog_, other->wotrus_ctlog_);
  std::swap(wotrus_ctlog3_, other->wotrus_ctlog3_);
  std::swap(gdca_ct_, other->gdca_ct_);
  std::swap(gdca_ctlog_, other->gdca_ctlog_);
  std::swap(gdca_log_, other->gdca_log_);
  std::swap(gdca_log2_, other->gdca_log2_);
  std::swap(venafi_api_ctlog_, other->venafi_api_ctlog_);
  std::swap(venafi_api_ctlog_gen2_, other->venafi_api_ctlog_gen2_);
  std::swap(nordu_ct_plausible_, other->nordu_ct_plausible_);
  std::swap(cnnic_ctserver_, other->cnnic_ctserver_);
  std::swap(startssl_ct_, other->startssl_ct_);
  std::swap(certly_log_, other->certly_log_);
  std::swap(sheca_ct_, other->sheca_ct_);
  std::swap(letsencrypt_ct_clicky_, other->letsencrypt_ct_clicky_);
  std::swap(behind_the_sofa_, other->behind_the_sofa_);
  std::swap(certificatetransparency_cn_ct_, other->certificatetransparency_cn_ct_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTStatus::GetMetadata() const {
  protobuf_ct_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ct_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CTStatus

// .zsearch.CTServerStatus censys_dev = 1;
bool CTStatus::has_censys_dev() const {
  return this != internal_default_instance() && censys_dev_ != NULL;
}
void CTStatus::clear_censys_dev() {
  if (GetArenaNoVirtual() == NULL && censys_dev_ != NULL) delete censys_dev_;
  censys_dev_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::censys_dev() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.censys_dev)
  return censys_dev_ != NULL ? *censys_dev_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_censys_dev() {
  
  if (censys_dev_ == NULL) {
    censys_dev_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.censys_dev)
  return censys_dev_;
}
::zsearch::CTServerStatus* CTStatus::release_censys_dev() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.censys_dev)
  
  ::zsearch::CTServerStatus* temp = censys_dev_;
  censys_dev_ = NULL;
  return temp;
}
void CTStatus::set_allocated_censys_dev(::zsearch::CTServerStatus* censys_dev) {
  delete censys_dev_;
  censys_dev_ = censys_dev;
  if (censys_dev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.censys_dev)
}

// .zsearch.CTServerStatus censys = 2;
bool CTStatus::has_censys() const {
  return this != internal_default_instance() && censys_ != NULL;
}
void CTStatus::clear_censys() {
  if (GetArenaNoVirtual() == NULL && censys_ != NULL) delete censys_;
  censys_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::censys() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.censys)
  return censys_ != NULL ? *censys_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_censys() {
  
  if (censys_ == NULL) {
    censys_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.censys)
  return censys_;
}
::zsearch::CTServerStatus* CTStatus::release_censys() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.censys)
  
  ::zsearch::CTServerStatus* temp = censys_;
  censys_ = NULL;
  return temp;
}
void CTStatus::set_allocated_censys(::zsearch::CTServerStatus* censys) {
  delete censys_;
  censys_ = censys;
  if (censys) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.censys)
}

// .zsearch.CTServerStatus google_aviator = 10;
bool CTStatus::has_google_aviator() const {
  return this != internal_default_instance() && google_aviator_ != NULL;
}
void CTStatus::clear_google_aviator() {
  if (GetArenaNoVirtual() == NULL && google_aviator_ != NULL) delete google_aviator_;
  google_aviator_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::google_aviator() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_aviator)
  return google_aviator_ != NULL ? *google_aviator_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_google_aviator() {
  
  if (google_aviator_ == NULL) {
    google_aviator_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_aviator)
  return google_aviator_;
}
::zsearch::CTServerStatus* CTStatus::release_google_aviator() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_aviator)
  
  ::zsearch::CTServerStatus* temp = google_aviator_;
  google_aviator_ = NULL;
  return temp;
}
void CTStatus::set_allocated_google_aviator(::zsearch::CTServerStatus* google_aviator) {
  delete google_aviator_;
  google_aviator_ = google_aviator;
  if (google_aviator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_aviator)
}

// .zsearch.CTServerStatus google_pilot = 11;
bool CTStatus::has_google_pilot() const {
  return this != internal_default_instance() && google_pilot_ != NULL;
}
void CTStatus::clear_google_pilot() {
  if (GetArenaNoVirtual() == NULL && google_pilot_ != NULL) delete google_pilot_;
  google_pilot_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::google_pilot() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_pilot)
  return google_pilot_ != NULL ? *google_pilot_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_google_pilot() {
  
  if (google_pilot_ == NULL) {
    google_pilot_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_pilot)
  return google_pilot_;
}
::zsearch::CTServerStatus* CTStatus::release_google_pilot() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_pilot)
  
  ::zsearch::CTServerStatus* temp = google_pilot_;
  google_pilot_ = NULL;
  return temp;
}
void CTStatus::set_allocated_google_pilot(::zsearch::CTServerStatus* google_pilot) {
  delete google_pilot_;
  google_pilot_ = google_pilot;
  if (google_pilot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_pilot)
}

// .zsearch.CTServerStatus google_rocketeer = 12;
bool CTStatus::has_google_rocketeer() const {
  return this != internal_default_instance() && google_rocketeer_ != NULL;
}
void CTStatus::clear_google_rocketeer() {
  if (GetArenaNoVirtual() == NULL && google_rocketeer_ != NULL) delete google_rocketeer_;
  google_rocketeer_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::google_rocketeer() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_rocketeer)
  return google_rocketeer_ != NULL ? *google_rocketeer_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_google_rocketeer() {
  
  if (google_rocketeer_ == NULL) {
    google_rocketeer_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_rocketeer)
  return google_rocketeer_;
}
::zsearch::CTServerStatus* CTStatus::release_google_rocketeer() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_rocketeer)
  
  ::zsearch::CTServerStatus* temp = google_rocketeer_;
  google_rocketeer_ = NULL;
  return temp;
}
void CTStatus::set_allocated_google_rocketeer(::zsearch::CTServerStatus* google_rocketeer) {
  delete google_rocketeer_;
  google_rocketeer_ = google_rocketeer;
  if (google_rocketeer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_rocketeer)
}

// .zsearch.CTServerStatus google_submariner = 13;
bool CTStatus::has_google_submariner() const {
  return this != internal_default_instance() && google_submariner_ != NULL;
}
void CTStatus::clear_google_submariner() {
  if (GetArenaNoVirtual() == NULL && google_submariner_ != NULL) delete google_submariner_;
  google_submariner_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::google_submariner() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_submariner)
  return google_submariner_ != NULL ? *google_submariner_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_google_submariner() {
  
  if (google_submariner_ == NULL) {
    google_submariner_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_submariner)
  return google_submariner_;
}
::zsearch::CTServerStatus* CTStatus::release_google_submariner() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_submariner)
  
  ::zsearch::CTServerStatus* temp = google_submariner_;
  google_submariner_ = NULL;
  return temp;
}
void CTStatus::set_allocated_google_submariner(::zsearch::CTServerStatus* google_submariner) {
  delete google_submariner_;
  google_submariner_ = google_submariner;
  if (google_submariner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_submariner)
}

// .zsearch.CTServerStatus google_testtube = 14;
bool CTStatus::has_google_testtube() const {
  return this != internal_default_instance() && google_testtube_ != NULL;
}
void CTStatus::clear_google_testtube() {
  if (GetArenaNoVirtual() == NULL && google_testtube_ != NULL) delete google_testtube_;
  google_testtube_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::google_testtube() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_testtube)
  return google_testtube_ != NULL ? *google_testtube_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_google_testtube() {
  
  if (google_testtube_ == NULL) {
    google_testtube_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_testtube)
  return google_testtube_;
}
::zsearch::CTServerStatus* CTStatus::release_google_testtube() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_testtube)
  
  ::zsearch::CTServerStatus* temp = google_testtube_;
  google_testtube_ = NULL;
  return temp;
}
void CTStatus::set_allocated_google_testtube(::zsearch::CTServerStatus* google_testtube) {
  delete google_testtube_;
  google_testtube_ = google_testtube;
  if (google_testtube) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_testtube)
}

// .zsearch.CTServerStatus google_icarus = 15;
bool CTStatus::has_google_icarus() const {
  return this != internal_default_instance() && google_icarus_ != NULL;
}
void CTStatus::clear_google_icarus() {
  if (GetArenaNoVirtual() == NULL && google_icarus_ != NULL) delete google_icarus_;
  google_icarus_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::google_icarus() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_icarus)
  return google_icarus_ != NULL ? *google_icarus_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_google_icarus() {
  
  if (google_icarus_ == NULL) {
    google_icarus_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_icarus)
  return google_icarus_;
}
::zsearch::CTServerStatus* CTStatus::release_google_icarus() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_icarus)
  
  ::zsearch::CTServerStatus* temp = google_icarus_;
  google_icarus_ = NULL;
  return temp;
}
void CTStatus::set_allocated_google_icarus(::zsearch::CTServerStatus* google_icarus) {
  delete google_icarus_;
  google_icarus_ = google_icarus;
  if (google_icarus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_icarus)
}

// .zsearch.CTServerStatus google_skydiver = 16;
bool CTStatus::has_google_skydiver() const {
  return this != internal_default_instance() && google_skydiver_ != NULL;
}
void CTStatus::clear_google_skydiver() {
  if (GetArenaNoVirtual() == NULL && google_skydiver_ != NULL) delete google_skydiver_;
  google_skydiver_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::google_skydiver() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_skydiver)
  return google_skydiver_ != NULL ? *google_skydiver_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_google_skydiver() {
  
  if (google_skydiver_ == NULL) {
    google_skydiver_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_skydiver)
  return google_skydiver_;
}
::zsearch::CTServerStatus* CTStatus::release_google_skydiver() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_skydiver)
  
  ::zsearch::CTServerStatus* temp = google_skydiver_;
  google_skydiver_ = NULL;
  return temp;
}
void CTStatus::set_allocated_google_skydiver(::zsearch::CTServerStatus* google_skydiver) {
  delete google_skydiver_;
  google_skydiver_ = google_skydiver;
  if (google_skydiver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_skydiver)
}

// .zsearch.CTServerStatus google_daedalus = 17;
bool CTStatus::has_google_daedalus() const {
  return this != internal_default_instance() && google_daedalus_ != NULL;
}
void CTStatus::clear_google_daedalus() {
  if (GetArenaNoVirtual() == NULL && google_daedalus_ != NULL) delete google_daedalus_;
  google_daedalus_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::google_daedalus() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_daedalus)
  return google_daedalus_ != NULL ? *google_daedalus_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_google_daedalus() {
  
  if (google_daedalus_ == NULL) {
    google_daedalus_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_daedalus)
  return google_daedalus_;
}
::zsearch::CTServerStatus* CTStatus::release_google_daedalus() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_daedalus)
  
  ::zsearch::CTServerStatus* temp = google_daedalus_;
  google_daedalus_ = NULL;
  return temp;
}
void CTStatus::set_allocated_google_daedalus(::zsearch::CTServerStatus* google_daedalus) {
  delete google_daedalus_;
  google_daedalus_ = google_daedalus;
  if (google_daedalus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_daedalus)
}

// .zsearch.CTServerStatus google_argon_2017 = 50;
bool CTStatus::has_google_argon_2017() const {
  return this != internal_default_instance() && google_argon_2017_ != NULL;
}
void CTStatus::clear_google_argon_2017() {
  if (GetArenaNoVirtual() == NULL && google_argon_2017_ != NULL) delete google_argon_2017_;
  google_argon_2017_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::google_argon_2017() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_argon_2017)
  return google_argon_2017_ != NULL ? *google_argon_2017_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_google_argon_2017() {
  
  if (google_argon_2017_ == NULL) {
    google_argon_2017_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_argon_2017)
  return google_argon_2017_;
}
::zsearch::CTServerStatus* CTStatus::release_google_argon_2017() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_argon_2017)
  
  ::zsearch::CTServerStatus* temp = google_argon_2017_;
  google_argon_2017_ = NULL;
  return temp;
}
void CTStatus::set_allocated_google_argon_2017(::zsearch::CTServerStatus* google_argon_2017) {
  delete google_argon_2017_;
  google_argon_2017_ = google_argon_2017;
  if (google_argon_2017) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_argon_2017)
}

// .zsearch.CTServerStatus google_argon_2018 = 51;
bool CTStatus::has_google_argon_2018() const {
  return this != internal_default_instance() && google_argon_2018_ != NULL;
}
void CTStatus::clear_google_argon_2018() {
  if (GetArenaNoVirtual() == NULL && google_argon_2018_ != NULL) delete google_argon_2018_;
  google_argon_2018_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::google_argon_2018() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_argon_2018)
  return google_argon_2018_ != NULL ? *google_argon_2018_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_google_argon_2018() {
  
  if (google_argon_2018_ == NULL) {
    google_argon_2018_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_argon_2018)
  return google_argon_2018_;
}
::zsearch::CTServerStatus* CTStatus::release_google_argon_2018() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_argon_2018)
  
  ::zsearch::CTServerStatus* temp = google_argon_2018_;
  google_argon_2018_ = NULL;
  return temp;
}
void CTStatus::set_allocated_google_argon_2018(::zsearch::CTServerStatus* google_argon_2018) {
  delete google_argon_2018_;
  google_argon_2018_ = google_argon_2018;
  if (google_argon_2018) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_argon_2018)
}

// .zsearch.CTServerStatus google_argon_2019 = 52;
bool CTStatus::has_google_argon_2019() const {
  return this != internal_default_instance() && google_argon_2019_ != NULL;
}
void CTStatus::clear_google_argon_2019() {
  if (GetArenaNoVirtual() == NULL && google_argon_2019_ != NULL) delete google_argon_2019_;
  google_argon_2019_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::google_argon_2019() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_argon_2019)
  return google_argon_2019_ != NULL ? *google_argon_2019_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_google_argon_2019() {
  
  if (google_argon_2019_ == NULL) {
    google_argon_2019_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_argon_2019)
  return google_argon_2019_;
}
::zsearch::CTServerStatus* CTStatus::release_google_argon_2019() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_argon_2019)
  
  ::zsearch::CTServerStatus* temp = google_argon_2019_;
  google_argon_2019_ = NULL;
  return temp;
}
void CTStatus::set_allocated_google_argon_2019(::zsearch::CTServerStatus* google_argon_2019) {
  delete google_argon_2019_;
  google_argon_2019_ = google_argon_2019;
  if (google_argon_2019) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_argon_2019)
}

// .zsearch.CTServerStatus google_argon_2020 = 53;
bool CTStatus::has_google_argon_2020() const {
  return this != internal_default_instance() && google_argon_2020_ != NULL;
}
void CTStatus::clear_google_argon_2020() {
  if (GetArenaNoVirtual() == NULL && google_argon_2020_ != NULL) delete google_argon_2020_;
  google_argon_2020_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::google_argon_2020() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_argon_2020)
  return google_argon_2020_ != NULL ? *google_argon_2020_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_google_argon_2020() {
  
  if (google_argon_2020_ == NULL) {
    google_argon_2020_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_argon_2020)
  return google_argon_2020_;
}
::zsearch::CTServerStatus* CTStatus::release_google_argon_2020() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_argon_2020)
  
  ::zsearch::CTServerStatus* temp = google_argon_2020_;
  google_argon_2020_ = NULL;
  return temp;
}
void CTStatus::set_allocated_google_argon_2020(::zsearch::CTServerStatus* google_argon_2020) {
  delete google_argon_2020_;
  google_argon_2020_ = google_argon_2020;
  if (google_argon_2020) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_argon_2020)
}

// .zsearch.CTServerStatus google_argon_2021 = 54;
bool CTStatus::has_google_argon_2021() const {
  return this != internal_default_instance() && google_argon_2021_ != NULL;
}
void CTStatus::clear_google_argon_2021() {
  if (GetArenaNoVirtual() == NULL && google_argon_2021_ != NULL) delete google_argon_2021_;
  google_argon_2021_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::google_argon_2021() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_argon_2021)
  return google_argon_2021_ != NULL ? *google_argon_2021_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_google_argon_2021() {
  
  if (google_argon_2021_ == NULL) {
    google_argon_2021_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_argon_2021)
  return google_argon_2021_;
}
::zsearch::CTServerStatus* CTStatus::release_google_argon_2021() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_argon_2021)
  
  ::zsearch::CTServerStatus* temp = google_argon_2021_;
  google_argon_2021_ = NULL;
  return temp;
}
void CTStatus::set_allocated_google_argon_2021(::zsearch::CTServerStatus* google_argon_2021) {
  delete google_argon_2021_;
  google_argon_2021_ = google_argon_2021;
  if (google_argon_2021) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_argon_2021)
}

// .zsearch.CTServerStatus cloudflare_nimbus_2017 = 60;
bool CTStatus::has_cloudflare_nimbus_2017() const {
  return this != internal_default_instance() && cloudflare_nimbus_2017_ != NULL;
}
void CTStatus::clear_cloudflare_nimbus_2017() {
  if (GetArenaNoVirtual() == NULL && cloudflare_nimbus_2017_ != NULL) delete cloudflare_nimbus_2017_;
  cloudflare_nimbus_2017_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::cloudflare_nimbus_2017() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.cloudflare_nimbus_2017)
  return cloudflare_nimbus_2017_ != NULL ? *cloudflare_nimbus_2017_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_cloudflare_nimbus_2017() {
  
  if (cloudflare_nimbus_2017_ == NULL) {
    cloudflare_nimbus_2017_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.cloudflare_nimbus_2017)
  return cloudflare_nimbus_2017_;
}
::zsearch::CTServerStatus* CTStatus::release_cloudflare_nimbus_2017() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.cloudflare_nimbus_2017)
  
  ::zsearch::CTServerStatus* temp = cloudflare_nimbus_2017_;
  cloudflare_nimbus_2017_ = NULL;
  return temp;
}
void CTStatus::set_allocated_cloudflare_nimbus_2017(::zsearch::CTServerStatus* cloudflare_nimbus_2017) {
  delete cloudflare_nimbus_2017_;
  cloudflare_nimbus_2017_ = cloudflare_nimbus_2017;
  if (cloudflare_nimbus_2017) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.cloudflare_nimbus_2017)
}

// .zsearch.CTServerStatus cloudflare_nimbus_2018 = 61;
bool CTStatus::has_cloudflare_nimbus_2018() const {
  return this != internal_default_instance() && cloudflare_nimbus_2018_ != NULL;
}
void CTStatus::clear_cloudflare_nimbus_2018() {
  if (GetArenaNoVirtual() == NULL && cloudflare_nimbus_2018_ != NULL) delete cloudflare_nimbus_2018_;
  cloudflare_nimbus_2018_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::cloudflare_nimbus_2018() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.cloudflare_nimbus_2018)
  return cloudflare_nimbus_2018_ != NULL ? *cloudflare_nimbus_2018_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_cloudflare_nimbus_2018() {
  
  if (cloudflare_nimbus_2018_ == NULL) {
    cloudflare_nimbus_2018_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.cloudflare_nimbus_2018)
  return cloudflare_nimbus_2018_;
}
::zsearch::CTServerStatus* CTStatus::release_cloudflare_nimbus_2018() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.cloudflare_nimbus_2018)
  
  ::zsearch::CTServerStatus* temp = cloudflare_nimbus_2018_;
  cloudflare_nimbus_2018_ = NULL;
  return temp;
}
void CTStatus::set_allocated_cloudflare_nimbus_2018(::zsearch::CTServerStatus* cloudflare_nimbus_2018) {
  delete cloudflare_nimbus_2018_;
  cloudflare_nimbus_2018_ = cloudflare_nimbus_2018;
  if (cloudflare_nimbus_2018) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.cloudflare_nimbus_2018)
}

// .zsearch.CTServerStatus cloudflare_nimbus_2019 = 62;
bool CTStatus::has_cloudflare_nimbus_2019() const {
  return this != internal_default_instance() && cloudflare_nimbus_2019_ != NULL;
}
void CTStatus::clear_cloudflare_nimbus_2019() {
  if (GetArenaNoVirtual() == NULL && cloudflare_nimbus_2019_ != NULL) delete cloudflare_nimbus_2019_;
  cloudflare_nimbus_2019_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::cloudflare_nimbus_2019() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.cloudflare_nimbus_2019)
  return cloudflare_nimbus_2019_ != NULL ? *cloudflare_nimbus_2019_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_cloudflare_nimbus_2019() {
  
  if (cloudflare_nimbus_2019_ == NULL) {
    cloudflare_nimbus_2019_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.cloudflare_nimbus_2019)
  return cloudflare_nimbus_2019_;
}
::zsearch::CTServerStatus* CTStatus::release_cloudflare_nimbus_2019() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.cloudflare_nimbus_2019)
  
  ::zsearch::CTServerStatus* temp = cloudflare_nimbus_2019_;
  cloudflare_nimbus_2019_ = NULL;
  return temp;
}
void CTStatus::set_allocated_cloudflare_nimbus_2019(::zsearch::CTServerStatus* cloudflare_nimbus_2019) {
  delete cloudflare_nimbus_2019_;
  cloudflare_nimbus_2019_ = cloudflare_nimbus_2019;
  if (cloudflare_nimbus_2019) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.cloudflare_nimbus_2019)
}

// .zsearch.CTServerStatus cloudflare_nimbus_2020 = 63;
bool CTStatus::has_cloudflare_nimbus_2020() const {
  return this != internal_default_instance() && cloudflare_nimbus_2020_ != NULL;
}
void CTStatus::clear_cloudflare_nimbus_2020() {
  if (GetArenaNoVirtual() == NULL && cloudflare_nimbus_2020_ != NULL) delete cloudflare_nimbus_2020_;
  cloudflare_nimbus_2020_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::cloudflare_nimbus_2020() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.cloudflare_nimbus_2020)
  return cloudflare_nimbus_2020_ != NULL ? *cloudflare_nimbus_2020_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_cloudflare_nimbus_2020() {
  
  if (cloudflare_nimbus_2020_ == NULL) {
    cloudflare_nimbus_2020_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.cloudflare_nimbus_2020)
  return cloudflare_nimbus_2020_;
}
::zsearch::CTServerStatus* CTStatus::release_cloudflare_nimbus_2020() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.cloudflare_nimbus_2020)
  
  ::zsearch::CTServerStatus* temp = cloudflare_nimbus_2020_;
  cloudflare_nimbus_2020_ = NULL;
  return temp;
}
void CTStatus::set_allocated_cloudflare_nimbus_2020(::zsearch::CTServerStatus* cloudflare_nimbus_2020) {
  delete cloudflare_nimbus_2020_;
  cloudflare_nimbus_2020_ = cloudflare_nimbus_2020;
  if (cloudflare_nimbus_2020) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.cloudflare_nimbus_2020)
}

// .zsearch.CTServerStatus cloudflare_nimbus_2021 = 64;
bool CTStatus::has_cloudflare_nimbus_2021() const {
  return this != internal_default_instance() && cloudflare_nimbus_2021_ != NULL;
}
void CTStatus::clear_cloudflare_nimbus_2021() {
  if (GetArenaNoVirtual() == NULL && cloudflare_nimbus_2021_ != NULL) delete cloudflare_nimbus_2021_;
  cloudflare_nimbus_2021_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::cloudflare_nimbus_2021() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.cloudflare_nimbus_2021)
  return cloudflare_nimbus_2021_ != NULL ? *cloudflare_nimbus_2021_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_cloudflare_nimbus_2021() {
  
  if (cloudflare_nimbus_2021_ == NULL) {
    cloudflare_nimbus_2021_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.cloudflare_nimbus_2021)
  return cloudflare_nimbus_2021_;
}
::zsearch::CTServerStatus* CTStatus::release_cloudflare_nimbus_2021() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.cloudflare_nimbus_2021)
  
  ::zsearch::CTServerStatus* temp = cloudflare_nimbus_2021_;
  cloudflare_nimbus_2021_ = NULL;
  return temp;
}
void CTStatus::set_allocated_cloudflare_nimbus_2021(::zsearch::CTServerStatus* cloudflare_nimbus_2021) {
  delete cloudflare_nimbus_2021_;
  cloudflare_nimbus_2021_ = cloudflare_nimbus_2021;
  if (cloudflare_nimbus_2021) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.cloudflare_nimbus_2021)
}

// .zsearch.CTServerStatus digicert_ct1 = 20;
bool CTStatus::has_digicert_ct1() const {
  return this != internal_default_instance() && digicert_ct1_ != NULL;
}
void CTStatus::clear_digicert_ct1() {
  if (GetArenaNoVirtual() == NULL && digicert_ct1_ != NULL) delete digicert_ct1_;
  digicert_ct1_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::digicert_ct1() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.digicert_ct1)
  return digicert_ct1_ != NULL ? *digicert_ct1_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_digicert_ct1() {
  
  if (digicert_ct1_ == NULL) {
    digicert_ct1_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.digicert_ct1)
  return digicert_ct1_;
}
::zsearch::CTServerStatus* CTStatus::release_digicert_ct1() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.digicert_ct1)
  
  ::zsearch::CTServerStatus* temp = digicert_ct1_;
  digicert_ct1_ = NULL;
  return temp;
}
void CTStatus::set_allocated_digicert_ct1(::zsearch::CTServerStatus* digicert_ct1) {
  delete digicert_ct1_;
  digicert_ct1_ = digicert_ct1;
  if (digicert_ct1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.digicert_ct1)
}

// .zsearch.CTServerStatus digicert_ct2 = 40;
bool CTStatus::has_digicert_ct2() const {
  return this != internal_default_instance() && digicert_ct2_ != NULL;
}
void CTStatus::clear_digicert_ct2() {
  if (GetArenaNoVirtual() == NULL && digicert_ct2_ != NULL) delete digicert_ct2_;
  digicert_ct2_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::digicert_ct2() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.digicert_ct2)
  return digicert_ct2_ != NULL ? *digicert_ct2_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_digicert_ct2() {
  
  if (digicert_ct2_ == NULL) {
    digicert_ct2_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.digicert_ct2)
  return digicert_ct2_;
}
::zsearch::CTServerStatus* CTStatus::release_digicert_ct2() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.digicert_ct2)
  
  ::zsearch::CTServerStatus* temp = digicert_ct2_;
  digicert_ct2_ = NULL;
  return temp;
}
void CTStatus::set_allocated_digicert_ct2(::zsearch::CTServerStatus* digicert_ct2) {
  delete digicert_ct2_;
  digicert_ct2_ = digicert_ct2;
  if (digicert_ct2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.digicert_ct2)
}

// .zsearch.CTServerStatus izenpe_com_ct = 21;
bool CTStatus::has_izenpe_com_ct() const {
  return this != internal_default_instance() && izenpe_com_ct_ != NULL;
}
void CTStatus::clear_izenpe_com_ct() {
  if (GetArenaNoVirtual() == NULL && izenpe_com_ct_ != NULL) delete izenpe_com_ct_;
  izenpe_com_ct_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::izenpe_com_ct() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.izenpe_com_ct)
  return izenpe_com_ct_ != NULL ? *izenpe_com_ct_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_izenpe_com_ct() {
  
  if (izenpe_com_ct_ == NULL) {
    izenpe_com_ct_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.izenpe_com_ct)
  return izenpe_com_ct_;
}
::zsearch::CTServerStatus* CTStatus::release_izenpe_com_ct() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.izenpe_com_ct)
  
  ::zsearch::CTServerStatus* temp = izenpe_com_ct_;
  izenpe_com_ct_ = NULL;
  return temp;
}
void CTStatus::set_allocated_izenpe_com_ct(::zsearch::CTServerStatus* izenpe_com_ct) {
  delete izenpe_com_ct_;
  izenpe_com_ct_ = izenpe_com_ct;
  if (izenpe_com_ct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.izenpe_com_ct)
}

// .zsearch.CTServerStatus izenpe_eus_ct = 22;
bool CTStatus::has_izenpe_eus_ct() const {
  return this != internal_default_instance() && izenpe_eus_ct_ != NULL;
}
void CTStatus::clear_izenpe_eus_ct() {
  if (GetArenaNoVirtual() == NULL && izenpe_eus_ct_ != NULL) delete izenpe_eus_ct_;
  izenpe_eus_ct_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::izenpe_eus_ct() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.izenpe_eus_ct)
  return izenpe_eus_ct_ != NULL ? *izenpe_eus_ct_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_izenpe_eus_ct() {
  
  if (izenpe_eus_ct_ == NULL) {
    izenpe_eus_ct_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.izenpe_eus_ct)
  return izenpe_eus_ct_;
}
::zsearch::CTServerStatus* CTStatus::release_izenpe_eus_ct() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.izenpe_eus_ct)
  
  ::zsearch::CTServerStatus* temp = izenpe_eus_ct_;
  izenpe_eus_ct_ = NULL;
  return temp;
}
void CTStatus::set_allocated_izenpe_eus_ct(::zsearch::CTServerStatus* izenpe_eus_ct) {
  delete izenpe_eus_ct_;
  izenpe_eus_ct_ = izenpe_eus_ct;
  if (izenpe_eus_ct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.izenpe_eus_ct)
}

// .zsearch.CTServerStatus symantec_ws_ct = 23;
bool CTStatus::has_symantec_ws_ct() const {
  return this != internal_default_instance() && symantec_ws_ct_ != NULL;
}
void CTStatus::clear_symantec_ws_ct() {
  if (GetArenaNoVirtual() == NULL && symantec_ws_ct_ != NULL) delete symantec_ws_ct_;
  symantec_ws_ct_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::symantec_ws_ct() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.symantec_ws_ct)
  return symantec_ws_ct_ != NULL ? *symantec_ws_ct_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_symantec_ws_ct() {
  
  if (symantec_ws_ct_ == NULL) {
    symantec_ws_ct_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.symantec_ws_ct)
  return symantec_ws_ct_;
}
::zsearch::CTServerStatus* CTStatus::release_symantec_ws_ct() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.symantec_ws_ct)
  
  ::zsearch::CTServerStatus* temp = symantec_ws_ct_;
  symantec_ws_ct_ = NULL;
  return temp;
}
void CTStatus::set_allocated_symantec_ws_ct(::zsearch::CTServerStatus* symantec_ws_ct) {
  delete symantec_ws_ct_;
  symantec_ws_ct_ = symantec_ws_ct;
  if (symantec_ws_ct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.symantec_ws_ct)
}

// .zsearch.CTServerStatus symantec_ws_vega = 24;
bool CTStatus::has_symantec_ws_vega() const {
  return this != internal_default_instance() && symantec_ws_vega_ != NULL;
}
void CTStatus::clear_symantec_ws_vega() {
  if (GetArenaNoVirtual() == NULL && symantec_ws_vega_ != NULL) delete symantec_ws_vega_;
  symantec_ws_vega_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::symantec_ws_vega() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.symantec_ws_vega)
  return symantec_ws_vega_ != NULL ? *symantec_ws_vega_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_symantec_ws_vega() {
  
  if (symantec_ws_vega_ == NULL) {
    symantec_ws_vega_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.symantec_ws_vega)
  return symantec_ws_vega_;
}
::zsearch::CTServerStatus* CTStatus::release_symantec_ws_vega() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.symantec_ws_vega)
  
  ::zsearch::CTServerStatus* temp = symantec_ws_vega_;
  symantec_ws_vega_ = NULL;
  return temp;
}
void CTStatus::set_allocated_symantec_ws_vega(::zsearch::CTServerStatus* symantec_ws_vega) {
  delete symantec_ws_vega_;
  symantec_ws_vega_ = symantec_ws_vega;
  if (symantec_ws_vega) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.symantec_ws_vega)
}

// .zsearch.CTServerStatus symantec_ws_sirius = 37;
bool CTStatus::has_symantec_ws_sirius() const {
  return this != internal_default_instance() && symantec_ws_sirius_ != NULL;
}
void CTStatus::clear_symantec_ws_sirius() {
  if (GetArenaNoVirtual() == NULL && symantec_ws_sirius_ != NULL) delete symantec_ws_sirius_;
  symantec_ws_sirius_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::symantec_ws_sirius() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.symantec_ws_sirius)
  return symantec_ws_sirius_ != NULL ? *symantec_ws_sirius_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_symantec_ws_sirius() {
  
  if (symantec_ws_sirius_ == NULL) {
    symantec_ws_sirius_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.symantec_ws_sirius)
  return symantec_ws_sirius_;
}
::zsearch::CTServerStatus* CTStatus::release_symantec_ws_sirius() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.symantec_ws_sirius)
  
  ::zsearch::CTServerStatus* temp = symantec_ws_sirius_;
  symantec_ws_sirius_ = NULL;
  return temp;
}
void CTStatus::set_allocated_symantec_ws_sirius(::zsearch::CTServerStatus* symantec_ws_sirius) {
  delete symantec_ws_sirius_;
  symantec_ws_sirius_ = symantec_ws_sirius;
  if (symantec_ws_sirius) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.symantec_ws_sirius)
}

// .zsearch.CTServerStatus symantec_ws_deneb = 32;
bool CTStatus::has_symantec_ws_deneb() const {
  return this != internal_default_instance() && symantec_ws_deneb_ != NULL;
}
void CTStatus::clear_symantec_ws_deneb() {
  if (GetArenaNoVirtual() == NULL && symantec_ws_deneb_ != NULL) delete symantec_ws_deneb_;
  symantec_ws_deneb_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::symantec_ws_deneb() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.symantec_ws_deneb)
  return symantec_ws_deneb_ != NULL ? *symantec_ws_deneb_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_symantec_ws_deneb() {
  
  if (symantec_ws_deneb_ == NULL) {
    symantec_ws_deneb_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.symantec_ws_deneb)
  return symantec_ws_deneb_;
}
::zsearch::CTServerStatus* CTStatus::release_symantec_ws_deneb() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.symantec_ws_deneb)
  
  ::zsearch::CTServerStatus* temp = symantec_ws_deneb_;
  symantec_ws_deneb_ = NULL;
  return temp;
}
void CTStatus::set_allocated_symantec_ws_deneb(::zsearch::CTServerStatus* symantec_ws_deneb) {
  delete symantec_ws_deneb_;
  symantec_ws_deneb_ = symantec_ws_deneb;
  if (symantec_ws_deneb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.symantec_ws_deneb)
}

// .zsearch.CTServerStatus comodo_dodo = 34;
bool CTStatus::has_comodo_dodo() const {
  return this != internal_default_instance() && comodo_dodo_ != NULL;
}
void CTStatus::clear_comodo_dodo() {
  if (GetArenaNoVirtual() == NULL && comodo_dodo_ != NULL) delete comodo_dodo_;
  comodo_dodo_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::comodo_dodo() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.comodo_dodo)
  return comodo_dodo_ != NULL ? *comodo_dodo_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_comodo_dodo() {
  
  if (comodo_dodo_ == NULL) {
    comodo_dodo_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.comodo_dodo)
  return comodo_dodo_;
}
::zsearch::CTServerStatus* CTStatus::release_comodo_dodo() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.comodo_dodo)
  
  ::zsearch::CTServerStatus* temp = comodo_dodo_;
  comodo_dodo_ = NULL;
  return temp;
}
void CTStatus::set_allocated_comodo_dodo(::zsearch::CTServerStatus* comodo_dodo) {
  delete comodo_dodo_;
  comodo_dodo_ = comodo_dodo;
  if (comodo_dodo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.comodo_dodo)
}

// .zsearch.CTServerStatus comodo_mammoth = 35;
bool CTStatus::has_comodo_mammoth() const {
  return this != internal_default_instance() && comodo_mammoth_ != NULL;
}
void CTStatus::clear_comodo_mammoth() {
  if (GetArenaNoVirtual() == NULL && comodo_mammoth_ != NULL) delete comodo_mammoth_;
  comodo_mammoth_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::comodo_mammoth() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.comodo_mammoth)
  return comodo_mammoth_ != NULL ? *comodo_mammoth_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_comodo_mammoth() {
  
  if (comodo_mammoth_ == NULL) {
    comodo_mammoth_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.comodo_mammoth)
  return comodo_mammoth_;
}
::zsearch::CTServerStatus* CTStatus::release_comodo_mammoth() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.comodo_mammoth)
  
  ::zsearch::CTServerStatus* temp = comodo_mammoth_;
  comodo_mammoth_ = NULL;
  return temp;
}
void CTStatus::set_allocated_comodo_mammoth(::zsearch::CTServerStatus* comodo_mammoth) {
  delete comodo_mammoth_;
  comodo_mammoth_ = comodo_mammoth;
  if (comodo_mammoth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.comodo_mammoth)
}

// .zsearch.CTServerStatus comodo_sabre = 41;
bool CTStatus::has_comodo_sabre() const {
  return this != internal_default_instance() && comodo_sabre_ != NULL;
}
void CTStatus::clear_comodo_sabre() {
  if (GetArenaNoVirtual() == NULL && comodo_sabre_ != NULL) delete comodo_sabre_;
  comodo_sabre_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::comodo_sabre() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.comodo_sabre)
  return comodo_sabre_ != NULL ? *comodo_sabre_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_comodo_sabre() {
  
  if (comodo_sabre_ == NULL) {
    comodo_sabre_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.comodo_sabre)
  return comodo_sabre_;
}
::zsearch::CTServerStatus* CTStatus::release_comodo_sabre() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.comodo_sabre)
  
  ::zsearch::CTServerStatus* temp = comodo_sabre_;
  comodo_sabre_ = NULL;
  return temp;
}
void CTStatus::set_allocated_comodo_sabre(::zsearch::CTServerStatus* comodo_sabre) {
  delete comodo_sabre_;
  comodo_sabre_ = comodo_sabre;
  if (comodo_sabre) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.comodo_sabre)
}

// .zsearch.CTServerStatus wosign_ctlog = 25;
bool CTStatus::has_wosign_ctlog() const {
  return this != internal_default_instance() && wosign_ctlog_ != NULL;
}
void CTStatus::clear_wosign_ctlog() {
  if (GetArenaNoVirtual() == NULL && wosign_ctlog_ != NULL) delete wosign_ctlog_;
  wosign_ctlog_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::wosign_ctlog() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.wosign_ctlog)
  return wosign_ctlog_ != NULL ? *wosign_ctlog_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_wosign_ctlog() {
  
  if (wosign_ctlog_ == NULL) {
    wosign_ctlog_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.wosign_ctlog)
  return wosign_ctlog_;
}
::zsearch::CTServerStatus* CTStatus::release_wosign_ctlog() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.wosign_ctlog)
  
  ::zsearch::CTServerStatus* temp = wosign_ctlog_;
  wosign_ctlog_ = NULL;
  return temp;
}
void CTStatus::set_allocated_wosign_ctlog(::zsearch::CTServerStatus* wosign_ctlog) {
  delete wosign_ctlog_;
  wosign_ctlog_ = wosign_ctlog;
  if (wosign_ctlog) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.wosign_ctlog)
}

// .zsearch.CTServerStatus wosign_ct = 26;
bool CTStatus::has_wosign_ct() const {
  return this != internal_default_instance() && wosign_ct_ != NULL;
}
void CTStatus::clear_wosign_ct() {
  if (GetArenaNoVirtual() == NULL && wosign_ct_ != NULL) delete wosign_ct_;
  wosign_ct_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::wosign_ct() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.wosign_ct)
  return wosign_ct_ != NULL ? *wosign_ct_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_wosign_ct() {
  
  if (wosign_ct_ == NULL) {
    wosign_ct_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.wosign_ct)
  return wosign_ct_;
}
::zsearch::CTServerStatus* CTStatus::release_wosign_ct() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.wosign_ct)
  
  ::zsearch::CTServerStatus* temp = wosign_ct_;
  wosign_ct_ = NULL;
  return temp;
}
void CTStatus::set_allocated_wosign_ct(::zsearch::CTServerStatus* wosign_ct) {
  delete wosign_ct_;
  wosign_ct_ = wosign_ct;
  if (wosign_ct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.wosign_ct)
}

// .zsearch.CTServerStatus wotrus_ctlog = 47;
bool CTStatus::has_wotrus_ctlog() const {
  return this != internal_default_instance() && wotrus_ctlog_ != NULL;
}
void CTStatus::clear_wotrus_ctlog() {
  if (GetArenaNoVirtual() == NULL && wotrus_ctlog_ != NULL) delete wotrus_ctlog_;
  wotrus_ctlog_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::wotrus_ctlog() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.wotrus_ctlog)
  return wotrus_ctlog_ != NULL ? *wotrus_ctlog_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_wotrus_ctlog() {
  
  if (wotrus_ctlog_ == NULL) {
    wotrus_ctlog_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.wotrus_ctlog)
  return wotrus_ctlog_;
}
::zsearch::CTServerStatus* CTStatus::release_wotrus_ctlog() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.wotrus_ctlog)
  
  ::zsearch::CTServerStatus* temp = wotrus_ctlog_;
  wotrus_ctlog_ = NULL;
  return temp;
}
void CTStatus::set_allocated_wotrus_ctlog(::zsearch::CTServerStatus* wotrus_ctlog) {
  delete wotrus_ctlog_;
  wotrus_ctlog_ = wotrus_ctlog;
  if (wotrus_ctlog) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.wotrus_ctlog)
}

// .zsearch.CTServerStatus wotrus_ctlog3 = 48;
bool CTStatus::has_wotrus_ctlog3() const {
  return this != internal_default_instance() && wotrus_ctlog3_ != NULL;
}
void CTStatus::clear_wotrus_ctlog3() {
  if (GetArenaNoVirtual() == NULL && wotrus_ctlog3_ != NULL) delete wotrus_ctlog3_;
  wotrus_ctlog3_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::wotrus_ctlog3() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.wotrus_ctlog3)
  return wotrus_ctlog3_ != NULL ? *wotrus_ctlog3_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_wotrus_ctlog3() {
  
  if (wotrus_ctlog3_ == NULL) {
    wotrus_ctlog3_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.wotrus_ctlog3)
  return wotrus_ctlog3_;
}
::zsearch::CTServerStatus* CTStatus::release_wotrus_ctlog3() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.wotrus_ctlog3)
  
  ::zsearch::CTServerStatus* temp = wotrus_ctlog3_;
  wotrus_ctlog3_ = NULL;
  return temp;
}
void CTStatus::set_allocated_wotrus_ctlog3(::zsearch::CTServerStatus* wotrus_ctlog3) {
  delete wotrus_ctlog3_;
  wotrus_ctlog3_ = wotrus_ctlog3;
  if (wotrus_ctlog3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.wotrus_ctlog3)
}

// .zsearch.CTServerStatus gdca_ct = 28;
bool CTStatus::has_gdca_ct() const {
  return this != internal_default_instance() && gdca_ct_ != NULL;
}
void CTStatus::clear_gdca_ct() {
  if (GetArenaNoVirtual() == NULL && gdca_ct_ != NULL) delete gdca_ct_;
  gdca_ct_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::gdca_ct() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.gdca_ct)
  return gdca_ct_ != NULL ? *gdca_ct_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_gdca_ct() {
  
  if (gdca_ct_ == NULL) {
    gdca_ct_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.gdca_ct)
  return gdca_ct_;
}
::zsearch::CTServerStatus* CTStatus::release_gdca_ct() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.gdca_ct)
  
  ::zsearch::CTServerStatus* temp = gdca_ct_;
  gdca_ct_ = NULL;
  return temp;
}
void CTStatus::set_allocated_gdca_ct(::zsearch::CTServerStatus* gdca_ct) {
  delete gdca_ct_;
  gdca_ct_ = gdca_ct;
  if (gdca_ct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.gdca_ct)
}

// .zsearch.CTServerStatus gdca_ctlog = 36;
bool CTStatus::has_gdca_ctlog() const {
  return this != internal_default_instance() && gdca_ctlog_ != NULL;
}
void CTStatus::clear_gdca_ctlog() {
  if (GetArenaNoVirtual() == NULL && gdca_ctlog_ != NULL) delete gdca_ctlog_;
  gdca_ctlog_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::gdca_ctlog() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.gdca_ctlog)
  return gdca_ctlog_ != NULL ? *gdca_ctlog_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_gdca_ctlog() {
  
  if (gdca_ctlog_ == NULL) {
    gdca_ctlog_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.gdca_ctlog)
  return gdca_ctlog_;
}
::zsearch::CTServerStatus* CTStatus::release_gdca_ctlog() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.gdca_ctlog)
  
  ::zsearch::CTServerStatus* temp = gdca_ctlog_;
  gdca_ctlog_ = NULL;
  return temp;
}
void CTStatus::set_allocated_gdca_ctlog(::zsearch::CTServerStatus* gdca_ctlog) {
  delete gdca_ctlog_;
  gdca_ctlog_ = gdca_ctlog;
  if (gdca_ctlog) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.gdca_ctlog)
}

// .zsearch.CTServerStatus gdca_log = 45;
bool CTStatus::has_gdca_log() const {
  return this != internal_default_instance() && gdca_log_ != NULL;
}
void CTStatus::clear_gdca_log() {
  if (GetArenaNoVirtual() == NULL && gdca_log_ != NULL) delete gdca_log_;
  gdca_log_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::gdca_log() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.gdca_log)
  return gdca_log_ != NULL ? *gdca_log_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_gdca_log() {
  
  if (gdca_log_ == NULL) {
    gdca_log_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.gdca_log)
  return gdca_log_;
}
::zsearch::CTServerStatus* CTStatus::release_gdca_log() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.gdca_log)
  
  ::zsearch::CTServerStatus* temp = gdca_log_;
  gdca_log_ = NULL;
  return temp;
}
void CTStatus::set_allocated_gdca_log(::zsearch::CTServerStatus* gdca_log) {
  delete gdca_log_;
  gdca_log_ = gdca_log;
  if (gdca_log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.gdca_log)
}

// .zsearch.CTServerStatus gdca_log2 = 46;
bool CTStatus::has_gdca_log2() const {
  return this != internal_default_instance() && gdca_log2_ != NULL;
}
void CTStatus::clear_gdca_log2() {
  if (GetArenaNoVirtual() == NULL && gdca_log2_ != NULL) delete gdca_log2_;
  gdca_log2_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::gdca_log2() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.gdca_log2)
  return gdca_log2_ != NULL ? *gdca_log2_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_gdca_log2() {
  
  if (gdca_log2_ == NULL) {
    gdca_log2_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.gdca_log2)
  return gdca_log2_;
}
::zsearch::CTServerStatus* CTStatus::release_gdca_log2() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.gdca_log2)
  
  ::zsearch::CTServerStatus* temp = gdca_log2_;
  gdca_log2_ = NULL;
  return temp;
}
void CTStatus::set_allocated_gdca_log2(::zsearch::CTServerStatus* gdca_log2) {
  delete gdca_log2_;
  gdca_log2_ = gdca_log2;
  if (gdca_log2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.gdca_log2)
}

// .zsearch.CTServerStatus venafi_api_ctlog = 31;
bool CTStatus::has_venafi_api_ctlog() const {
  return this != internal_default_instance() && venafi_api_ctlog_ != NULL;
}
void CTStatus::clear_venafi_api_ctlog() {
  if (GetArenaNoVirtual() == NULL && venafi_api_ctlog_ != NULL) delete venafi_api_ctlog_;
  venafi_api_ctlog_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::venafi_api_ctlog() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.venafi_api_ctlog)
  return venafi_api_ctlog_ != NULL ? *venafi_api_ctlog_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_venafi_api_ctlog() {
  
  if (venafi_api_ctlog_ == NULL) {
    venafi_api_ctlog_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.venafi_api_ctlog)
  return venafi_api_ctlog_;
}
::zsearch::CTServerStatus* CTStatus::release_venafi_api_ctlog() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.venafi_api_ctlog)
  
  ::zsearch::CTServerStatus* temp = venafi_api_ctlog_;
  venafi_api_ctlog_ = NULL;
  return temp;
}
void CTStatus::set_allocated_venafi_api_ctlog(::zsearch::CTServerStatus* venafi_api_ctlog) {
  delete venafi_api_ctlog_;
  venafi_api_ctlog_ = venafi_api_ctlog;
  if (venafi_api_ctlog) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.venafi_api_ctlog)
}

// .zsearch.CTServerStatus venafi_api_ctlog_gen2 = 39;
bool CTStatus::has_venafi_api_ctlog_gen2() const {
  return this != internal_default_instance() && venafi_api_ctlog_gen2_ != NULL;
}
void CTStatus::clear_venafi_api_ctlog_gen2() {
  if (GetArenaNoVirtual() == NULL && venafi_api_ctlog_gen2_ != NULL) delete venafi_api_ctlog_gen2_;
  venafi_api_ctlog_gen2_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::venafi_api_ctlog_gen2() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.venafi_api_ctlog_gen2)
  return venafi_api_ctlog_gen2_ != NULL ? *venafi_api_ctlog_gen2_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_venafi_api_ctlog_gen2() {
  
  if (venafi_api_ctlog_gen2_ == NULL) {
    venafi_api_ctlog_gen2_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.venafi_api_ctlog_gen2)
  return venafi_api_ctlog_gen2_;
}
::zsearch::CTServerStatus* CTStatus::release_venafi_api_ctlog_gen2() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.venafi_api_ctlog_gen2)
  
  ::zsearch::CTServerStatus* temp = venafi_api_ctlog_gen2_;
  venafi_api_ctlog_gen2_ = NULL;
  return temp;
}
void CTStatus::set_allocated_venafi_api_ctlog_gen2(::zsearch::CTServerStatus* venafi_api_ctlog_gen2) {
  delete venafi_api_ctlog_gen2_;
  venafi_api_ctlog_gen2_ = venafi_api_ctlog_gen2;
  if (venafi_api_ctlog_gen2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.venafi_api_ctlog_gen2)
}

// .zsearch.CTServerStatus nordu_ct_plausible = 33;
bool CTStatus::has_nordu_ct_plausible() const {
  return this != internal_default_instance() && nordu_ct_plausible_ != NULL;
}
void CTStatus::clear_nordu_ct_plausible() {
  if (GetArenaNoVirtual() == NULL && nordu_ct_plausible_ != NULL) delete nordu_ct_plausible_;
  nordu_ct_plausible_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::nordu_ct_plausible() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.nordu_ct_plausible)
  return nordu_ct_plausible_ != NULL ? *nordu_ct_plausible_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_nordu_ct_plausible() {
  
  if (nordu_ct_plausible_ == NULL) {
    nordu_ct_plausible_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.nordu_ct_plausible)
  return nordu_ct_plausible_;
}
::zsearch::CTServerStatus* CTStatus::release_nordu_ct_plausible() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.nordu_ct_plausible)
  
  ::zsearch::CTServerStatus* temp = nordu_ct_plausible_;
  nordu_ct_plausible_ = NULL;
  return temp;
}
void CTStatus::set_allocated_nordu_ct_plausible(::zsearch::CTServerStatus* nordu_ct_plausible) {
  delete nordu_ct_plausible_;
  nordu_ct_plausible_ = nordu_ct_plausible;
  if (nordu_ct_plausible) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.nordu_ct_plausible)
}

// .zsearch.CTServerStatus cnnic_ctserver = 27;
bool CTStatus::has_cnnic_ctserver() const {
  return this != internal_default_instance() && cnnic_ctserver_ != NULL;
}
void CTStatus::clear_cnnic_ctserver() {
  if (GetArenaNoVirtual() == NULL && cnnic_ctserver_ != NULL) delete cnnic_ctserver_;
  cnnic_ctserver_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::cnnic_ctserver() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.cnnic_ctserver)
  return cnnic_ctserver_ != NULL ? *cnnic_ctserver_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_cnnic_ctserver() {
  
  if (cnnic_ctserver_ == NULL) {
    cnnic_ctserver_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.cnnic_ctserver)
  return cnnic_ctserver_;
}
::zsearch::CTServerStatus* CTStatus::release_cnnic_ctserver() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.cnnic_ctserver)
  
  ::zsearch::CTServerStatus* temp = cnnic_ctserver_;
  cnnic_ctserver_ = NULL;
  return temp;
}
void CTStatus::set_allocated_cnnic_ctserver(::zsearch::CTServerStatus* cnnic_ctserver) {
  delete cnnic_ctserver_;
  cnnic_ctserver_ = cnnic_ctserver;
  if (cnnic_ctserver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.cnnic_ctserver)
}

// .zsearch.CTServerStatus startssl_ct = 29;
bool CTStatus::has_startssl_ct() const {
  return this != internal_default_instance() && startssl_ct_ != NULL;
}
void CTStatus::clear_startssl_ct() {
  if (GetArenaNoVirtual() == NULL && startssl_ct_ != NULL) delete startssl_ct_;
  startssl_ct_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::startssl_ct() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.startssl_ct)
  return startssl_ct_ != NULL ? *startssl_ct_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_startssl_ct() {
  
  if (startssl_ct_ == NULL) {
    startssl_ct_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.startssl_ct)
  return startssl_ct_;
}
::zsearch::CTServerStatus* CTStatus::release_startssl_ct() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.startssl_ct)
  
  ::zsearch::CTServerStatus* temp = startssl_ct_;
  startssl_ct_ = NULL;
  return temp;
}
void CTStatus::set_allocated_startssl_ct(::zsearch::CTServerStatus* startssl_ct) {
  delete startssl_ct_;
  startssl_ct_ = startssl_ct;
  if (startssl_ct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.startssl_ct)
}

// .zsearch.CTServerStatus certly_log = 30;
bool CTStatus::has_certly_log() const {
  return this != internal_default_instance() && certly_log_ != NULL;
}
void CTStatus::clear_certly_log() {
  if (GetArenaNoVirtual() == NULL && certly_log_ != NULL) delete certly_log_;
  certly_log_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::certly_log() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.certly_log)
  return certly_log_ != NULL ? *certly_log_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_certly_log() {
  
  if (certly_log_ == NULL) {
    certly_log_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.certly_log)
  return certly_log_;
}
::zsearch::CTServerStatus* CTStatus::release_certly_log() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.certly_log)
  
  ::zsearch::CTServerStatus* temp = certly_log_;
  certly_log_ = NULL;
  return temp;
}
void CTStatus::set_allocated_certly_log(::zsearch::CTServerStatus* certly_log) {
  delete certly_log_;
  certly_log_ = certly_log;
  if (certly_log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.certly_log)
}

// .zsearch.CTServerStatus sheca_ct = 42;
bool CTStatus::has_sheca_ct() const {
  return this != internal_default_instance() && sheca_ct_ != NULL;
}
void CTStatus::clear_sheca_ct() {
  if (GetArenaNoVirtual() == NULL && sheca_ct_ != NULL) delete sheca_ct_;
  sheca_ct_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::sheca_ct() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.sheca_ct)
  return sheca_ct_ != NULL ? *sheca_ct_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_sheca_ct() {
  
  if (sheca_ct_ == NULL) {
    sheca_ct_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.sheca_ct)
  return sheca_ct_;
}
::zsearch::CTServerStatus* CTStatus::release_sheca_ct() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.sheca_ct)
  
  ::zsearch::CTServerStatus* temp = sheca_ct_;
  sheca_ct_ = NULL;
  return temp;
}
void CTStatus::set_allocated_sheca_ct(::zsearch::CTServerStatus* sheca_ct) {
  delete sheca_ct_;
  sheca_ct_ = sheca_ct;
  if (sheca_ct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.sheca_ct)
}

// .zsearch.CTServerStatus letsencrypt_ct_clicky = 43;
bool CTStatus::has_letsencrypt_ct_clicky() const {
  return this != internal_default_instance() && letsencrypt_ct_clicky_ != NULL;
}
void CTStatus::clear_letsencrypt_ct_clicky() {
  if (GetArenaNoVirtual() == NULL && letsencrypt_ct_clicky_ != NULL) delete letsencrypt_ct_clicky_;
  letsencrypt_ct_clicky_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::letsencrypt_ct_clicky() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.letsencrypt_ct_clicky)
  return letsencrypt_ct_clicky_ != NULL ? *letsencrypt_ct_clicky_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_letsencrypt_ct_clicky() {
  
  if (letsencrypt_ct_clicky_ == NULL) {
    letsencrypt_ct_clicky_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.letsencrypt_ct_clicky)
  return letsencrypt_ct_clicky_;
}
::zsearch::CTServerStatus* CTStatus::release_letsencrypt_ct_clicky() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.letsencrypt_ct_clicky)
  
  ::zsearch::CTServerStatus* temp = letsencrypt_ct_clicky_;
  letsencrypt_ct_clicky_ = NULL;
  return temp;
}
void CTStatus::set_allocated_letsencrypt_ct_clicky(::zsearch::CTServerStatus* letsencrypt_ct_clicky) {
  delete letsencrypt_ct_clicky_;
  letsencrypt_ct_clicky_ = letsencrypt_ct_clicky;
  if (letsencrypt_ct_clicky) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.letsencrypt_ct_clicky)
}

// .zsearch.CTServerStatus behind_the_sofa = 44;
bool CTStatus::has_behind_the_sofa() const {
  return this != internal_default_instance() && behind_the_sofa_ != NULL;
}
void CTStatus::clear_behind_the_sofa() {
  if (GetArenaNoVirtual() == NULL && behind_the_sofa_ != NULL) delete behind_the_sofa_;
  behind_the_sofa_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::behind_the_sofa() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.behind_the_sofa)
  return behind_the_sofa_ != NULL ? *behind_the_sofa_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_behind_the_sofa() {
  
  if (behind_the_sofa_ == NULL) {
    behind_the_sofa_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.behind_the_sofa)
  return behind_the_sofa_;
}
::zsearch::CTServerStatus* CTStatus::release_behind_the_sofa() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.behind_the_sofa)
  
  ::zsearch::CTServerStatus* temp = behind_the_sofa_;
  behind_the_sofa_ = NULL;
  return temp;
}
void CTStatus::set_allocated_behind_the_sofa(::zsearch::CTServerStatus* behind_the_sofa) {
  delete behind_the_sofa_;
  behind_the_sofa_ = behind_the_sofa;
  if (behind_the_sofa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.behind_the_sofa)
}

// .zsearch.CTServerStatus certificatetransparency_cn_ct = 38;
bool CTStatus::has_certificatetransparency_cn_ct() const {
  return this != internal_default_instance() && certificatetransparency_cn_ct_ != NULL;
}
void CTStatus::clear_certificatetransparency_cn_ct() {
  if (GetArenaNoVirtual() == NULL && certificatetransparency_cn_ct_ != NULL) delete certificatetransparency_cn_ct_;
  certificatetransparency_cn_ct_ = NULL;
}
const ::zsearch::CTServerStatus& CTStatus::certificatetransparency_cn_ct() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.certificatetransparency_cn_ct)
  return certificatetransparency_cn_ct_ != NULL ? *certificatetransparency_cn_ct_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* CTStatus::mutable_certificatetransparency_cn_ct() {
  
  if (certificatetransparency_cn_ct_ == NULL) {
    certificatetransparency_cn_ct_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.certificatetransparency_cn_ct)
  return certificatetransparency_cn_ct_;
}
::zsearch::CTServerStatus* CTStatus::release_certificatetransparency_cn_ct() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.certificatetransparency_cn_ct)
  
  ::zsearch::CTServerStatus* temp = certificatetransparency_cn_ct_;
  certificatetransparency_cn_ct_ = NULL;
  return temp;
}
void CTStatus::set_allocated_certificatetransparency_cn_ct(::zsearch::CTServerStatus* certificatetransparency_cn_ct) {
  delete certificatetransparency_cn_ct_;
  certificatetransparency_cn_ct_ = certificatetransparency_cn_ct;
  if (certificatetransparency_cn_ct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.certificatetransparency_cn_ct)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SCT::kSha256FpFieldNumber;
const int SCT::kServerFieldNumber;
const int SCT::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SCT::SCT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.SCT)
}
SCT::SCT(const SCT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha256fp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sha256fp().size() > 0) {
    sha256fp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha256fp_);
  }
  if (from.has_status()) {
    status_ = new ::zsearch::CTServerStatus(*from.status_);
  } else {
    status_ = NULL;
  }
  server_ = from.server_;
  // @@protoc_insertion_point(copy_constructor:zsearch.SCT)
}

void SCT::SharedCtor() {
  sha256fp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, reinterpret_cast<char*>(&server_) -
    reinterpret_cast<char*>(&status_) + sizeof(server_));
  _cached_size_ = 0;
}

SCT::~SCT() {
  // @@protoc_insertion_point(destructor:zsearch.SCT)
  SharedDtor();
}

void SCT::SharedDtor() {
  sha256fp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete status_;
  }
}

void SCT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCT::descriptor() {
  protobuf_ct_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ct_2eproto::file_level_metadata[2].descriptor;
}

const SCT& SCT::default_instance() {
  protobuf_ct_2eproto::InitDefaults();
  return *internal_default_instance();
}

SCT* SCT::New(::google::protobuf::Arena* arena) const {
  SCT* n = new SCT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SCT::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.SCT)
  sha256fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
  server_ = 0;
}

bool SCT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.SCT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes sha256fp = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha256fp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServer server = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_server(static_cast< ::zsearch::CTServer >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus status = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.SCT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.SCT)
  return false;
#undef DO_
}

void SCT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.SCT)
  // bytes sha256fp = 1;
  if (this->sha256fp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sha256fp(), output);
  }

  // .zsearch.CTServer server = 2;
  if (this->server() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->server(), output);
  }

  // .zsearch.CTServerStatus status = 3;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.SCT)
}

::google::protobuf::uint8* SCT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.SCT)
  // bytes sha256fp = 1;
  if (this->sha256fp().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sha256fp(), target);
  }

  // .zsearch.CTServer server = 2;
  if (this->server() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->server(), target);
  }

  // .zsearch.CTServerStatus status = 3;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->status_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.SCT)
  return target;
}

size_t SCT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.SCT)
  size_t total_size = 0;

  // bytes sha256fp = 1;
  if (this->sha256fp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sha256fp());
  }

  // .zsearch.CTServerStatus status = 3;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // .zsearch.CTServer server = 2;
  if (this->server() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->server());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.SCT)
  GOOGLE_DCHECK_NE(&from, this);
  const SCT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SCT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.SCT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.SCT)
    MergeFrom(*source);
  }
}

void SCT::MergeFrom(const SCT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.SCT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.sha256fp().size() > 0) {

    sha256fp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha256fp_);
  }
  if (from.has_status()) {
    mutable_status()->::zsearch::CTServerStatus::MergeFrom(from.status());
  }
  if (from.server() != 0) {
    set_server(from.server());
  }
}

void SCT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.SCT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCT::CopyFrom(const SCT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.SCT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCT::IsInitialized() const {
  return true;
}

void SCT::Swap(SCT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SCT::InternalSwap(SCT* other) {
  sha256fp_.Swap(&other->sha256fp_);
  std::swap(status_, other->status_);
  std::swap(server_, other->server_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SCT::GetMetadata() const {
  protobuf_ct_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ct_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SCT

// bytes sha256fp = 1;
void SCT::clear_sha256fp() {
  sha256fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SCT::sha256fp() const {
  // @@protoc_insertion_point(field_get:zsearch.SCT.sha256fp)
  return sha256fp_.GetNoArena();
}
void SCT::set_sha256fp(const ::std::string& value) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.SCT.sha256fp)
}
#if LANG_CXX11
void SCT::set_sha256fp(::std::string&& value) {
  
  sha256fp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.SCT.sha256fp)
}
#endif
void SCT::set_sha256fp(const char* value) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.SCT.sha256fp)
}
void SCT::set_sha256fp(const void* value, size_t size) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.SCT.sha256fp)
}
::std::string* SCT::mutable_sha256fp() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.SCT.sha256fp)
  return sha256fp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SCT::release_sha256fp() {
  // @@protoc_insertion_point(field_release:zsearch.SCT.sha256fp)
  
  return sha256fp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SCT::set_allocated_sha256fp(::std::string* sha256fp) {
  if (sha256fp != NULL) {
    
  } else {
    
  }
  sha256fp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha256fp);
  // @@protoc_insertion_point(field_set_allocated:zsearch.SCT.sha256fp)
}

// .zsearch.CTServer server = 2;
void SCT::clear_server() {
  server_ = 0;
}
::zsearch::CTServer SCT::server() const {
  // @@protoc_insertion_point(field_get:zsearch.SCT.server)
  return static_cast< ::zsearch::CTServer >(server_);
}
void SCT::set_server(::zsearch::CTServer value) {
  
  server_ = value;
  // @@protoc_insertion_point(field_set:zsearch.SCT.server)
}

// .zsearch.CTServerStatus status = 3;
bool SCT::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
void SCT::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::zsearch::CTServerStatus& SCT::status() const {
  // @@protoc_insertion_point(field_get:zsearch.SCT.status)
  return status_ != NULL ? *status_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* SCT::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.SCT.status)
  return status_;
}
::zsearch::CTServerStatus* SCT::release_status() {
  // @@protoc_insertion_point(field_release:zsearch.SCT.status)
  
  ::zsearch::CTServerStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void SCT::set_allocated_status(::zsearch::CTServerStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.SCT.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace zsearch

// @@protoc_insertion_point(global_scope)
