// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ct.proto

#ifndef PROTOBUF_ct_2eproto__INCLUDED
#define PROTOBUF_ct_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace zsearch {
class CTServerStatus;
class CTServerStatusDefaultTypeInternal;
extern CTServerStatusDefaultTypeInternal _CTServerStatus_default_instance_;
class CTStatus;
class CTStatusDefaultTypeInternal;
extern CTStatusDefaultTypeInternal _CTStatus_default_instance_;
class SCT;
class SCTDefaultTypeInternal;
extern SCTDefaultTypeInternal _SCT_default_instance_;
}  // namespace zsearch

namespace zsearch {

namespace protobuf_ct_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_ct_2eproto

enum CTPushStatus {
  CT_PUSH_STATUS_RESERVED = 0,
  CT_PUSH_STATUS_UNKNOWN = 1,
  CT_PUSH_STATUS_SUCCESS = 2,
  CT_PUSH_STATUS_UNKNOWN_ERROR = 3,
  CT_PUSH_STATUS_INVALID_ROOT = 4,
  CT_PUSH_STATUS_ALREADY_EXISTS = 5,
  CT_PUSH_STATUS_WILL_NOT_PUSH = 6,
  CTPushStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CTPushStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CTPushStatus_IsValid(int value);
const CTPushStatus CTPushStatus_MIN = CT_PUSH_STATUS_RESERVED;
const CTPushStatus CTPushStatus_MAX = CT_PUSH_STATUS_WILL_NOT_PUSH;
const int CTPushStatus_ARRAYSIZE = CTPushStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* CTPushStatus_descriptor();
inline const ::std::string& CTPushStatus_Name(CTPushStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    CTPushStatus_descriptor(), value);
}
inline bool CTPushStatus_Parse(
    const ::std::string& name, CTPushStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CTPushStatus>(
    CTPushStatus_descriptor(), name, value);
}
enum CTServer {
  CT_SERVER_RESERVED = 0,
  CT_SERVER_CENSYS_PRODUCTION = 1,
  CT_SERVER_CENSYS_DEVELOPMENT = 2,
  CT_SERVER_GOOGLE_PILOT = 11,
  CT_SERVER_GOOGLE_ROCKETEER = 12,
  CT_SERVER_GOOGLE_SUBMARINER = 13,
  CT_SERVER_GOOGLE_TESTTUBE = 14,
  CT_SERVER_GOOGLE_ICARUS = 15,
  CT_SERVER_GOOGLE_SKYDIVER = 16,
  CT_SERVER_GOOGLE_DAEDALUS = 17,
  CT_SERVER_GOOGLE_AVIATOR = 10,
  CT_SERVER_GOOGLE_ARGON_2017 = 50,
  CT_SERVER_GOOGLE_ARGON_2018 = 51,
  CT_SERVER_GOOGLE_ARGON_2019 = 52,
  CT_SERVER_GOOGLE_ARGON_2020 = 53,
  CT_SERVER_GOOGLE_ARGON_2021 = 54,
  CT_SERVER_CLOUDFLARE_NIMBUS_2017 = 60,
  CT_SERVER_CLOUDFLARE_NIMBUS_2018 = 61,
  CT_SERVER_CLOUDFLARE_NIMBUS_2019 = 62,
  CT_SERVER_CLOUDFLARE_NIMBUS_2020 = 63,
  CT_SERVER_CLOUDFLARE_NIMBUS_2021 = 64,
  CT_SERVER_SYMANTEC_WS_CT = 23,
  CT_SERVER_SYMANTEC_WS_VEGA = 24,
  CT_SERVER_SYMANTEC_WS_DENEB = 32,
  CT_SERVER_SYMANTEC_WS_SIRIUS = 37,
  CT_SERVER_COMODO_DODO = 35,
  CT_SERVER_COMODO_MAMMOTH = 36,
  CT_SERVER_COMODO_SABRE = 41,
  CT_SERVER_WOSIGN_CTLOG = 25,
  CT_SERVER_WOSIGN_CT = 26,
  CT_SERVER_VENAFI_API_CTLOG = 31,
  CT_SERVER_VENAFI_API_CTLOG_GEN2 = 39,
  CT_SERVER_GDCA_CT = 28,
  CT_SERVER_GDCA_CTLOG = 34,
  CT_SERVER_GDCA_LOG = 45,
  CT_SERVER_GDCA_LOG3 = 46,
  CT_SERVER_IZENPE_COM_CT = 21,
  CT_SERVER_IZENPE_EUS_CT = 22,
  CT_SERVER_DIGICERT_CT1 = 20,
  CT_SERVER_DIGICERT_CT2 = 40,
  CT_SERVER_CNNIC_CTSERVER = 27,
  CT_SERVER_STARTSSL_CT = 29,
  CT_SERVER_CERTLY_LOG = 30,
  CT_SERVER_NORDU_CT_PLAUSIBLE = 33,
  CT_SERVER_CERTIFICATETRANSPARENCY_CN_CT = 38,
  CT_SERVER_SHECA_CT = 42,
  CT_SERVER_LETSENCRYPT_CT_CLICKY = 43,
  CT_SERVER_BEHIND_THE_SOFA = 44,
  CT_SERVER_WOTRUS_CTLOG = 47,
  CT_SERVER_WOTRUS_CTLOG3 = 48,
  CTServer_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CTServer_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CTServer_IsValid(int value);
const CTServer CTServer_MIN = CT_SERVER_RESERVED;
const CTServer CTServer_MAX = CT_SERVER_CLOUDFLARE_NIMBUS_2021;
const int CTServer_ARRAYSIZE = CTServer_MAX + 1;

const ::google::protobuf::EnumDescriptor* CTServer_descriptor();
inline const ::std::string& CTServer_Name(CTServer value) {
  return ::google::protobuf::internal::NameOfEnum(
    CTServer_descriptor(), value);
}
inline bool CTServer_Parse(
    const ::std::string& name, CTServer* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CTServer>(
    CTServer_descriptor(), name, value);
}
// ===================================================================

class CTServerStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zsearch.CTServerStatus) */ {
 public:
  CTServerStatus();
  virtual ~CTServerStatus();

  CTServerStatus(const CTServerStatus& from);

  inline CTServerStatus& operator=(const CTServerStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CTServerStatus& default_instance();

  static inline const CTServerStatus* internal_default_instance() {
    return reinterpret_cast<const CTServerStatus*>(
               &_CTServerStatus_default_instance_);
  }

  void Swap(CTServerStatus* other);

  // implements Message ----------------------------------------------

  inline CTServerStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  CTServerStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CTServerStatus& from);
  void MergeFrom(const CTServerStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CTServerStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes sct = 6;
  void clear_sct();
  static const int kSctFieldNumber = 6;
  const ::std::string& sct() const;
  void set_sct(const ::std::string& value);
  #if LANG_CXX11
  void set_sct(::std::string&& value);
  #endif
  void set_sct(const char* value);
  void set_sct(const void* value, size_t size);
  ::std::string* mutable_sct();
  ::std::string* release_sct();
  void set_allocated_sct(::std::string* sct);

  // string push_error = 7;
  void clear_push_error();
  static const int kPushErrorFieldNumber = 7;
  const ::std::string& push_error() const;
  void set_push_error(const ::std::string& value);
  #if LANG_CXX11
  void set_push_error(::std::string&& value);
  #endif
  void set_push_error(const char* value);
  void set_push_error(const char* value, size_t size);
  ::std::string* mutable_push_error();
  ::std::string* release_push_error();
  void set_allocated_push_error(::std::string* push_error);

  // int64 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int64 index() const;
  void set_index(::google::protobuf::int64 value);

  // int64 ct_timestamp = 2;
  void clear_ct_timestamp();
  static const int kCtTimestampFieldNumber = 2;
  ::google::protobuf::int64 ct_timestamp() const;
  void set_ct_timestamp(::google::protobuf::int64 value);

  // int64 pull_timestamp = 3;
  void clear_pull_timestamp();
  static const int kPullTimestampFieldNumber = 3;
  ::google::protobuf::int64 pull_timestamp() const;
  void set_pull_timestamp(::google::protobuf::int64 value);

  // int64 push_timestamp = 4;
  void clear_push_timestamp();
  static const int kPushTimestampFieldNumber = 4;
  ::google::protobuf::int64 push_timestamp() const;
  void set_push_timestamp(::google::protobuf::int64 value);

  // .zsearch.CTPushStatus push_status = 5;
  void clear_push_status();
  static const int kPushStatusFieldNumber = 5;
  ::zsearch::CTPushStatus push_status() const;
  void set_push_status(::zsearch::CTPushStatus value);

  // @@protoc_insertion_point(class_scope:zsearch.CTServerStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sct_;
  ::google::protobuf::internal::ArenaStringPtr push_error_;
  ::google::protobuf::int64 index_;
  ::google::protobuf::int64 ct_timestamp_;
  ::google::protobuf::int64 pull_timestamp_;
  ::google::protobuf::int64 push_timestamp_;
  int push_status_;
  mutable int _cached_size_;
  friend struct  protobuf_ct_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CTStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zsearch.CTStatus) */ {
 public:
  CTStatus();
  virtual ~CTStatus();

  CTStatus(const CTStatus& from);

  inline CTStatus& operator=(const CTStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CTStatus& default_instance();

  static inline const CTStatus* internal_default_instance() {
    return reinterpret_cast<const CTStatus*>(
               &_CTStatus_default_instance_);
  }

  void Swap(CTStatus* other);

  // implements Message ----------------------------------------------

  inline CTStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  CTStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CTStatus& from);
  void MergeFrom(const CTStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CTStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zsearch.CTServerStatus censys_dev = 1;
  bool has_censys_dev() const;
  void clear_censys_dev();
  static const int kCensysDevFieldNumber = 1;
  const ::zsearch::CTServerStatus& censys_dev() const;
  ::zsearch::CTServerStatus* mutable_censys_dev();
  ::zsearch::CTServerStatus* release_censys_dev();
  void set_allocated_censys_dev(::zsearch::CTServerStatus* censys_dev);

  // .zsearch.CTServerStatus censys = 2;
  bool has_censys() const;
  void clear_censys();
  static const int kCensysFieldNumber = 2;
  const ::zsearch::CTServerStatus& censys() const;
  ::zsearch::CTServerStatus* mutable_censys();
  ::zsearch::CTServerStatus* release_censys();
  void set_allocated_censys(::zsearch::CTServerStatus* censys);

  // .zsearch.CTServerStatus google_aviator = 10;
  bool has_google_aviator() const;
  void clear_google_aviator();
  static const int kGoogleAviatorFieldNumber = 10;
  const ::zsearch::CTServerStatus& google_aviator() const;
  ::zsearch::CTServerStatus* mutable_google_aviator();
  ::zsearch::CTServerStatus* release_google_aviator();
  void set_allocated_google_aviator(::zsearch::CTServerStatus* google_aviator);

  // .zsearch.CTServerStatus google_pilot = 11;
  bool has_google_pilot() const;
  void clear_google_pilot();
  static const int kGooglePilotFieldNumber = 11;
  const ::zsearch::CTServerStatus& google_pilot() const;
  ::zsearch::CTServerStatus* mutable_google_pilot();
  ::zsearch::CTServerStatus* release_google_pilot();
  void set_allocated_google_pilot(::zsearch::CTServerStatus* google_pilot);

  // .zsearch.CTServerStatus google_rocketeer = 12;
  bool has_google_rocketeer() const;
  void clear_google_rocketeer();
  static const int kGoogleRocketeerFieldNumber = 12;
  const ::zsearch::CTServerStatus& google_rocketeer() const;
  ::zsearch::CTServerStatus* mutable_google_rocketeer();
  ::zsearch::CTServerStatus* release_google_rocketeer();
  void set_allocated_google_rocketeer(::zsearch::CTServerStatus* google_rocketeer);

  // .zsearch.CTServerStatus google_submariner = 13;
  bool has_google_submariner() const;
  void clear_google_submariner();
  static const int kGoogleSubmarinerFieldNumber = 13;
  const ::zsearch::CTServerStatus& google_submariner() const;
  ::zsearch::CTServerStatus* mutable_google_submariner();
  ::zsearch::CTServerStatus* release_google_submariner();
  void set_allocated_google_submariner(::zsearch::CTServerStatus* google_submariner);

  // .zsearch.CTServerStatus google_testtube = 14;
  bool has_google_testtube() const;
  void clear_google_testtube();
  static const int kGoogleTesttubeFieldNumber = 14;
  const ::zsearch::CTServerStatus& google_testtube() const;
  ::zsearch::CTServerStatus* mutable_google_testtube();
  ::zsearch::CTServerStatus* release_google_testtube();
  void set_allocated_google_testtube(::zsearch::CTServerStatus* google_testtube);

  // .zsearch.CTServerStatus google_icarus = 15;
  bool has_google_icarus() const;
  void clear_google_icarus();
  static const int kGoogleIcarusFieldNumber = 15;
  const ::zsearch::CTServerStatus& google_icarus() const;
  ::zsearch::CTServerStatus* mutable_google_icarus();
  ::zsearch::CTServerStatus* release_google_icarus();
  void set_allocated_google_icarus(::zsearch::CTServerStatus* google_icarus);

  // .zsearch.CTServerStatus google_skydiver = 16;
  bool has_google_skydiver() const;
  void clear_google_skydiver();
  static const int kGoogleSkydiverFieldNumber = 16;
  const ::zsearch::CTServerStatus& google_skydiver() const;
  ::zsearch::CTServerStatus* mutable_google_skydiver();
  ::zsearch::CTServerStatus* release_google_skydiver();
  void set_allocated_google_skydiver(::zsearch::CTServerStatus* google_skydiver);

  // .zsearch.CTServerStatus google_daedalus = 17;
  bool has_google_daedalus() const;
  void clear_google_daedalus();
  static const int kGoogleDaedalusFieldNumber = 17;
  const ::zsearch::CTServerStatus& google_daedalus() const;
  ::zsearch::CTServerStatus* mutable_google_daedalus();
  ::zsearch::CTServerStatus* release_google_daedalus();
  void set_allocated_google_daedalus(::zsearch::CTServerStatus* google_daedalus);

  // .zsearch.CTServerStatus digicert_ct1 = 20;
  bool has_digicert_ct1() const;
  void clear_digicert_ct1();
  static const int kDigicertCt1FieldNumber = 20;
  const ::zsearch::CTServerStatus& digicert_ct1() const;
  ::zsearch::CTServerStatus* mutable_digicert_ct1();
  ::zsearch::CTServerStatus* release_digicert_ct1();
  void set_allocated_digicert_ct1(::zsearch::CTServerStatus* digicert_ct1);

  // .zsearch.CTServerStatus digicert_ct2 = 40;
  bool has_digicert_ct2() const;
  void clear_digicert_ct2();
  static const int kDigicertCt2FieldNumber = 40;
  const ::zsearch::CTServerStatus& digicert_ct2() const;
  ::zsearch::CTServerStatus* mutable_digicert_ct2();
  ::zsearch::CTServerStatus* release_digicert_ct2();
  void set_allocated_digicert_ct2(::zsearch::CTServerStatus* digicert_ct2);

  // .zsearch.CTServerStatus izenpe_com_ct = 21;
  bool has_izenpe_com_ct() const;
  void clear_izenpe_com_ct();
  static const int kIzenpeComCtFieldNumber = 21;
  const ::zsearch::CTServerStatus& izenpe_com_ct() const;
  ::zsearch::CTServerStatus* mutable_izenpe_com_ct();
  ::zsearch::CTServerStatus* release_izenpe_com_ct();
  void set_allocated_izenpe_com_ct(::zsearch::CTServerStatus* izenpe_com_ct);

  // .zsearch.CTServerStatus izenpe_eus_ct = 22;
  bool has_izenpe_eus_ct() const;
  void clear_izenpe_eus_ct();
  static const int kIzenpeEusCtFieldNumber = 22;
  const ::zsearch::CTServerStatus& izenpe_eus_ct() const;
  ::zsearch::CTServerStatus* mutable_izenpe_eus_ct();
  ::zsearch::CTServerStatus* release_izenpe_eus_ct();
  void set_allocated_izenpe_eus_ct(::zsearch::CTServerStatus* izenpe_eus_ct);

  // .zsearch.CTServerStatus symantec_ws_ct = 23;
  bool has_symantec_ws_ct() const;
  void clear_symantec_ws_ct();
  static const int kSymantecWsCtFieldNumber = 23;
  const ::zsearch::CTServerStatus& symantec_ws_ct() const;
  ::zsearch::CTServerStatus* mutable_symantec_ws_ct();
  ::zsearch::CTServerStatus* release_symantec_ws_ct();
  void set_allocated_symantec_ws_ct(::zsearch::CTServerStatus* symantec_ws_ct);

  // .zsearch.CTServerStatus symantec_ws_vega = 24;
  bool has_symantec_ws_vega() const;
  void clear_symantec_ws_vega();
  static const int kSymantecWsVegaFieldNumber = 24;
  const ::zsearch::CTServerStatus& symantec_ws_vega() const;
  ::zsearch::CTServerStatus* mutable_symantec_ws_vega();
  ::zsearch::CTServerStatus* release_symantec_ws_vega();
  void set_allocated_symantec_ws_vega(::zsearch::CTServerStatus* symantec_ws_vega);

  // .zsearch.CTServerStatus symantec_ws_sirius = 37;
  bool has_symantec_ws_sirius() const;
  void clear_symantec_ws_sirius();
  static const int kSymantecWsSiriusFieldNumber = 37;
  const ::zsearch::CTServerStatus& symantec_ws_sirius() const;
  ::zsearch::CTServerStatus* mutable_symantec_ws_sirius();
  ::zsearch::CTServerStatus* release_symantec_ws_sirius();
  void set_allocated_symantec_ws_sirius(::zsearch::CTServerStatus* symantec_ws_sirius);

  // .zsearch.CTServerStatus symantec_ws_deneb = 32;
  bool has_symantec_ws_deneb() const;
  void clear_symantec_ws_deneb();
  static const int kSymantecWsDenebFieldNumber = 32;
  const ::zsearch::CTServerStatus& symantec_ws_deneb() const;
  ::zsearch::CTServerStatus* mutable_symantec_ws_deneb();
  ::zsearch::CTServerStatus* release_symantec_ws_deneb();
  void set_allocated_symantec_ws_deneb(::zsearch::CTServerStatus* symantec_ws_deneb);

  // .zsearch.CTServerStatus comodo_dodo = 34;
  bool has_comodo_dodo() const;
  void clear_comodo_dodo();
  static const int kComodoDodoFieldNumber = 34;
  const ::zsearch::CTServerStatus& comodo_dodo() const;
  ::zsearch::CTServerStatus* mutable_comodo_dodo();
  ::zsearch::CTServerStatus* release_comodo_dodo();
  void set_allocated_comodo_dodo(::zsearch::CTServerStatus* comodo_dodo);

  // .zsearch.CTServerStatus comodo_mammoth = 35;
  bool has_comodo_mammoth() const;
  void clear_comodo_mammoth();
  static const int kComodoMammothFieldNumber = 35;
  const ::zsearch::CTServerStatus& comodo_mammoth() const;
  ::zsearch::CTServerStatus* mutable_comodo_mammoth();
  ::zsearch::CTServerStatus* release_comodo_mammoth();
  void set_allocated_comodo_mammoth(::zsearch::CTServerStatus* comodo_mammoth);

  // .zsearch.CTServerStatus comodo_sabre = 41;
  bool has_comodo_sabre() const;
  void clear_comodo_sabre();
  static const int kComodoSabreFieldNumber = 41;
  const ::zsearch::CTServerStatus& comodo_sabre() const;
  ::zsearch::CTServerStatus* mutable_comodo_sabre();
  ::zsearch::CTServerStatus* release_comodo_sabre();
  void set_allocated_comodo_sabre(::zsearch::CTServerStatus* comodo_sabre);

  // .zsearch.CTServerStatus wosign_ctlog = 25;
  bool has_wosign_ctlog() const;
  void clear_wosign_ctlog();
  static const int kWosignCtlogFieldNumber = 25;
  const ::zsearch::CTServerStatus& wosign_ctlog() const;
  ::zsearch::CTServerStatus* mutable_wosign_ctlog();
  ::zsearch::CTServerStatus* release_wosign_ctlog();
  void set_allocated_wosign_ctlog(::zsearch::CTServerStatus* wosign_ctlog);

  // .zsearch.CTServerStatus wosign_ct = 26;
  bool has_wosign_ct() const;
  void clear_wosign_ct();
  static const int kWosignCtFieldNumber = 26;
  const ::zsearch::CTServerStatus& wosign_ct() const;
  ::zsearch::CTServerStatus* mutable_wosign_ct();
  ::zsearch::CTServerStatus* release_wosign_ct();
  void set_allocated_wosign_ct(::zsearch::CTServerStatus* wosign_ct);

  // .zsearch.CTServerStatus gdca_ct = 28;
  bool has_gdca_ct() const;
  void clear_gdca_ct();
  static const int kGdcaCtFieldNumber = 28;
  const ::zsearch::CTServerStatus& gdca_ct() const;
  ::zsearch::CTServerStatus* mutable_gdca_ct();
  ::zsearch::CTServerStatus* release_gdca_ct();
  void set_allocated_gdca_ct(::zsearch::CTServerStatus* gdca_ct);

  // .zsearch.CTServerStatus gdca_ctlog = 36;
  bool has_gdca_ctlog() const;
  void clear_gdca_ctlog();
  static const int kGdcaCtlogFieldNumber = 36;
  const ::zsearch::CTServerStatus& gdca_ctlog() const;
  ::zsearch::CTServerStatus* mutable_gdca_ctlog();
  ::zsearch::CTServerStatus* release_gdca_ctlog();
  void set_allocated_gdca_ctlog(::zsearch::CTServerStatus* gdca_ctlog);

  // .zsearch.CTServerStatus gdca_log = 45;
  bool has_gdca_log() const;
  void clear_gdca_log();
  static const int kGdcaLogFieldNumber = 45;
  const ::zsearch::CTServerStatus& gdca_log() const;
  ::zsearch::CTServerStatus* mutable_gdca_log();
  ::zsearch::CTServerStatus* release_gdca_log();
  void set_allocated_gdca_log(::zsearch::CTServerStatus* gdca_log);

  // .zsearch.CTServerStatus gdca_log2 = 46;
  bool has_gdca_log2() const;
  void clear_gdca_log2();
  static const int kGdcaLog2FieldNumber = 46;
  const ::zsearch::CTServerStatus& gdca_log2() const;
  ::zsearch::CTServerStatus* mutable_gdca_log2();
  ::zsearch::CTServerStatus* release_gdca_log2();
  void set_allocated_gdca_log2(::zsearch::CTServerStatus* gdca_log2);

  // .zsearch.CTServerStatus venafi_api_ctlog = 31;
  bool has_venafi_api_ctlog() const;
  void clear_venafi_api_ctlog();
  static const int kVenafiApiCtlogFieldNumber = 31;
  const ::zsearch::CTServerStatus& venafi_api_ctlog() const;
  ::zsearch::CTServerStatus* mutable_venafi_api_ctlog();
  ::zsearch::CTServerStatus* release_venafi_api_ctlog();
  void set_allocated_venafi_api_ctlog(::zsearch::CTServerStatus* venafi_api_ctlog);

  // .zsearch.CTServerStatus venafi_api_ctlog_gen2 = 39;
  bool has_venafi_api_ctlog_gen2() const;
  void clear_venafi_api_ctlog_gen2();
  static const int kVenafiApiCtlogGen2FieldNumber = 39;
  const ::zsearch::CTServerStatus& venafi_api_ctlog_gen2() const;
  ::zsearch::CTServerStatus* mutable_venafi_api_ctlog_gen2();
  ::zsearch::CTServerStatus* release_venafi_api_ctlog_gen2();
  void set_allocated_venafi_api_ctlog_gen2(::zsearch::CTServerStatus* venafi_api_ctlog_gen2);

  // .zsearch.CTServerStatus nordu_ct_plausible = 33;
  bool has_nordu_ct_plausible() const;
  void clear_nordu_ct_plausible();
  static const int kNorduCtPlausibleFieldNumber = 33;
  const ::zsearch::CTServerStatus& nordu_ct_plausible() const;
  ::zsearch::CTServerStatus* mutable_nordu_ct_plausible();
  ::zsearch::CTServerStatus* release_nordu_ct_plausible();
  void set_allocated_nordu_ct_plausible(::zsearch::CTServerStatus* nordu_ct_plausible);

  // .zsearch.CTServerStatus cnnic_ctserver = 27;
  bool has_cnnic_ctserver() const;
  void clear_cnnic_ctserver();
  static const int kCnnicCtserverFieldNumber = 27;
  const ::zsearch::CTServerStatus& cnnic_ctserver() const;
  ::zsearch::CTServerStatus* mutable_cnnic_ctserver();
  ::zsearch::CTServerStatus* release_cnnic_ctserver();
  void set_allocated_cnnic_ctserver(::zsearch::CTServerStatus* cnnic_ctserver);

  // .zsearch.CTServerStatus startssl_ct = 29;
  bool has_startssl_ct() const;
  void clear_startssl_ct();
  static const int kStartsslCtFieldNumber = 29;
  const ::zsearch::CTServerStatus& startssl_ct() const;
  ::zsearch::CTServerStatus* mutable_startssl_ct();
  ::zsearch::CTServerStatus* release_startssl_ct();
  void set_allocated_startssl_ct(::zsearch::CTServerStatus* startssl_ct);

  // .zsearch.CTServerStatus certly_log = 30;
  bool has_certly_log() const;
  void clear_certly_log();
  static const int kCertlyLogFieldNumber = 30;
  const ::zsearch::CTServerStatus& certly_log() const;
  ::zsearch::CTServerStatus* mutable_certly_log();
  ::zsearch::CTServerStatus* release_certly_log();
  void set_allocated_certly_log(::zsearch::CTServerStatus* certly_log);

  // .zsearch.CTServerStatus sheca_ct = 42;
  bool has_sheca_ct() const;
  void clear_sheca_ct();
  static const int kShecaCtFieldNumber = 42;
  const ::zsearch::CTServerStatus& sheca_ct() const;
  ::zsearch::CTServerStatus* mutable_sheca_ct();
  ::zsearch::CTServerStatus* release_sheca_ct();
  void set_allocated_sheca_ct(::zsearch::CTServerStatus* sheca_ct);

  // .zsearch.CTServerStatus letsencrypt_ct_clicky = 43;
  bool has_letsencrypt_ct_clicky() const;
  void clear_letsencrypt_ct_clicky();
  static const int kLetsencryptCtClickyFieldNumber = 43;
  const ::zsearch::CTServerStatus& letsencrypt_ct_clicky() const;
  ::zsearch::CTServerStatus* mutable_letsencrypt_ct_clicky();
  ::zsearch::CTServerStatus* release_letsencrypt_ct_clicky();
  void set_allocated_letsencrypt_ct_clicky(::zsearch::CTServerStatus* letsencrypt_ct_clicky);

  // .zsearch.CTServerStatus behind_the_sofa = 44;
  bool has_behind_the_sofa() const;
  void clear_behind_the_sofa();
  static const int kBehindTheSofaFieldNumber = 44;
  const ::zsearch::CTServerStatus& behind_the_sofa() const;
  ::zsearch::CTServerStatus* mutable_behind_the_sofa();
  ::zsearch::CTServerStatus* release_behind_the_sofa();
  void set_allocated_behind_the_sofa(::zsearch::CTServerStatus* behind_the_sofa);

  // .zsearch.CTServerStatus wotrus_ctlog = 47;
  bool has_wotrus_ctlog() const;
  void clear_wotrus_ctlog();
  static const int kWotrusCtlogFieldNumber = 47;
  const ::zsearch::CTServerStatus& wotrus_ctlog() const;
  ::zsearch::CTServerStatus* mutable_wotrus_ctlog();
  ::zsearch::CTServerStatus* release_wotrus_ctlog();
  void set_allocated_wotrus_ctlog(::zsearch::CTServerStatus* wotrus_ctlog);

  // .zsearch.CTServerStatus wotrus_ctlog3 = 48;
  bool has_wotrus_ctlog3() const;
  void clear_wotrus_ctlog3();
  static const int kWotrusCtlog3FieldNumber = 48;
  const ::zsearch::CTServerStatus& wotrus_ctlog3() const;
  ::zsearch::CTServerStatus* mutable_wotrus_ctlog3();
  ::zsearch::CTServerStatus* release_wotrus_ctlog3();
  void set_allocated_wotrus_ctlog3(::zsearch::CTServerStatus* wotrus_ctlog3);

  // .zsearch.CTServerStatus certificatetransparency_cn_ct = 38;
  bool has_certificatetransparency_cn_ct() const;
  void clear_certificatetransparency_cn_ct();
  static const int kCertificatetransparencyCnCtFieldNumber = 38;
  const ::zsearch::CTServerStatus& certificatetransparency_cn_ct() const;
  ::zsearch::CTServerStatus* mutable_certificatetransparency_cn_ct();
  ::zsearch::CTServerStatus* release_certificatetransparency_cn_ct();
  void set_allocated_certificatetransparency_cn_ct(::zsearch::CTServerStatus* certificatetransparency_cn_ct);

  // .zsearch.CTServerStatus google_argon_2017 = 50;
  bool has_google_argon_2017() const;
  void clear_google_argon_2017();
  static const int kGoogleArgon2017FieldNumber = 50;
  const ::zsearch::CTServerStatus& google_argon_2017() const;
  ::zsearch::CTServerStatus* mutable_google_argon_2017();
  ::zsearch::CTServerStatus* release_google_argon_2017();
  void set_allocated_google_argon_2017(::zsearch::CTServerStatus* google_argon_2017);

  // .zsearch.CTServerStatus google_argon_2018 = 51;
  bool has_google_argon_2018() const;
  void clear_google_argon_2018();
  static const int kGoogleArgon2018FieldNumber = 51;
  const ::zsearch::CTServerStatus& google_argon_2018() const;
  ::zsearch::CTServerStatus* mutable_google_argon_2018();
  ::zsearch::CTServerStatus* release_google_argon_2018();
  void set_allocated_google_argon_2018(::zsearch::CTServerStatus* google_argon_2018);

  // .zsearch.CTServerStatus google_argon_2019 = 52;
  bool has_google_argon_2019() const;
  void clear_google_argon_2019();
  static const int kGoogleArgon2019FieldNumber = 52;
  const ::zsearch::CTServerStatus& google_argon_2019() const;
  ::zsearch::CTServerStatus* mutable_google_argon_2019();
  ::zsearch::CTServerStatus* release_google_argon_2019();
  void set_allocated_google_argon_2019(::zsearch::CTServerStatus* google_argon_2019);

  // .zsearch.CTServerStatus google_argon_2020 = 53;
  bool has_google_argon_2020() const;
  void clear_google_argon_2020();
  static const int kGoogleArgon2020FieldNumber = 53;
  const ::zsearch::CTServerStatus& google_argon_2020() const;
  ::zsearch::CTServerStatus* mutable_google_argon_2020();
  ::zsearch::CTServerStatus* release_google_argon_2020();
  void set_allocated_google_argon_2020(::zsearch::CTServerStatus* google_argon_2020);

  // .zsearch.CTServerStatus google_argon_2021 = 54;
  bool has_google_argon_2021() const;
  void clear_google_argon_2021();
  static const int kGoogleArgon2021FieldNumber = 54;
  const ::zsearch::CTServerStatus& google_argon_2021() const;
  ::zsearch::CTServerStatus* mutable_google_argon_2021();
  ::zsearch::CTServerStatus* release_google_argon_2021();
  void set_allocated_google_argon_2021(::zsearch::CTServerStatus* google_argon_2021);

  // .zsearch.CTServerStatus cloudfare_nimbus_2017 = 60;
  bool has_cloudfare_nimbus_2017() const;
  void clear_cloudfare_nimbus_2017();
  static const int kCloudfareNimbus2017FieldNumber = 60;
  const ::zsearch::CTServerStatus& cloudfare_nimbus_2017() const;
  ::zsearch::CTServerStatus* mutable_cloudfare_nimbus_2017();
  ::zsearch::CTServerStatus* release_cloudfare_nimbus_2017();
  void set_allocated_cloudfare_nimbus_2017(::zsearch::CTServerStatus* cloudfare_nimbus_2017);

  // .zsearch.CTServerStatus cloudfare_nimbus_2018 = 61;
  bool has_cloudfare_nimbus_2018() const;
  void clear_cloudfare_nimbus_2018();
  static const int kCloudfareNimbus2018FieldNumber = 61;
  const ::zsearch::CTServerStatus& cloudfare_nimbus_2018() const;
  ::zsearch::CTServerStatus* mutable_cloudfare_nimbus_2018();
  ::zsearch::CTServerStatus* release_cloudfare_nimbus_2018();
  void set_allocated_cloudfare_nimbus_2018(::zsearch::CTServerStatus* cloudfare_nimbus_2018);

  // .zsearch.CTServerStatus cloudfare_nimbus_2019 = 62;
  bool has_cloudfare_nimbus_2019() const;
  void clear_cloudfare_nimbus_2019();
  static const int kCloudfareNimbus2019FieldNumber = 62;
  const ::zsearch::CTServerStatus& cloudfare_nimbus_2019() const;
  ::zsearch::CTServerStatus* mutable_cloudfare_nimbus_2019();
  ::zsearch::CTServerStatus* release_cloudfare_nimbus_2019();
  void set_allocated_cloudfare_nimbus_2019(::zsearch::CTServerStatus* cloudfare_nimbus_2019);

  // .zsearch.CTServerStatus cloudfare_nimbus_2020 = 63;
  bool has_cloudfare_nimbus_2020() const;
  void clear_cloudfare_nimbus_2020();
  static const int kCloudfareNimbus2020FieldNumber = 63;
  const ::zsearch::CTServerStatus& cloudfare_nimbus_2020() const;
  ::zsearch::CTServerStatus* mutable_cloudfare_nimbus_2020();
  ::zsearch::CTServerStatus* release_cloudfare_nimbus_2020();
  void set_allocated_cloudfare_nimbus_2020(::zsearch::CTServerStatus* cloudfare_nimbus_2020);

  // .zsearch.CTServerStatus cloudfare_nimbus_2021 = 64;
  bool has_cloudfare_nimbus_2021() const;
  void clear_cloudfare_nimbus_2021();
  static const int kCloudfareNimbus2021FieldNumber = 64;
  const ::zsearch::CTServerStatus& cloudfare_nimbus_2021() const;
  ::zsearch::CTServerStatus* mutable_cloudfare_nimbus_2021();
  ::zsearch::CTServerStatus* release_cloudfare_nimbus_2021();
  void set_allocated_cloudfare_nimbus_2021(::zsearch::CTServerStatus* cloudfare_nimbus_2021);

  // @@protoc_insertion_point(class_scope:zsearch.CTStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zsearch::CTServerStatus* censys_dev_;
  ::zsearch::CTServerStatus* censys_;
  ::zsearch::CTServerStatus* google_aviator_;
  ::zsearch::CTServerStatus* google_pilot_;
  ::zsearch::CTServerStatus* google_rocketeer_;
  ::zsearch::CTServerStatus* google_submariner_;
  ::zsearch::CTServerStatus* google_testtube_;
  ::zsearch::CTServerStatus* google_icarus_;
  ::zsearch::CTServerStatus* google_skydiver_;
  ::zsearch::CTServerStatus* google_daedalus_;
  ::zsearch::CTServerStatus* digicert_ct1_;
  ::zsearch::CTServerStatus* digicert_ct2_;
  ::zsearch::CTServerStatus* izenpe_com_ct_;
  ::zsearch::CTServerStatus* izenpe_eus_ct_;
  ::zsearch::CTServerStatus* symantec_ws_ct_;
  ::zsearch::CTServerStatus* symantec_ws_vega_;
  ::zsearch::CTServerStatus* symantec_ws_sirius_;
  ::zsearch::CTServerStatus* symantec_ws_deneb_;
  ::zsearch::CTServerStatus* comodo_dodo_;
  ::zsearch::CTServerStatus* comodo_mammoth_;
  ::zsearch::CTServerStatus* comodo_sabre_;
  ::zsearch::CTServerStatus* wosign_ctlog_;
  ::zsearch::CTServerStatus* wosign_ct_;
  ::zsearch::CTServerStatus* gdca_ct_;
  ::zsearch::CTServerStatus* gdca_ctlog_;
  ::zsearch::CTServerStatus* gdca_log_;
  ::zsearch::CTServerStatus* gdca_log2_;
  ::zsearch::CTServerStatus* venafi_api_ctlog_;
  ::zsearch::CTServerStatus* venafi_api_ctlog_gen2_;
  ::zsearch::CTServerStatus* nordu_ct_plausible_;
  ::zsearch::CTServerStatus* cnnic_ctserver_;
  ::zsearch::CTServerStatus* startssl_ct_;
  ::zsearch::CTServerStatus* certly_log_;
  ::zsearch::CTServerStatus* sheca_ct_;
  ::zsearch::CTServerStatus* letsencrypt_ct_clicky_;
  ::zsearch::CTServerStatus* behind_the_sofa_;
  ::zsearch::CTServerStatus* wotrus_ctlog_;
  ::zsearch::CTServerStatus* wotrus_ctlog3_;
  ::zsearch::CTServerStatus* certificatetransparency_cn_ct_;
  ::zsearch::CTServerStatus* google_argon_2017_;
  ::zsearch::CTServerStatus* google_argon_2018_;
  ::zsearch::CTServerStatus* google_argon_2019_;
  ::zsearch::CTServerStatus* google_argon_2020_;
  ::zsearch::CTServerStatus* google_argon_2021_;
  ::zsearch::CTServerStatus* cloudfare_nimbus_2017_;
  ::zsearch::CTServerStatus* cloudfare_nimbus_2018_;
  ::zsearch::CTServerStatus* cloudfare_nimbus_2019_;
  ::zsearch::CTServerStatus* cloudfare_nimbus_2020_;
  ::zsearch::CTServerStatus* cloudfare_nimbus_2021_;
  mutable int _cached_size_;
  friend struct  protobuf_ct_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SCT : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zsearch.SCT) */ {
 public:
  SCT();
  virtual ~SCT();

  SCT(const SCT& from);

  inline SCT& operator=(const SCT& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCT& default_instance();

  static inline const SCT* internal_default_instance() {
    return reinterpret_cast<const SCT*>(
               &_SCT_default_instance_);
  }

  void Swap(SCT* other);

  // implements Message ----------------------------------------------

  inline SCT* New() const PROTOBUF_FINAL { return New(NULL); }

  SCT* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SCT& from);
  void MergeFrom(const SCT& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SCT* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes sha256fp = 1;
  void clear_sha256fp();
  static const int kSha256FpFieldNumber = 1;
  const ::std::string& sha256fp() const;
  void set_sha256fp(const ::std::string& value);
  #if LANG_CXX11
  void set_sha256fp(::std::string&& value);
  #endif
  void set_sha256fp(const char* value);
  void set_sha256fp(const void* value, size_t size);
  ::std::string* mutable_sha256fp();
  ::std::string* release_sha256fp();
  void set_allocated_sha256fp(::std::string* sha256fp);

  // .zsearch.CTServerStatus status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::zsearch::CTServerStatus& status() const;
  ::zsearch::CTServerStatus* mutable_status();
  ::zsearch::CTServerStatus* release_status();
  void set_allocated_status(::zsearch::CTServerStatus* status);

  // .zsearch.CTServer server = 2;
  void clear_server();
  static const int kServerFieldNumber = 2;
  ::zsearch::CTServer server() const;
  void set_server(::zsearch::CTServer value);

  // @@protoc_insertion_point(class_scope:zsearch.SCT)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sha256fp_;
  ::zsearch::CTServerStatus* status_;
  int server_;
  mutable int _cached_size_;
  friend struct  protobuf_ct_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CTServerStatus

// int64 index = 1;
inline void CTServerStatus::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CTServerStatus::index() const {
  // @@protoc_insertion_point(field_get:zsearch.CTServerStatus.index)
  return index_;
}
inline void CTServerStatus::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:zsearch.CTServerStatus.index)
}

// int64 ct_timestamp = 2;
inline void CTServerStatus::clear_ct_timestamp() {
  ct_timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CTServerStatus::ct_timestamp() const {
  // @@protoc_insertion_point(field_get:zsearch.CTServerStatus.ct_timestamp)
  return ct_timestamp_;
}
inline void CTServerStatus::set_ct_timestamp(::google::protobuf::int64 value) {
  
  ct_timestamp_ = value;
  // @@protoc_insertion_point(field_set:zsearch.CTServerStatus.ct_timestamp)
}

// int64 pull_timestamp = 3;
inline void CTServerStatus::clear_pull_timestamp() {
  pull_timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CTServerStatus::pull_timestamp() const {
  // @@protoc_insertion_point(field_get:zsearch.CTServerStatus.pull_timestamp)
  return pull_timestamp_;
}
inline void CTServerStatus::set_pull_timestamp(::google::protobuf::int64 value) {
  
  pull_timestamp_ = value;
  // @@protoc_insertion_point(field_set:zsearch.CTServerStatus.pull_timestamp)
}

// int64 push_timestamp = 4;
inline void CTServerStatus::clear_push_timestamp() {
  push_timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CTServerStatus::push_timestamp() const {
  // @@protoc_insertion_point(field_get:zsearch.CTServerStatus.push_timestamp)
  return push_timestamp_;
}
inline void CTServerStatus::set_push_timestamp(::google::protobuf::int64 value) {
  
  push_timestamp_ = value;
  // @@protoc_insertion_point(field_set:zsearch.CTServerStatus.push_timestamp)
}

// .zsearch.CTPushStatus push_status = 5;
inline void CTServerStatus::clear_push_status() {
  push_status_ = 0;
}
inline ::zsearch::CTPushStatus CTServerStatus::push_status() const {
  // @@protoc_insertion_point(field_get:zsearch.CTServerStatus.push_status)
  return static_cast< ::zsearch::CTPushStatus >(push_status_);
}
inline void CTServerStatus::set_push_status(::zsearch::CTPushStatus value) {
  
  push_status_ = value;
  // @@protoc_insertion_point(field_set:zsearch.CTServerStatus.push_status)
}

// bytes sct = 6;
inline void CTServerStatus::clear_sct() {
  sct_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CTServerStatus::sct() const {
  // @@protoc_insertion_point(field_get:zsearch.CTServerStatus.sct)
  return sct_.GetNoArena();
}
inline void CTServerStatus::set_sct(const ::std::string& value) {
  
  sct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.CTServerStatus.sct)
}
#if LANG_CXX11
inline void CTServerStatus::set_sct(::std::string&& value) {
  
  sct_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.CTServerStatus.sct)
}
#endif
inline void CTServerStatus::set_sct(const char* value) {
  
  sct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.CTServerStatus.sct)
}
inline void CTServerStatus::set_sct(const void* value, size_t size) {
  
  sct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.CTServerStatus.sct)
}
inline ::std::string* CTServerStatus::mutable_sct() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.CTServerStatus.sct)
  return sct_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CTServerStatus::release_sct() {
  // @@protoc_insertion_point(field_release:zsearch.CTServerStatus.sct)
  
  return sct_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CTServerStatus::set_allocated_sct(::std::string* sct) {
  if (sct != NULL) {
    
  } else {
    
  }
  sct_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sct);
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTServerStatus.sct)
}

// string push_error = 7;
inline void CTServerStatus::clear_push_error() {
  push_error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CTServerStatus::push_error() const {
  // @@protoc_insertion_point(field_get:zsearch.CTServerStatus.push_error)
  return push_error_.GetNoArena();
}
inline void CTServerStatus::set_push_error(const ::std::string& value) {
  
  push_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.CTServerStatus.push_error)
}
#if LANG_CXX11
inline void CTServerStatus::set_push_error(::std::string&& value) {
  
  push_error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.CTServerStatus.push_error)
}
#endif
inline void CTServerStatus::set_push_error(const char* value) {
  
  push_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.CTServerStatus.push_error)
}
inline void CTServerStatus::set_push_error(const char* value, size_t size) {
  
  push_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.CTServerStatus.push_error)
}
inline ::std::string* CTServerStatus::mutable_push_error() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.CTServerStatus.push_error)
  return push_error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CTServerStatus::release_push_error() {
  // @@protoc_insertion_point(field_release:zsearch.CTServerStatus.push_error)
  
  return push_error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CTServerStatus::set_allocated_push_error(::std::string* push_error) {
  if (push_error != NULL) {
    
  } else {
    
  }
  push_error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), push_error);
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTServerStatus.push_error)
}

// -------------------------------------------------------------------

// CTStatus

// .zsearch.CTServerStatus censys_dev = 1;
inline bool CTStatus::has_censys_dev() const {
  return this != internal_default_instance() && censys_dev_ != NULL;
}
inline void CTStatus::clear_censys_dev() {
  if (GetArenaNoVirtual() == NULL && censys_dev_ != NULL) delete censys_dev_;
  censys_dev_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::censys_dev() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.censys_dev)
  return censys_dev_ != NULL ? *censys_dev_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_censys_dev() {
  
  if (censys_dev_ == NULL) {
    censys_dev_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.censys_dev)
  return censys_dev_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_censys_dev() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.censys_dev)
  
  ::zsearch::CTServerStatus* temp = censys_dev_;
  censys_dev_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_censys_dev(::zsearch::CTServerStatus* censys_dev) {
  delete censys_dev_;
  censys_dev_ = censys_dev;
  if (censys_dev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.censys_dev)
}

// .zsearch.CTServerStatus censys = 2;
inline bool CTStatus::has_censys() const {
  return this != internal_default_instance() && censys_ != NULL;
}
inline void CTStatus::clear_censys() {
  if (GetArenaNoVirtual() == NULL && censys_ != NULL) delete censys_;
  censys_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::censys() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.censys)
  return censys_ != NULL ? *censys_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_censys() {
  
  if (censys_ == NULL) {
    censys_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.censys)
  return censys_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_censys() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.censys)
  
  ::zsearch::CTServerStatus* temp = censys_;
  censys_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_censys(::zsearch::CTServerStatus* censys) {
  delete censys_;
  censys_ = censys;
  if (censys) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.censys)
}

// .zsearch.CTServerStatus google_aviator = 10;
inline bool CTStatus::has_google_aviator() const {
  return this != internal_default_instance() && google_aviator_ != NULL;
}
inline void CTStatus::clear_google_aviator() {
  if (GetArenaNoVirtual() == NULL && google_aviator_ != NULL) delete google_aviator_;
  google_aviator_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::google_aviator() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_aviator)
  return google_aviator_ != NULL ? *google_aviator_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_google_aviator() {
  
  if (google_aviator_ == NULL) {
    google_aviator_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_aviator)
  return google_aviator_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_google_aviator() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_aviator)
  
  ::zsearch::CTServerStatus* temp = google_aviator_;
  google_aviator_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_google_aviator(::zsearch::CTServerStatus* google_aviator) {
  delete google_aviator_;
  google_aviator_ = google_aviator;
  if (google_aviator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_aviator)
}

// .zsearch.CTServerStatus google_pilot = 11;
inline bool CTStatus::has_google_pilot() const {
  return this != internal_default_instance() && google_pilot_ != NULL;
}
inline void CTStatus::clear_google_pilot() {
  if (GetArenaNoVirtual() == NULL && google_pilot_ != NULL) delete google_pilot_;
  google_pilot_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::google_pilot() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_pilot)
  return google_pilot_ != NULL ? *google_pilot_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_google_pilot() {
  
  if (google_pilot_ == NULL) {
    google_pilot_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_pilot)
  return google_pilot_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_google_pilot() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_pilot)
  
  ::zsearch::CTServerStatus* temp = google_pilot_;
  google_pilot_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_google_pilot(::zsearch::CTServerStatus* google_pilot) {
  delete google_pilot_;
  google_pilot_ = google_pilot;
  if (google_pilot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_pilot)
}

// .zsearch.CTServerStatus google_rocketeer = 12;
inline bool CTStatus::has_google_rocketeer() const {
  return this != internal_default_instance() && google_rocketeer_ != NULL;
}
inline void CTStatus::clear_google_rocketeer() {
  if (GetArenaNoVirtual() == NULL && google_rocketeer_ != NULL) delete google_rocketeer_;
  google_rocketeer_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::google_rocketeer() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_rocketeer)
  return google_rocketeer_ != NULL ? *google_rocketeer_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_google_rocketeer() {
  
  if (google_rocketeer_ == NULL) {
    google_rocketeer_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_rocketeer)
  return google_rocketeer_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_google_rocketeer() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_rocketeer)
  
  ::zsearch::CTServerStatus* temp = google_rocketeer_;
  google_rocketeer_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_google_rocketeer(::zsearch::CTServerStatus* google_rocketeer) {
  delete google_rocketeer_;
  google_rocketeer_ = google_rocketeer;
  if (google_rocketeer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_rocketeer)
}

// .zsearch.CTServerStatus google_submariner = 13;
inline bool CTStatus::has_google_submariner() const {
  return this != internal_default_instance() && google_submariner_ != NULL;
}
inline void CTStatus::clear_google_submariner() {
  if (GetArenaNoVirtual() == NULL && google_submariner_ != NULL) delete google_submariner_;
  google_submariner_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::google_submariner() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_submariner)
  return google_submariner_ != NULL ? *google_submariner_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_google_submariner() {
  
  if (google_submariner_ == NULL) {
    google_submariner_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_submariner)
  return google_submariner_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_google_submariner() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_submariner)
  
  ::zsearch::CTServerStatus* temp = google_submariner_;
  google_submariner_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_google_submariner(::zsearch::CTServerStatus* google_submariner) {
  delete google_submariner_;
  google_submariner_ = google_submariner;
  if (google_submariner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_submariner)
}

// .zsearch.CTServerStatus google_testtube = 14;
inline bool CTStatus::has_google_testtube() const {
  return this != internal_default_instance() && google_testtube_ != NULL;
}
inline void CTStatus::clear_google_testtube() {
  if (GetArenaNoVirtual() == NULL && google_testtube_ != NULL) delete google_testtube_;
  google_testtube_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::google_testtube() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_testtube)
  return google_testtube_ != NULL ? *google_testtube_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_google_testtube() {
  
  if (google_testtube_ == NULL) {
    google_testtube_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_testtube)
  return google_testtube_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_google_testtube() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_testtube)
  
  ::zsearch::CTServerStatus* temp = google_testtube_;
  google_testtube_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_google_testtube(::zsearch::CTServerStatus* google_testtube) {
  delete google_testtube_;
  google_testtube_ = google_testtube;
  if (google_testtube) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_testtube)
}

// .zsearch.CTServerStatus google_icarus = 15;
inline bool CTStatus::has_google_icarus() const {
  return this != internal_default_instance() && google_icarus_ != NULL;
}
inline void CTStatus::clear_google_icarus() {
  if (GetArenaNoVirtual() == NULL && google_icarus_ != NULL) delete google_icarus_;
  google_icarus_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::google_icarus() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_icarus)
  return google_icarus_ != NULL ? *google_icarus_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_google_icarus() {
  
  if (google_icarus_ == NULL) {
    google_icarus_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_icarus)
  return google_icarus_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_google_icarus() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_icarus)
  
  ::zsearch::CTServerStatus* temp = google_icarus_;
  google_icarus_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_google_icarus(::zsearch::CTServerStatus* google_icarus) {
  delete google_icarus_;
  google_icarus_ = google_icarus;
  if (google_icarus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_icarus)
}

// .zsearch.CTServerStatus google_skydiver = 16;
inline bool CTStatus::has_google_skydiver() const {
  return this != internal_default_instance() && google_skydiver_ != NULL;
}
inline void CTStatus::clear_google_skydiver() {
  if (GetArenaNoVirtual() == NULL && google_skydiver_ != NULL) delete google_skydiver_;
  google_skydiver_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::google_skydiver() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_skydiver)
  return google_skydiver_ != NULL ? *google_skydiver_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_google_skydiver() {
  
  if (google_skydiver_ == NULL) {
    google_skydiver_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_skydiver)
  return google_skydiver_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_google_skydiver() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_skydiver)
  
  ::zsearch::CTServerStatus* temp = google_skydiver_;
  google_skydiver_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_google_skydiver(::zsearch::CTServerStatus* google_skydiver) {
  delete google_skydiver_;
  google_skydiver_ = google_skydiver;
  if (google_skydiver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_skydiver)
}

// .zsearch.CTServerStatus google_daedalus = 17;
inline bool CTStatus::has_google_daedalus() const {
  return this != internal_default_instance() && google_daedalus_ != NULL;
}
inline void CTStatus::clear_google_daedalus() {
  if (GetArenaNoVirtual() == NULL && google_daedalus_ != NULL) delete google_daedalus_;
  google_daedalus_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::google_daedalus() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_daedalus)
  return google_daedalus_ != NULL ? *google_daedalus_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_google_daedalus() {
  
  if (google_daedalus_ == NULL) {
    google_daedalus_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_daedalus)
  return google_daedalus_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_google_daedalus() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_daedalus)
  
  ::zsearch::CTServerStatus* temp = google_daedalus_;
  google_daedalus_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_google_daedalus(::zsearch::CTServerStatus* google_daedalus) {
  delete google_daedalus_;
  google_daedalus_ = google_daedalus;
  if (google_daedalus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_daedalus)
}

// .zsearch.CTServerStatus digicert_ct1 = 20;
inline bool CTStatus::has_digicert_ct1() const {
  return this != internal_default_instance() && digicert_ct1_ != NULL;
}
inline void CTStatus::clear_digicert_ct1() {
  if (GetArenaNoVirtual() == NULL && digicert_ct1_ != NULL) delete digicert_ct1_;
  digicert_ct1_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::digicert_ct1() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.digicert_ct1)
  return digicert_ct1_ != NULL ? *digicert_ct1_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_digicert_ct1() {
  
  if (digicert_ct1_ == NULL) {
    digicert_ct1_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.digicert_ct1)
  return digicert_ct1_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_digicert_ct1() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.digicert_ct1)
  
  ::zsearch::CTServerStatus* temp = digicert_ct1_;
  digicert_ct1_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_digicert_ct1(::zsearch::CTServerStatus* digicert_ct1) {
  delete digicert_ct1_;
  digicert_ct1_ = digicert_ct1;
  if (digicert_ct1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.digicert_ct1)
}

// .zsearch.CTServerStatus digicert_ct2 = 40;
inline bool CTStatus::has_digicert_ct2() const {
  return this != internal_default_instance() && digicert_ct2_ != NULL;
}
inline void CTStatus::clear_digicert_ct2() {
  if (GetArenaNoVirtual() == NULL && digicert_ct2_ != NULL) delete digicert_ct2_;
  digicert_ct2_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::digicert_ct2() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.digicert_ct2)
  return digicert_ct2_ != NULL ? *digicert_ct2_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_digicert_ct2() {
  
  if (digicert_ct2_ == NULL) {
    digicert_ct2_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.digicert_ct2)
  return digicert_ct2_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_digicert_ct2() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.digicert_ct2)
  
  ::zsearch::CTServerStatus* temp = digicert_ct2_;
  digicert_ct2_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_digicert_ct2(::zsearch::CTServerStatus* digicert_ct2) {
  delete digicert_ct2_;
  digicert_ct2_ = digicert_ct2;
  if (digicert_ct2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.digicert_ct2)
}

// .zsearch.CTServerStatus izenpe_com_ct = 21;
inline bool CTStatus::has_izenpe_com_ct() const {
  return this != internal_default_instance() && izenpe_com_ct_ != NULL;
}
inline void CTStatus::clear_izenpe_com_ct() {
  if (GetArenaNoVirtual() == NULL && izenpe_com_ct_ != NULL) delete izenpe_com_ct_;
  izenpe_com_ct_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::izenpe_com_ct() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.izenpe_com_ct)
  return izenpe_com_ct_ != NULL ? *izenpe_com_ct_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_izenpe_com_ct() {
  
  if (izenpe_com_ct_ == NULL) {
    izenpe_com_ct_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.izenpe_com_ct)
  return izenpe_com_ct_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_izenpe_com_ct() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.izenpe_com_ct)
  
  ::zsearch::CTServerStatus* temp = izenpe_com_ct_;
  izenpe_com_ct_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_izenpe_com_ct(::zsearch::CTServerStatus* izenpe_com_ct) {
  delete izenpe_com_ct_;
  izenpe_com_ct_ = izenpe_com_ct;
  if (izenpe_com_ct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.izenpe_com_ct)
}

// .zsearch.CTServerStatus izenpe_eus_ct = 22;
inline bool CTStatus::has_izenpe_eus_ct() const {
  return this != internal_default_instance() && izenpe_eus_ct_ != NULL;
}
inline void CTStatus::clear_izenpe_eus_ct() {
  if (GetArenaNoVirtual() == NULL && izenpe_eus_ct_ != NULL) delete izenpe_eus_ct_;
  izenpe_eus_ct_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::izenpe_eus_ct() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.izenpe_eus_ct)
  return izenpe_eus_ct_ != NULL ? *izenpe_eus_ct_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_izenpe_eus_ct() {
  
  if (izenpe_eus_ct_ == NULL) {
    izenpe_eus_ct_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.izenpe_eus_ct)
  return izenpe_eus_ct_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_izenpe_eus_ct() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.izenpe_eus_ct)
  
  ::zsearch::CTServerStatus* temp = izenpe_eus_ct_;
  izenpe_eus_ct_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_izenpe_eus_ct(::zsearch::CTServerStatus* izenpe_eus_ct) {
  delete izenpe_eus_ct_;
  izenpe_eus_ct_ = izenpe_eus_ct;
  if (izenpe_eus_ct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.izenpe_eus_ct)
}

// .zsearch.CTServerStatus symantec_ws_ct = 23;
inline bool CTStatus::has_symantec_ws_ct() const {
  return this != internal_default_instance() && symantec_ws_ct_ != NULL;
}
inline void CTStatus::clear_symantec_ws_ct() {
  if (GetArenaNoVirtual() == NULL && symantec_ws_ct_ != NULL) delete symantec_ws_ct_;
  symantec_ws_ct_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::symantec_ws_ct() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.symantec_ws_ct)
  return symantec_ws_ct_ != NULL ? *symantec_ws_ct_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_symantec_ws_ct() {
  
  if (symantec_ws_ct_ == NULL) {
    symantec_ws_ct_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.symantec_ws_ct)
  return symantec_ws_ct_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_symantec_ws_ct() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.symantec_ws_ct)
  
  ::zsearch::CTServerStatus* temp = symantec_ws_ct_;
  symantec_ws_ct_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_symantec_ws_ct(::zsearch::CTServerStatus* symantec_ws_ct) {
  delete symantec_ws_ct_;
  symantec_ws_ct_ = symantec_ws_ct;
  if (symantec_ws_ct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.symantec_ws_ct)
}

// .zsearch.CTServerStatus symantec_ws_vega = 24;
inline bool CTStatus::has_symantec_ws_vega() const {
  return this != internal_default_instance() && symantec_ws_vega_ != NULL;
}
inline void CTStatus::clear_symantec_ws_vega() {
  if (GetArenaNoVirtual() == NULL && symantec_ws_vega_ != NULL) delete symantec_ws_vega_;
  symantec_ws_vega_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::symantec_ws_vega() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.symantec_ws_vega)
  return symantec_ws_vega_ != NULL ? *symantec_ws_vega_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_symantec_ws_vega() {
  
  if (symantec_ws_vega_ == NULL) {
    symantec_ws_vega_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.symantec_ws_vega)
  return symantec_ws_vega_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_symantec_ws_vega() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.symantec_ws_vega)
  
  ::zsearch::CTServerStatus* temp = symantec_ws_vega_;
  symantec_ws_vega_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_symantec_ws_vega(::zsearch::CTServerStatus* symantec_ws_vega) {
  delete symantec_ws_vega_;
  symantec_ws_vega_ = symantec_ws_vega;
  if (symantec_ws_vega) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.symantec_ws_vega)
}

// .zsearch.CTServerStatus symantec_ws_sirius = 37;
inline bool CTStatus::has_symantec_ws_sirius() const {
  return this != internal_default_instance() && symantec_ws_sirius_ != NULL;
}
inline void CTStatus::clear_symantec_ws_sirius() {
  if (GetArenaNoVirtual() == NULL && symantec_ws_sirius_ != NULL) delete symantec_ws_sirius_;
  symantec_ws_sirius_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::symantec_ws_sirius() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.symantec_ws_sirius)
  return symantec_ws_sirius_ != NULL ? *symantec_ws_sirius_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_symantec_ws_sirius() {
  
  if (symantec_ws_sirius_ == NULL) {
    symantec_ws_sirius_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.symantec_ws_sirius)
  return symantec_ws_sirius_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_symantec_ws_sirius() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.symantec_ws_sirius)
  
  ::zsearch::CTServerStatus* temp = symantec_ws_sirius_;
  symantec_ws_sirius_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_symantec_ws_sirius(::zsearch::CTServerStatus* symantec_ws_sirius) {
  delete symantec_ws_sirius_;
  symantec_ws_sirius_ = symantec_ws_sirius;
  if (symantec_ws_sirius) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.symantec_ws_sirius)
}

// .zsearch.CTServerStatus symantec_ws_deneb = 32;
inline bool CTStatus::has_symantec_ws_deneb() const {
  return this != internal_default_instance() && symantec_ws_deneb_ != NULL;
}
inline void CTStatus::clear_symantec_ws_deneb() {
  if (GetArenaNoVirtual() == NULL && symantec_ws_deneb_ != NULL) delete symantec_ws_deneb_;
  symantec_ws_deneb_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::symantec_ws_deneb() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.symantec_ws_deneb)
  return symantec_ws_deneb_ != NULL ? *symantec_ws_deneb_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_symantec_ws_deneb() {
  
  if (symantec_ws_deneb_ == NULL) {
    symantec_ws_deneb_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.symantec_ws_deneb)
  return symantec_ws_deneb_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_symantec_ws_deneb() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.symantec_ws_deneb)
  
  ::zsearch::CTServerStatus* temp = symantec_ws_deneb_;
  symantec_ws_deneb_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_symantec_ws_deneb(::zsearch::CTServerStatus* symantec_ws_deneb) {
  delete symantec_ws_deneb_;
  symantec_ws_deneb_ = symantec_ws_deneb;
  if (symantec_ws_deneb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.symantec_ws_deneb)
}

// .zsearch.CTServerStatus comodo_dodo = 34;
inline bool CTStatus::has_comodo_dodo() const {
  return this != internal_default_instance() && comodo_dodo_ != NULL;
}
inline void CTStatus::clear_comodo_dodo() {
  if (GetArenaNoVirtual() == NULL && comodo_dodo_ != NULL) delete comodo_dodo_;
  comodo_dodo_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::comodo_dodo() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.comodo_dodo)
  return comodo_dodo_ != NULL ? *comodo_dodo_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_comodo_dodo() {
  
  if (comodo_dodo_ == NULL) {
    comodo_dodo_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.comodo_dodo)
  return comodo_dodo_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_comodo_dodo() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.comodo_dodo)
  
  ::zsearch::CTServerStatus* temp = comodo_dodo_;
  comodo_dodo_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_comodo_dodo(::zsearch::CTServerStatus* comodo_dodo) {
  delete comodo_dodo_;
  comodo_dodo_ = comodo_dodo;
  if (comodo_dodo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.comodo_dodo)
}

// .zsearch.CTServerStatus comodo_mammoth = 35;
inline bool CTStatus::has_comodo_mammoth() const {
  return this != internal_default_instance() && comodo_mammoth_ != NULL;
}
inline void CTStatus::clear_comodo_mammoth() {
  if (GetArenaNoVirtual() == NULL && comodo_mammoth_ != NULL) delete comodo_mammoth_;
  comodo_mammoth_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::comodo_mammoth() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.comodo_mammoth)
  return comodo_mammoth_ != NULL ? *comodo_mammoth_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_comodo_mammoth() {
  
  if (comodo_mammoth_ == NULL) {
    comodo_mammoth_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.comodo_mammoth)
  return comodo_mammoth_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_comodo_mammoth() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.comodo_mammoth)
  
  ::zsearch::CTServerStatus* temp = comodo_mammoth_;
  comodo_mammoth_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_comodo_mammoth(::zsearch::CTServerStatus* comodo_mammoth) {
  delete comodo_mammoth_;
  comodo_mammoth_ = comodo_mammoth;
  if (comodo_mammoth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.comodo_mammoth)
}

// .zsearch.CTServerStatus comodo_sabre = 41;
inline bool CTStatus::has_comodo_sabre() const {
  return this != internal_default_instance() && comodo_sabre_ != NULL;
}
inline void CTStatus::clear_comodo_sabre() {
  if (GetArenaNoVirtual() == NULL && comodo_sabre_ != NULL) delete comodo_sabre_;
  comodo_sabre_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::comodo_sabre() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.comodo_sabre)
  return comodo_sabre_ != NULL ? *comodo_sabre_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_comodo_sabre() {
  
  if (comodo_sabre_ == NULL) {
    comodo_sabre_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.comodo_sabre)
  return comodo_sabre_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_comodo_sabre() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.comodo_sabre)
  
  ::zsearch::CTServerStatus* temp = comodo_sabre_;
  comodo_sabre_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_comodo_sabre(::zsearch::CTServerStatus* comodo_sabre) {
  delete comodo_sabre_;
  comodo_sabre_ = comodo_sabre;
  if (comodo_sabre) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.comodo_sabre)
}

// .zsearch.CTServerStatus wosign_ctlog = 25;
inline bool CTStatus::has_wosign_ctlog() const {
  return this != internal_default_instance() && wosign_ctlog_ != NULL;
}
inline void CTStatus::clear_wosign_ctlog() {
  if (GetArenaNoVirtual() == NULL && wosign_ctlog_ != NULL) delete wosign_ctlog_;
  wosign_ctlog_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::wosign_ctlog() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.wosign_ctlog)
  return wosign_ctlog_ != NULL ? *wosign_ctlog_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_wosign_ctlog() {
  
  if (wosign_ctlog_ == NULL) {
    wosign_ctlog_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.wosign_ctlog)
  return wosign_ctlog_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_wosign_ctlog() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.wosign_ctlog)
  
  ::zsearch::CTServerStatus* temp = wosign_ctlog_;
  wosign_ctlog_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_wosign_ctlog(::zsearch::CTServerStatus* wosign_ctlog) {
  delete wosign_ctlog_;
  wosign_ctlog_ = wosign_ctlog;
  if (wosign_ctlog) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.wosign_ctlog)
}

// .zsearch.CTServerStatus wosign_ct = 26;
inline bool CTStatus::has_wosign_ct() const {
  return this != internal_default_instance() && wosign_ct_ != NULL;
}
inline void CTStatus::clear_wosign_ct() {
  if (GetArenaNoVirtual() == NULL && wosign_ct_ != NULL) delete wosign_ct_;
  wosign_ct_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::wosign_ct() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.wosign_ct)
  return wosign_ct_ != NULL ? *wosign_ct_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_wosign_ct() {
  
  if (wosign_ct_ == NULL) {
    wosign_ct_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.wosign_ct)
  return wosign_ct_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_wosign_ct() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.wosign_ct)
  
  ::zsearch::CTServerStatus* temp = wosign_ct_;
  wosign_ct_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_wosign_ct(::zsearch::CTServerStatus* wosign_ct) {
  delete wosign_ct_;
  wosign_ct_ = wosign_ct;
  if (wosign_ct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.wosign_ct)
}

// .zsearch.CTServerStatus gdca_ct = 28;
inline bool CTStatus::has_gdca_ct() const {
  return this != internal_default_instance() && gdca_ct_ != NULL;
}
inline void CTStatus::clear_gdca_ct() {
  if (GetArenaNoVirtual() == NULL && gdca_ct_ != NULL) delete gdca_ct_;
  gdca_ct_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::gdca_ct() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.gdca_ct)
  return gdca_ct_ != NULL ? *gdca_ct_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_gdca_ct() {
  
  if (gdca_ct_ == NULL) {
    gdca_ct_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.gdca_ct)
  return gdca_ct_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_gdca_ct() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.gdca_ct)
  
  ::zsearch::CTServerStatus* temp = gdca_ct_;
  gdca_ct_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_gdca_ct(::zsearch::CTServerStatus* gdca_ct) {
  delete gdca_ct_;
  gdca_ct_ = gdca_ct;
  if (gdca_ct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.gdca_ct)
}

// .zsearch.CTServerStatus gdca_ctlog = 36;
inline bool CTStatus::has_gdca_ctlog() const {
  return this != internal_default_instance() && gdca_ctlog_ != NULL;
}
inline void CTStatus::clear_gdca_ctlog() {
  if (GetArenaNoVirtual() == NULL && gdca_ctlog_ != NULL) delete gdca_ctlog_;
  gdca_ctlog_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::gdca_ctlog() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.gdca_ctlog)
  return gdca_ctlog_ != NULL ? *gdca_ctlog_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_gdca_ctlog() {
  
  if (gdca_ctlog_ == NULL) {
    gdca_ctlog_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.gdca_ctlog)
  return gdca_ctlog_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_gdca_ctlog() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.gdca_ctlog)
  
  ::zsearch::CTServerStatus* temp = gdca_ctlog_;
  gdca_ctlog_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_gdca_ctlog(::zsearch::CTServerStatus* gdca_ctlog) {
  delete gdca_ctlog_;
  gdca_ctlog_ = gdca_ctlog;
  if (gdca_ctlog) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.gdca_ctlog)
}

// .zsearch.CTServerStatus gdca_log = 45;
inline bool CTStatus::has_gdca_log() const {
  return this != internal_default_instance() && gdca_log_ != NULL;
}
inline void CTStatus::clear_gdca_log() {
  if (GetArenaNoVirtual() == NULL && gdca_log_ != NULL) delete gdca_log_;
  gdca_log_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::gdca_log() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.gdca_log)
  return gdca_log_ != NULL ? *gdca_log_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_gdca_log() {
  
  if (gdca_log_ == NULL) {
    gdca_log_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.gdca_log)
  return gdca_log_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_gdca_log() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.gdca_log)
  
  ::zsearch::CTServerStatus* temp = gdca_log_;
  gdca_log_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_gdca_log(::zsearch::CTServerStatus* gdca_log) {
  delete gdca_log_;
  gdca_log_ = gdca_log;
  if (gdca_log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.gdca_log)
}

// .zsearch.CTServerStatus gdca_log2 = 46;
inline bool CTStatus::has_gdca_log2() const {
  return this != internal_default_instance() && gdca_log2_ != NULL;
}
inline void CTStatus::clear_gdca_log2() {
  if (GetArenaNoVirtual() == NULL && gdca_log2_ != NULL) delete gdca_log2_;
  gdca_log2_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::gdca_log2() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.gdca_log2)
  return gdca_log2_ != NULL ? *gdca_log2_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_gdca_log2() {
  
  if (gdca_log2_ == NULL) {
    gdca_log2_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.gdca_log2)
  return gdca_log2_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_gdca_log2() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.gdca_log2)
  
  ::zsearch::CTServerStatus* temp = gdca_log2_;
  gdca_log2_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_gdca_log2(::zsearch::CTServerStatus* gdca_log2) {
  delete gdca_log2_;
  gdca_log2_ = gdca_log2;
  if (gdca_log2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.gdca_log2)
}

// .zsearch.CTServerStatus venafi_api_ctlog = 31;
inline bool CTStatus::has_venafi_api_ctlog() const {
  return this != internal_default_instance() && venafi_api_ctlog_ != NULL;
}
inline void CTStatus::clear_venafi_api_ctlog() {
  if (GetArenaNoVirtual() == NULL && venafi_api_ctlog_ != NULL) delete venafi_api_ctlog_;
  venafi_api_ctlog_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::venafi_api_ctlog() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.venafi_api_ctlog)
  return venafi_api_ctlog_ != NULL ? *venafi_api_ctlog_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_venafi_api_ctlog() {
  
  if (venafi_api_ctlog_ == NULL) {
    venafi_api_ctlog_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.venafi_api_ctlog)
  return venafi_api_ctlog_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_venafi_api_ctlog() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.venafi_api_ctlog)
  
  ::zsearch::CTServerStatus* temp = venafi_api_ctlog_;
  venafi_api_ctlog_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_venafi_api_ctlog(::zsearch::CTServerStatus* venafi_api_ctlog) {
  delete venafi_api_ctlog_;
  venafi_api_ctlog_ = venafi_api_ctlog;
  if (venafi_api_ctlog) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.venafi_api_ctlog)
}

// .zsearch.CTServerStatus venafi_api_ctlog_gen2 = 39;
inline bool CTStatus::has_venafi_api_ctlog_gen2() const {
  return this != internal_default_instance() && venafi_api_ctlog_gen2_ != NULL;
}
inline void CTStatus::clear_venafi_api_ctlog_gen2() {
  if (GetArenaNoVirtual() == NULL && venafi_api_ctlog_gen2_ != NULL) delete venafi_api_ctlog_gen2_;
  venafi_api_ctlog_gen2_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::venafi_api_ctlog_gen2() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.venafi_api_ctlog_gen2)
  return venafi_api_ctlog_gen2_ != NULL ? *venafi_api_ctlog_gen2_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_venafi_api_ctlog_gen2() {
  
  if (venafi_api_ctlog_gen2_ == NULL) {
    venafi_api_ctlog_gen2_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.venafi_api_ctlog_gen2)
  return venafi_api_ctlog_gen2_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_venafi_api_ctlog_gen2() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.venafi_api_ctlog_gen2)
  
  ::zsearch::CTServerStatus* temp = venafi_api_ctlog_gen2_;
  venafi_api_ctlog_gen2_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_venafi_api_ctlog_gen2(::zsearch::CTServerStatus* venafi_api_ctlog_gen2) {
  delete venafi_api_ctlog_gen2_;
  venafi_api_ctlog_gen2_ = venafi_api_ctlog_gen2;
  if (venafi_api_ctlog_gen2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.venafi_api_ctlog_gen2)
}

// .zsearch.CTServerStatus nordu_ct_plausible = 33;
inline bool CTStatus::has_nordu_ct_plausible() const {
  return this != internal_default_instance() && nordu_ct_plausible_ != NULL;
}
inline void CTStatus::clear_nordu_ct_plausible() {
  if (GetArenaNoVirtual() == NULL && nordu_ct_plausible_ != NULL) delete nordu_ct_plausible_;
  nordu_ct_plausible_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::nordu_ct_plausible() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.nordu_ct_plausible)
  return nordu_ct_plausible_ != NULL ? *nordu_ct_plausible_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_nordu_ct_plausible() {
  
  if (nordu_ct_plausible_ == NULL) {
    nordu_ct_plausible_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.nordu_ct_plausible)
  return nordu_ct_plausible_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_nordu_ct_plausible() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.nordu_ct_plausible)
  
  ::zsearch::CTServerStatus* temp = nordu_ct_plausible_;
  nordu_ct_plausible_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_nordu_ct_plausible(::zsearch::CTServerStatus* nordu_ct_plausible) {
  delete nordu_ct_plausible_;
  nordu_ct_plausible_ = nordu_ct_plausible;
  if (nordu_ct_plausible) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.nordu_ct_plausible)
}

// .zsearch.CTServerStatus cnnic_ctserver = 27;
inline bool CTStatus::has_cnnic_ctserver() const {
  return this != internal_default_instance() && cnnic_ctserver_ != NULL;
}
inline void CTStatus::clear_cnnic_ctserver() {
  if (GetArenaNoVirtual() == NULL && cnnic_ctserver_ != NULL) delete cnnic_ctserver_;
  cnnic_ctserver_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::cnnic_ctserver() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.cnnic_ctserver)
  return cnnic_ctserver_ != NULL ? *cnnic_ctserver_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_cnnic_ctserver() {
  
  if (cnnic_ctserver_ == NULL) {
    cnnic_ctserver_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.cnnic_ctserver)
  return cnnic_ctserver_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_cnnic_ctserver() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.cnnic_ctserver)
  
  ::zsearch::CTServerStatus* temp = cnnic_ctserver_;
  cnnic_ctserver_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_cnnic_ctserver(::zsearch::CTServerStatus* cnnic_ctserver) {
  delete cnnic_ctserver_;
  cnnic_ctserver_ = cnnic_ctserver;
  if (cnnic_ctserver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.cnnic_ctserver)
}

// .zsearch.CTServerStatus startssl_ct = 29;
inline bool CTStatus::has_startssl_ct() const {
  return this != internal_default_instance() && startssl_ct_ != NULL;
}
inline void CTStatus::clear_startssl_ct() {
  if (GetArenaNoVirtual() == NULL && startssl_ct_ != NULL) delete startssl_ct_;
  startssl_ct_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::startssl_ct() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.startssl_ct)
  return startssl_ct_ != NULL ? *startssl_ct_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_startssl_ct() {
  
  if (startssl_ct_ == NULL) {
    startssl_ct_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.startssl_ct)
  return startssl_ct_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_startssl_ct() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.startssl_ct)
  
  ::zsearch::CTServerStatus* temp = startssl_ct_;
  startssl_ct_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_startssl_ct(::zsearch::CTServerStatus* startssl_ct) {
  delete startssl_ct_;
  startssl_ct_ = startssl_ct;
  if (startssl_ct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.startssl_ct)
}

// .zsearch.CTServerStatus certly_log = 30;
inline bool CTStatus::has_certly_log() const {
  return this != internal_default_instance() && certly_log_ != NULL;
}
inline void CTStatus::clear_certly_log() {
  if (GetArenaNoVirtual() == NULL && certly_log_ != NULL) delete certly_log_;
  certly_log_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::certly_log() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.certly_log)
  return certly_log_ != NULL ? *certly_log_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_certly_log() {
  
  if (certly_log_ == NULL) {
    certly_log_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.certly_log)
  return certly_log_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_certly_log() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.certly_log)
  
  ::zsearch::CTServerStatus* temp = certly_log_;
  certly_log_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_certly_log(::zsearch::CTServerStatus* certly_log) {
  delete certly_log_;
  certly_log_ = certly_log;
  if (certly_log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.certly_log)
}

// .zsearch.CTServerStatus sheca_ct = 42;
inline bool CTStatus::has_sheca_ct() const {
  return this != internal_default_instance() && sheca_ct_ != NULL;
}
inline void CTStatus::clear_sheca_ct() {
  if (GetArenaNoVirtual() == NULL && sheca_ct_ != NULL) delete sheca_ct_;
  sheca_ct_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::sheca_ct() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.sheca_ct)
  return sheca_ct_ != NULL ? *sheca_ct_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_sheca_ct() {
  
  if (sheca_ct_ == NULL) {
    sheca_ct_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.sheca_ct)
  return sheca_ct_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_sheca_ct() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.sheca_ct)
  
  ::zsearch::CTServerStatus* temp = sheca_ct_;
  sheca_ct_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_sheca_ct(::zsearch::CTServerStatus* sheca_ct) {
  delete sheca_ct_;
  sheca_ct_ = sheca_ct;
  if (sheca_ct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.sheca_ct)
}

// .zsearch.CTServerStatus letsencrypt_ct_clicky = 43;
inline bool CTStatus::has_letsencrypt_ct_clicky() const {
  return this != internal_default_instance() && letsencrypt_ct_clicky_ != NULL;
}
inline void CTStatus::clear_letsencrypt_ct_clicky() {
  if (GetArenaNoVirtual() == NULL && letsencrypt_ct_clicky_ != NULL) delete letsencrypt_ct_clicky_;
  letsencrypt_ct_clicky_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::letsencrypt_ct_clicky() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.letsencrypt_ct_clicky)
  return letsencrypt_ct_clicky_ != NULL ? *letsencrypt_ct_clicky_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_letsencrypt_ct_clicky() {
  
  if (letsencrypt_ct_clicky_ == NULL) {
    letsencrypt_ct_clicky_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.letsencrypt_ct_clicky)
  return letsencrypt_ct_clicky_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_letsencrypt_ct_clicky() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.letsencrypt_ct_clicky)
  
  ::zsearch::CTServerStatus* temp = letsencrypt_ct_clicky_;
  letsencrypt_ct_clicky_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_letsencrypt_ct_clicky(::zsearch::CTServerStatus* letsencrypt_ct_clicky) {
  delete letsencrypt_ct_clicky_;
  letsencrypt_ct_clicky_ = letsencrypt_ct_clicky;
  if (letsencrypt_ct_clicky) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.letsencrypt_ct_clicky)
}

// .zsearch.CTServerStatus behind_the_sofa = 44;
inline bool CTStatus::has_behind_the_sofa() const {
  return this != internal_default_instance() && behind_the_sofa_ != NULL;
}
inline void CTStatus::clear_behind_the_sofa() {
  if (GetArenaNoVirtual() == NULL && behind_the_sofa_ != NULL) delete behind_the_sofa_;
  behind_the_sofa_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::behind_the_sofa() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.behind_the_sofa)
  return behind_the_sofa_ != NULL ? *behind_the_sofa_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_behind_the_sofa() {
  
  if (behind_the_sofa_ == NULL) {
    behind_the_sofa_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.behind_the_sofa)
  return behind_the_sofa_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_behind_the_sofa() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.behind_the_sofa)
  
  ::zsearch::CTServerStatus* temp = behind_the_sofa_;
  behind_the_sofa_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_behind_the_sofa(::zsearch::CTServerStatus* behind_the_sofa) {
  delete behind_the_sofa_;
  behind_the_sofa_ = behind_the_sofa;
  if (behind_the_sofa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.behind_the_sofa)
}

// .zsearch.CTServerStatus wotrus_ctlog = 47;
inline bool CTStatus::has_wotrus_ctlog() const {
  return this != internal_default_instance() && wotrus_ctlog_ != NULL;
}
inline void CTStatus::clear_wotrus_ctlog() {
  if (GetArenaNoVirtual() == NULL && wotrus_ctlog_ != NULL) delete wotrus_ctlog_;
  wotrus_ctlog_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::wotrus_ctlog() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.wotrus_ctlog)
  return wotrus_ctlog_ != NULL ? *wotrus_ctlog_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_wotrus_ctlog() {
  
  if (wotrus_ctlog_ == NULL) {
    wotrus_ctlog_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.wotrus_ctlog)
  return wotrus_ctlog_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_wotrus_ctlog() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.wotrus_ctlog)
  
  ::zsearch::CTServerStatus* temp = wotrus_ctlog_;
  wotrus_ctlog_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_wotrus_ctlog(::zsearch::CTServerStatus* wotrus_ctlog) {
  delete wotrus_ctlog_;
  wotrus_ctlog_ = wotrus_ctlog;
  if (wotrus_ctlog) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.wotrus_ctlog)
}

// .zsearch.CTServerStatus wotrus_ctlog3 = 48;
inline bool CTStatus::has_wotrus_ctlog3() const {
  return this != internal_default_instance() && wotrus_ctlog3_ != NULL;
}
inline void CTStatus::clear_wotrus_ctlog3() {
  if (GetArenaNoVirtual() == NULL && wotrus_ctlog3_ != NULL) delete wotrus_ctlog3_;
  wotrus_ctlog3_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::wotrus_ctlog3() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.wotrus_ctlog3)
  return wotrus_ctlog3_ != NULL ? *wotrus_ctlog3_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_wotrus_ctlog3() {
  
  if (wotrus_ctlog3_ == NULL) {
    wotrus_ctlog3_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.wotrus_ctlog3)
  return wotrus_ctlog3_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_wotrus_ctlog3() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.wotrus_ctlog3)
  
  ::zsearch::CTServerStatus* temp = wotrus_ctlog3_;
  wotrus_ctlog3_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_wotrus_ctlog3(::zsearch::CTServerStatus* wotrus_ctlog3) {
  delete wotrus_ctlog3_;
  wotrus_ctlog3_ = wotrus_ctlog3;
  if (wotrus_ctlog3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.wotrus_ctlog3)
}

// .zsearch.CTServerStatus certificatetransparency_cn_ct = 38;
inline bool CTStatus::has_certificatetransparency_cn_ct() const {
  return this != internal_default_instance() && certificatetransparency_cn_ct_ != NULL;
}
inline void CTStatus::clear_certificatetransparency_cn_ct() {
  if (GetArenaNoVirtual() == NULL && certificatetransparency_cn_ct_ != NULL) delete certificatetransparency_cn_ct_;
  certificatetransparency_cn_ct_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::certificatetransparency_cn_ct() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.certificatetransparency_cn_ct)
  return certificatetransparency_cn_ct_ != NULL ? *certificatetransparency_cn_ct_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_certificatetransparency_cn_ct() {
  
  if (certificatetransparency_cn_ct_ == NULL) {
    certificatetransparency_cn_ct_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.certificatetransparency_cn_ct)
  return certificatetransparency_cn_ct_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_certificatetransparency_cn_ct() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.certificatetransparency_cn_ct)
  
  ::zsearch::CTServerStatus* temp = certificatetransparency_cn_ct_;
  certificatetransparency_cn_ct_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_certificatetransparency_cn_ct(::zsearch::CTServerStatus* certificatetransparency_cn_ct) {
  delete certificatetransparency_cn_ct_;
  certificatetransparency_cn_ct_ = certificatetransparency_cn_ct;
  if (certificatetransparency_cn_ct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.certificatetransparency_cn_ct)
}

// .zsearch.CTServerStatus google_argon_2017 = 50;
inline bool CTStatus::has_google_argon_2017() const {
  return this != internal_default_instance() && google_argon_2017_ != NULL;
}
inline void CTStatus::clear_google_argon_2017() {
  if (GetArenaNoVirtual() == NULL && google_argon_2017_ != NULL) delete google_argon_2017_;
  google_argon_2017_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::google_argon_2017() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_argon_2017)
  return google_argon_2017_ != NULL ? *google_argon_2017_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_google_argon_2017() {
  
  if (google_argon_2017_ == NULL) {
    google_argon_2017_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_argon_2017)
  return google_argon_2017_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_google_argon_2017() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_argon_2017)
  
  ::zsearch::CTServerStatus* temp = google_argon_2017_;
  google_argon_2017_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_google_argon_2017(::zsearch::CTServerStatus* google_argon_2017) {
  delete google_argon_2017_;
  google_argon_2017_ = google_argon_2017;
  if (google_argon_2017) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_argon_2017)
}

// .zsearch.CTServerStatus google_argon_2018 = 51;
inline bool CTStatus::has_google_argon_2018() const {
  return this != internal_default_instance() && google_argon_2018_ != NULL;
}
inline void CTStatus::clear_google_argon_2018() {
  if (GetArenaNoVirtual() == NULL && google_argon_2018_ != NULL) delete google_argon_2018_;
  google_argon_2018_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::google_argon_2018() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_argon_2018)
  return google_argon_2018_ != NULL ? *google_argon_2018_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_google_argon_2018() {
  
  if (google_argon_2018_ == NULL) {
    google_argon_2018_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_argon_2018)
  return google_argon_2018_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_google_argon_2018() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_argon_2018)
  
  ::zsearch::CTServerStatus* temp = google_argon_2018_;
  google_argon_2018_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_google_argon_2018(::zsearch::CTServerStatus* google_argon_2018) {
  delete google_argon_2018_;
  google_argon_2018_ = google_argon_2018;
  if (google_argon_2018) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_argon_2018)
}

// .zsearch.CTServerStatus google_argon_2019 = 52;
inline bool CTStatus::has_google_argon_2019() const {
  return this != internal_default_instance() && google_argon_2019_ != NULL;
}
inline void CTStatus::clear_google_argon_2019() {
  if (GetArenaNoVirtual() == NULL && google_argon_2019_ != NULL) delete google_argon_2019_;
  google_argon_2019_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::google_argon_2019() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_argon_2019)
  return google_argon_2019_ != NULL ? *google_argon_2019_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_google_argon_2019() {
  
  if (google_argon_2019_ == NULL) {
    google_argon_2019_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_argon_2019)
  return google_argon_2019_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_google_argon_2019() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_argon_2019)
  
  ::zsearch::CTServerStatus* temp = google_argon_2019_;
  google_argon_2019_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_google_argon_2019(::zsearch::CTServerStatus* google_argon_2019) {
  delete google_argon_2019_;
  google_argon_2019_ = google_argon_2019;
  if (google_argon_2019) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_argon_2019)
}

// .zsearch.CTServerStatus google_argon_2020 = 53;
inline bool CTStatus::has_google_argon_2020() const {
  return this != internal_default_instance() && google_argon_2020_ != NULL;
}
inline void CTStatus::clear_google_argon_2020() {
  if (GetArenaNoVirtual() == NULL && google_argon_2020_ != NULL) delete google_argon_2020_;
  google_argon_2020_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::google_argon_2020() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_argon_2020)
  return google_argon_2020_ != NULL ? *google_argon_2020_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_google_argon_2020() {
  
  if (google_argon_2020_ == NULL) {
    google_argon_2020_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_argon_2020)
  return google_argon_2020_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_google_argon_2020() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_argon_2020)
  
  ::zsearch::CTServerStatus* temp = google_argon_2020_;
  google_argon_2020_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_google_argon_2020(::zsearch::CTServerStatus* google_argon_2020) {
  delete google_argon_2020_;
  google_argon_2020_ = google_argon_2020;
  if (google_argon_2020) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_argon_2020)
}

// .zsearch.CTServerStatus google_argon_2021 = 54;
inline bool CTStatus::has_google_argon_2021() const {
  return this != internal_default_instance() && google_argon_2021_ != NULL;
}
inline void CTStatus::clear_google_argon_2021() {
  if (GetArenaNoVirtual() == NULL && google_argon_2021_ != NULL) delete google_argon_2021_;
  google_argon_2021_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::google_argon_2021() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.google_argon_2021)
  return google_argon_2021_ != NULL ? *google_argon_2021_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_google_argon_2021() {
  
  if (google_argon_2021_ == NULL) {
    google_argon_2021_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.google_argon_2021)
  return google_argon_2021_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_google_argon_2021() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.google_argon_2021)
  
  ::zsearch::CTServerStatus* temp = google_argon_2021_;
  google_argon_2021_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_google_argon_2021(::zsearch::CTServerStatus* google_argon_2021) {
  delete google_argon_2021_;
  google_argon_2021_ = google_argon_2021;
  if (google_argon_2021) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.google_argon_2021)
}

// .zsearch.CTServerStatus cloudfare_nimbus_2017 = 60;
inline bool CTStatus::has_cloudfare_nimbus_2017() const {
  return this != internal_default_instance() && cloudfare_nimbus_2017_ != NULL;
}
inline void CTStatus::clear_cloudfare_nimbus_2017() {
  if (GetArenaNoVirtual() == NULL && cloudfare_nimbus_2017_ != NULL) delete cloudfare_nimbus_2017_;
  cloudfare_nimbus_2017_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::cloudfare_nimbus_2017() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.cloudfare_nimbus_2017)
  return cloudfare_nimbus_2017_ != NULL ? *cloudfare_nimbus_2017_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_cloudfare_nimbus_2017() {
  
  if (cloudfare_nimbus_2017_ == NULL) {
    cloudfare_nimbus_2017_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.cloudfare_nimbus_2017)
  return cloudfare_nimbus_2017_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_cloudfare_nimbus_2017() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.cloudfare_nimbus_2017)
  
  ::zsearch::CTServerStatus* temp = cloudfare_nimbus_2017_;
  cloudfare_nimbus_2017_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_cloudfare_nimbus_2017(::zsearch::CTServerStatus* cloudfare_nimbus_2017) {
  delete cloudfare_nimbus_2017_;
  cloudfare_nimbus_2017_ = cloudfare_nimbus_2017;
  if (cloudfare_nimbus_2017) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.cloudfare_nimbus_2017)
}

// .zsearch.CTServerStatus cloudfare_nimbus_2018 = 61;
inline bool CTStatus::has_cloudfare_nimbus_2018() const {
  return this != internal_default_instance() && cloudfare_nimbus_2018_ != NULL;
}
inline void CTStatus::clear_cloudfare_nimbus_2018() {
  if (GetArenaNoVirtual() == NULL && cloudfare_nimbus_2018_ != NULL) delete cloudfare_nimbus_2018_;
  cloudfare_nimbus_2018_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::cloudfare_nimbus_2018() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.cloudfare_nimbus_2018)
  return cloudfare_nimbus_2018_ != NULL ? *cloudfare_nimbus_2018_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_cloudfare_nimbus_2018() {
  
  if (cloudfare_nimbus_2018_ == NULL) {
    cloudfare_nimbus_2018_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.cloudfare_nimbus_2018)
  return cloudfare_nimbus_2018_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_cloudfare_nimbus_2018() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.cloudfare_nimbus_2018)
  
  ::zsearch::CTServerStatus* temp = cloudfare_nimbus_2018_;
  cloudfare_nimbus_2018_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_cloudfare_nimbus_2018(::zsearch::CTServerStatus* cloudfare_nimbus_2018) {
  delete cloudfare_nimbus_2018_;
  cloudfare_nimbus_2018_ = cloudfare_nimbus_2018;
  if (cloudfare_nimbus_2018) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.cloudfare_nimbus_2018)
}

// .zsearch.CTServerStatus cloudfare_nimbus_2019 = 62;
inline bool CTStatus::has_cloudfare_nimbus_2019() const {
  return this != internal_default_instance() && cloudfare_nimbus_2019_ != NULL;
}
inline void CTStatus::clear_cloudfare_nimbus_2019() {
  if (GetArenaNoVirtual() == NULL && cloudfare_nimbus_2019_ != NULL) delete cloudfare_nimbus_2019_;
  cloudfare_nimbus_2019_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::cloudfare_nimbus_2019() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.cloudfare_nimbus_2019)
  return cloudfare_nimbus_2019_ != NULL ? *cloudfare_nimbus_2019_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_cloudfare_nimbus_2019() {
  
  if (cloudfare_nimbus_2019_ == NULL) {
    cloudfare_nimbus_2019_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.cloudfare_nimbus_2019)
  return cloudfare_nimbus_2019_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_cloudfare_nimbus_2019() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.cloudfare_nimbus_2019)
  
  ::zsearch::CTServerStatus* temp = cloudfare_nimbus_2019_;
  cloudfare_nimbus_2019_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_cloudfare_nimbus_2019(::zsearch::CTServerStatus* cloudfare_nimbus_2019) {
  delete cloudfare_nimbus_2019_;
  cloudfare_nimbus_2019_ = cloudfare_nimbus_2019;
  if (cloudfare_nimbus_2019) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.cloudfare_nimbus_2019)
}

// .zsearch.CTServerStatus cloudfare_nimbus_2020 = 63;
inline bool CTStatus::has_cloudfare_nimbus_2020() const {
  return this != internal_default_instance() && cloudfare_nimbus_2020_ != NULL;
}
inline void CTStatus::clear_cloudfare_nimbus_2020() {
  if (GetArenaNoVirtual() == NULL && cloudfare_nimbus_2020_ != NULL) delete cloudfare_nimbus_2020_;
  cloudfare_nimbus_2020_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::cloudfare_nimbus_2020() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.cloudfare_nimbus_2020)
  return cloudfare_nimbus_2020_ != NULL ? *cloudfare_nimbus_2020_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_cloudfare_nimbus_2020() {
  
  if (cloudfare_nimbus_2020_ == NULL) {
    cloudfare_nimbus_2020_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.cloudfare_nimbus_2020)
  return cloudfare_nimbus_2020_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_cloudfare_nimbus_2020() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.cloudfare_nimbus_2020)
  
  ::zsearch::CTServerStatus* temp = cloudfare_nimbus_2020_;
  cloudfare_nimbus_2020_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_cloudfare_nimbus_2020(::zsearch::CTServerStatus* cloudfare_nimbus_2020) {
  delete cloudfare_nimbus_2020_;
  cloudfare_nimbus_2020_ = cloudfare_nimbus_2020;
  if (cloudfare_nimbus_2020) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.cloudfare_nimbus_2020)
}

// .zsearch.CTServerStatus cloudfare_nimbus_2021 = 64;
inline bool CTStatus::has_cloudfare_nimbus_2021() const {
  return this != internal_default_instance() && cloudfare_nimbus_2021_ != NULL;
}
inline void CTStatus::clear_cloudfare_nimbus_2021() {
  if (GetArenaNoVirtual() == NULL && cloudfare_nimbus_2021_ != NULL) delete cloudfare_nimbus_2021_;
  cloudfare_nimbus_2021_ = NULL;
}
inline const ::zsearch::CTServerStatus& CTStatus::cloudfare_nimbus_2021() const {
  // @@protoc_insertion_point(field_get:zsearch.CTStatus.cloudfare_nimbus_2021)
  return cloudfare_nimbus_2021_ != NULL ? *cloudfare_nimbus_2021_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* CTStatus::mutable_cloudfare_nimbus_2021() {
  
  if (cloudfare_nimbus_2021_ == NULL) {
    cloudfare_nimbus_2021_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CTStatus.cloudfare_nimbus_2021)
  return cloudfare_nimbus_2021_;
}
inline ::zsearch::CTServerStatus* CTStatus::release_cloudfare_nimbus_2021() {
  // @@protoc_insertion_point(field_release:zsearch.CTStatus.cloudfare_nimbus_2021)
  
  ::zsearch::CTServerStatus* temp = cloudfare_nimbus_2021_;
  cloudfare_nimbus_2021_ = NULL;
  return temp;
}
inline void CTStatus::set_allocated_cloudfare_nimbus_2021(::zsearch::CTServerStatus* cloudfare_nimbus_2021) {
  delete cloudfare_nimbus_2021_;
  cloudfare_nimbus_2021_ = cloudfare_nimbus_2021;
  if (cloudfare_nimbus_2021) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CTStatus.cloudfare_nimbus_2021)
}

// -------------------------------------------------------------------

// SCT

// bytes sha256fp = 1;
inline void SCT::clear_sha256fp() {
  sha256fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SCT::sha256fp() const {
  // @@protoc_insertion_point(field_get:zsearch.SCT.sha256fp)
  return sha256fp_.GetNoArena();
}
inline void SCT::set_sha256fp(const ::std::string& value) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.SCT.sha256fp)
}
#if LANG_CXX11
inline void SCT::set_sha256fp(::std::string&& value) {
  
  sha256fp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.SCT.sha256fp)
}
#endif
inline void SCT::set_sha256fp(const char* value) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.SCT.sha256fp)
}
inline void SCT::set_sha256fp(const void* value, size_t size) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.SCT.sha256fp)
}
inline ::std::string* SCT::mutable_sha256fp() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.SCT.sha256fp)
  return sha256fp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SCT::release_sha256fp() {
  // @@protoc_insertion_point(field_release:zsearch.SCT.sha256fp)
  
  return sha256fp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SCT::set_allocated_sha256fp(::std::string* sha256fp) {
  if (sha256fp != NULL) {
    
  } else {
    
  }
  sha256fp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha256fp);
  // @@protoc_insertion_point(field_set_allocated:zsearch.SCT.sha256fp)
}

// .zsearch.CTServer server = 2;
inline void SCT::clear_server() {
  server_ = 0;
}
inline ::zsearch::CTServer SCT::server() const {
  // @@protoc_insertion_point(field_get:zsearch.SCT.server)
  return static_cast< ::zsearch::CTServer >(server_);
}
inline void SCT::set_server(::zsearch::CTServer value) {
  
  server_ = value;
  // @@protoc_insertion_point(field_set:zsearch.SCT.server)
}

// .zsearch.CTServerStatus status = 3;
inline bool SCT::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void SCT::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::zsearch::CTServerStatus& SCT::status() const {
  // @@protoc_insertion_point(field_get:zsearch.SCT.status)
  return status_ != NULL ? *status_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
inline ::zsearch::CTServerStatus* SCT::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.SCT.status)
  return status_;
}
inline ::zsearch::CTServerStatus* SCT::release_status() {
  // @@protoc_insertion_point(field_release:zsearch.SCT.status)
  
  ::zsearch::CTServerStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void SCT::set_allocated_status(::zsearch::CTServerStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.SCT.status)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace zsearch

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::zsearch::CTPushStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zsearch::CTPushStatus>() {
  return ::zsearch::CTPushStatus_descriptor();
}
template <> struct is_proto_enum< ::zsearch::CTServer> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zsearch::CTServer>() {
  return ::zsearch::CTServer_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ct_2eproto__INCLUDED
